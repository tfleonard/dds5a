
dds5a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  000052c2  00005356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080031c  0080031c  00005572  2**0
                  ALLOC
  3 .stab         00009108  00000000  00000000  00005574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005255  00000000  00000000  0000e67c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000138d1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000138f4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00013934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00013f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000144ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000144e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c6       	rjmp	.+3098   	; 0xc48 <__vector_11>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c0       	rjmp	.+88     	; 0xa2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c0       	rjmp	.+84     	; 0xa2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c0       	rjmp	.+64     	; 0xa2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ec       	ldi	r30, 0xC2	; 194
      7c:	f2 e5       	ldi	r31, 0x52	; 82
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a8 10 	call	0x2150	; 0x2150 <main>
      9e:	0c 94 5f 29 	jmp	0x52be	; 0x52be <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <FONT>:
	...
     230:	00 08       	sbc	r0, r0
     232:	08 08       	sbc	r0, r8
     234:	08 08       	sbc	r0, r8
     236:	08 00       	.word	0x0008	; ????
     238:	08 00       	.word	0x0008	; ????
     23a:	00 00       	nop
     23c:	00 14       	cp	r0, r0
     23e:	14 14       	cp	r1, r4
	...
     248:	00 00       	nop
     24a:	14 14       	cp	r1, r4
     24c:	3e 14       	cp	r3, r14
     24e:	3e 14       	cp	r3, r14
     250:	14 00       	.word	0x0014	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	08 3c       	cpi	r16, 0xC8	; 200
     258:	0a 1c       	adc	r0, r10
     25a:	28 1e       	adc	r2, r24
     25c:	08 00       	.word	0x0008	; ????
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	06 26       	eor	r0, r22
     264:	10 08       	sbc	r1, r0
     266:	04 32       	cpi	r16, 0x24	; 36
     268:	30 00       	.word	0x0030	; ????
     26a:	00 00       	nop
     26c:	00 00       	nop
     26e:	1c 02       	muls	r17, r28
     270:	02 04       	cpc	r0, r2
     272:	2a 12       	cpse	r2, r26
     274:	2c 00       	.word	0x002c	; ????
     276:	00 00       	nop
     278:	00 18       	sub	r0, r0
     27a:	08 04       	cpc	r0, r8
	...
     284:	20 10       	cpse	r2, r0
     286:	10 08       	sbc	r1, r0
     288:	08 08       	sbc	r0, r8
     28a:	08 08       	sbc	r0, r8
     28c:	10 10       	cpse	r1, r0
     28e:	20 00       	.word	0x0020	; ????
     290:	02 04       	cpc	r0, r2
     292:	04 08       	sbc	r0, r4
     294:	08 08       	sbc	r0, r8
     296:	08 08       	sbc	r0, r8
     298:	04 04       	cpc	r0, r4
     29a:	02 00       	.word	0x0002	; ????
     29c:	00 00       	nop
     29e:	00 08       	sbc	r0, r0
     2a0:	2a 1c       	adc	r2, r10
     2a2:	2a 08       	sbc	r2, r10
     2a4:	00 00       	nop
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 08       	sbc	r0, r0
     2ac:	08 3e       	cpi	r16, 0xE8	; 232
     2ae:	08 08       	sbc	r0, r8
	...
     2b8:	00 00       	nop
     2ba:	00 18       	sub	r0, r0
     2bc:	18 08       	sbc	r1, r8
     2be:	04 00       	.word	0x0004	; ????
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 3e       	cpi	r16, 0xE0	; 224
	...
     2d2:	00 18       	sub	r0, r0
     2d4:	18 00       	.word	0x0018	; ????
     2d6:	00 00       	nop
     2d8:	20 20       	and	r2, r0
     2da:	10 10       	cpse	r1, r0
     2dc:	08 08       	sbc	r0, r8
     2de:	04 04       	cpc	r0, r4
     2e0:	02 02       	muls	r16, r18
     2e2:	00 00       	nop
     2e4:	00 1c       	adc	r0, r0
     2e6:	22 32       	cpi	r18, 0x22	; 34
     2e8:	2a 26       	eor	r2, r26
     2ea:	22 22       	and	r2, r18
     2ec:	1c 00       	.word	0x001c	; ????
     2ee:	00 00       	nop
     2f0:	00 08       	sbc	r0, r0
     2f2:	0c 08       	sbc	r0, r12
     2f4:	08 08       	sbc	r0, r8
     2f6:	08 08       	sbc	r0, r8
     2f8:	08 00       	.word	0x0008	; ????
     2fa:	00 00       	nop
     2fc:	00 1c       	adc	r0, r0
     2fe:	22 20       	and	r2, r2
     300:	10 08       	sbc	r1, r0
     302:	04 02       	muls	r16, r20
     304:	3e 00       	.word	0x003e	; ????
     306:	00 00       	nop
     308:	00 1c       	adc	r0, r0
     30a:	22 20       	and	r2, r2
     30c:	18 20       	and	r1, r8
     30e:	20 22       	and	r2, r16
     310:	1c 00       	.word	0x001c	; ????
     312:	00 00       	nop
     314:	00 10       	cpse	r0, r0
     316:	18 18       	sub	r1, r8
     318:	14 14       	cp	r1, r4
     31a:	3e 10       	cpse	r3, r14
     31c:	38 00       	.word	0x0038	; ????
     31e:	00 00       	nop
     320:	00 3e       	cpi	r16, 0xE0	; 224
     322:	02 02       	muls	r16, r18
     324:	1e 20       	and	r1, r14
     326:	20 22       	and	r2, r16
     328:	1c 00       	.word	0x001c	; ????
     32a:	00 00       	nop
     32c:	00 18       	sub	r0, r0
     32e:	04 02       	muls	r16, r20
     330:	1e 22       	and	r1, r30
     332:	22 22       	and	r2, r18
     334:	1c 00       	.word	0x001c	; ????
     336:	00 00       	nop
     338:	00 3e       	cpi	r16, 0xE0	; 224
     33a:	22 20       	and	r2, r2
     33c:	20 10       	cpse	r2, r0
     33e:	10 08       	sbc	r1, r0
     340:	08 00       	.word	0x0008	; ????
     342:	00 00       	nop
     344:	00 1c       	adc	r0, r0
     346:	22 22       	and	r2, r18
     348:	1c 22       	and	r1, r28
     34a:	22 22       	and	r2, r18
     34c:	1c 00       	.word	0x001c	; ????
     34e:	00 00       	nop
     350:	00 1c       	adc	r0, r0
     352:	22 22       	and	r2, r18
     354:	22 3c       	cpi	r18, 0xC2	; 194
     356:	20 10       	cpse	r2, r0
     358:	0c 00       	.word	0x000c	; ????
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	00 18       	sub	r0, r0
     360:	18 00       	.word	0x0018	; ????
     362:	00 18       	sub	r0, r0
     364:	18 00       	.word	0x0018	; ????
     366:	00 00       	nop
     368:	00 00       	nop
     36a:	00 18       	sub	r0, r0
     36c:	18 00       	.word	0x0018	; ????
     36e:	00 18       	sub	r0, r0
     370:	18 08       	sbc	r1, r8
     372:	04 00       	.word	0x0004	; ????
     374:	00 00       	nop
     376:	00 30       	cpi	r16, 0x00	; 0
     378:	0c 03       	fmul	r16, r20
     37a:	0c 30       	cpi	r16, 0x0C	; 12
	...
     384:	3e 00       	.word	0x003e	; ????
     386:	3e 00       	.word	0x003e	; ????
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 03       	mulsu	r16, r16
     390:	0c 30       	cpi	r16, 0x0C	; 12
     392:	0c 03       	fmul	r16, r20
     394:	00 00       	nop
     396:	00 00       	nop
     398:	00 1c       	adc	r0, r0
     39a:	22 20       	and	r2, r2
     39c:	10 08       	sbc	r1, r0
     39e:	08 00       	.word	0x0008	; ????
     3a0:	08 00       	.word	0x0008	; ????
     3a2:	00 00       	nop
     3a4:	00 00       	nop
     3a6:	1c 22       	and	r1, r28
     3a8:	3a 3a       	cpi	r19, 0xAA	; 170
     3aa:	1a 02       	muls	r17, r26
     3ac:	1c 00       	.word	0x001c	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	08 14       	cp	r0, r8
     3b4:	22 22       	and	r2, r18
     3b6:	3e 22       	and	r3, r30
     3b8:	22 00       	.word	0x0022	; ????
     3ba:	00 00       	nop
     3bc:	00 00       	nop
     3be:	1e 22       	and	r1, r30
     3c0:	22 1e       	adc	r2, r18
     3c2:	22 22       	and	r2, r18
     3c4:	1e 00       	.word	0x001e	; ????
     3c6:	00 00       	nop
     3c8:	00 00       	nop
     3ca:	1c 22       	and	r1, r28
     3cc:	02 02       	muls	r16, r18
     3ce:	02 22       	and	r0, r18
     3d0:	1c 00       	.word	0x001c	; ????
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	0e 12       	cpse	r0, r30
     3d8:	22 22       	and	r2, r18
     3da:	22 12       	cpse	r2, r18
     3dc:	0e 00       	.word	0x000e	; ????
     3de:	00 00       	nop
     3e0:	00 00       	nop
     3e2:	3e 02       	muls	r19, r30
     3e4:	02 1e       	adc	r0, r18
     3e6:	02 02       	muls	r16, r18
     3e8:	3e 00       	.word	0x003e	; ????
     3ea:	00 00       	nop
     3ec:	00 00       	nop
     3ee:	3e 02       	muls	r19, r30
     3f0:	02 1e       	adc	r0, r18
     3f2:	02 02       	muls	r16, r18
     3f4:	02 00       	.word	0x0002	; ????
     3f6:	00 00       	nop
     3f8:	00 00       	nop
     3fa:	1c 22       	and	r1, r28
     3fc:	02 32       	cpi	r16, 0x22	; 34
     3fe:	22 22       	and	r2, r18
     400:	3c 00       	.word	0x003c	; ????
     402:	00 00       	nop
     404:	00 00       	nop
     406:	22 22       	and	r2, r18
     408:	22 3e       	cpi	r18, 0xE2	; 226
     40a:	22 22       	and	r2, r18
     40c:	22 00       	.word	0x0022	; ????
     40e:	00 00       	nop
     410:	00 00       	nop
     412:	3e 08       	sbc	r3, r14
     414:	08 08       	sbc	r0, r8
     416:	08 08       	sbc	r0, r8
     418:	3e 00       	.word	0x003e	; ????
     41a:	00 00       	nop
     41c:	00 00       	nop
     41e:	38 20       	and	r3, r8
     420:	20 20       	and	r2, r0
     422:	22 22       	and	r2, r18
     424:	1c 00       	.word	0x001c	; ????
     426:	00 00       	nop
     428:	00 00       	nop
     42a:	22 12       	cpse	r2, r18
     42c:	0a 06       	cpc	r0, r26
     42e:	0a 12       	cpse	r0, r26
     430:	22 00       	.word	0x0022	; ????
     432:	00 00       	nop
     434:	00 00       	nop
     436:	02 02       	muls	r16, r18
     438:	02 02       	muls	r16, r18
     43a:	02 02       	muls	r16, r18
     43c:	3e 00       	.word	0x003e	; ????
     43e:	00 00       	nop
     440:	00 00       	nop
     442:	22 36       	cpi	r18, 0x62	; 98
     444:	2a 2a       	or	r2, r26
     446:	22 22       	and	r2, r18
     448:	22 00       	.word	0x0022	; ????
     44a:	00 00       	nop
     44c:	00 00       	nop
     44e:	22 26       	eor	r2, r18
     450:	26 2a       	or	r2, r22
     452:	32 32       	cpi	r19, 0x22	; 34
     454:	22 00       	.word	0x0022	; ????
     456:	00 00       	nop
     458:	00 00       	nop
     45a:	1c 22       	and	r1, r28
     45c:	22 22       	and	r2, r18
     45e:	22 22       	and	r2, r18
     460:	1c 00       	.word	0x001c	; ????
     462:	00 00       	nop
     464:	00 00       	nop
     466:	1e 22       	and	r1, r30
     468:	22 1e       	adc	r2, r18
     46a:	02 02       	muls	r16, r18
     46c:	02 00       	.word	0x0002	; ????
     46e:	00 00       	nop
     470:	00 00       	nop
     472:	1c 22       	and	r1, r28
     474:	22 22       	and	r2, r18
     476:	22 22       	and	r2, r18
     478:	1c 30       	cpi	r17, 0x0C	; 12
     47a:	00 00       	nop
     47c:	00 00       	nop
     47e:	1e 22       	and	r1, r30
     480:	22 1e       	adc	r2, r18
     482:	0a 12       	cpse	r0, r26
     484:	22 00       	.word	0x0022	; ????
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	1c 22       	and	r1, r28
     48c:	02 1c       	adc	r0, r2
     48e:	20 22       	and	r2, r16
     490:	1c 00       	.word	0x001c	; ????
     492:	00 00       	nop
     494:	00 00       	nop
     496:	3e 08       	sbc	r3, r14
     498:	08 08       	sbc	r0, r8
     49a:	08 08       	sbc	r0, r8
     49c:	08 00       	.word	0x0008	; ????
     49e:	00 00       	nop
     4a0:	00 00       	nop
     4a2:	22 22       	and	r2, r18
     4a4:	22 22       	and	r2, r18
     4a6:	22 22       	and	r2, r18
     4a8:	1c 00       	.word	0x001c	; ????
     4aa:	00 00       	nop
     4ac:	00 00       	nop
     4ae:	22 22       	and	r2, r18
     4b0:	22 14       	cp	r2, r2
     4b2:	14 08       	sbc	r1, r4
     4b4:	08 00       	.word	0x0008	; ????
     4b6:	00 00       	nop
     4b8:	00 00       	nop
     4ba:	22 22       	and	r2, r18
     4bc:	22 2a       	or	r2, r18
     4be:	2a 36       	cpi	r18, 0x6A	; 106
     4c0:	22 00       	.word	0x0022	; ????
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     4c6:	22 22       	and	r2, r18
     4c8:	14 08       	sbc	r1, r4
     4ca:	14 22       	and	r1, r20
     4cc:	22 00       	.word	0x0022	; ????
     4ce:	00 00       	nop
     4d0:	00 00       	nop
     4d2:	22 22       	and	r2, r18
     4d4:	14 08       	sbc	r1, r4
     4d6:	08 08       	sbc	r0, r8
     4d8:	08 00       	.word	0x0008	; ????
     4da:	00 00       	nop
     4dc:	00 00       	nop
     4de:	3e 20       	and	r3, r14
     4e0:	10 08       	sbc	r1, r0
     4e2:	04 02       	muls	r16, r20
     4e4:	3e 00       	.word	0x003e	; ????
     4e6:	00 00       	nop
     4e8:	38 08       	sbc	r3, r8
     4ea:	08 08       	sbc	r0, r8
     4ec:	08 08       	sbc	r0, r8
     4ee:	08 08       	sbc	r0, r8
     4f0:	08 08       	sbc	r0, r8
     4f2:	38 00       	.word	0x0038	; ????
     4f4:	02 02       	muls	r16, r18
     4f6:	04 04       	cpc	r0, r4
     4f8:	08 08       	sbc	r0, r8
     4fa:	10 10       	cpse	r1, r0
     4fc:	20 20       	and	r2, r0
     4fe:	00 00       	nop
     500:	0e 08       	sbc	r0, r14
     502:	08 08       	sbc	r0, r8
     504:	08 08       	sbc	r0, r8
     506:	08 08       	sbc	r0, r8
     508:	08 08       	sbc	r0, r8
     50a:	0e 00       	.word	0x000e	; ????
     50c:	00 08       	sbc	r0, r0
     50e:	14 22       	and	r1, r20
	...
     520:	00 3f       	cpi	r16, 0xF0	; 240
     522:	00 00       	nop
     524:	00 0c       	add	r0, r0
     526:	08 10       	cpse	r0, r8
	...
     534:	3c 22       	and	r3, r28
     536:	22 32       	cpi	r18, 0x22	; 34
     538:	2c 00       	.word	0x002c	; ????
     53a:	00 00       	nop
     53c:	00 02       	muls	r16, r16
     53e:	02 02       	muls	r16, r18
     540:	1e 22       	and	r1, r30
     542:	22 22       	and	r2, r18
     544:	1e 00       	.word	0x001e	; ????
     546:	00 00       	nop
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	3c 02       	muls	r19, r28
     54e:	02 02       	muls	r16, r18
     550:	3c 00       	.word	0x003c	; ????
     552:	00 00       	nop
     554:	00 20       	and	r0, r0
     556:	20 20       	and	r2, r0
     558:	3c 22       	and	r3, r28
     55a:	22 22       	and	r2, r18
     55c:	3c 00       	.word	0x003c	; ????
     55e:	00 00       	nop
     560:	00 00       	nop
     562:	00 00       	nop
     564:	1c 22       	and	r1, r28
     566:	3e 02       	muls	r19, r30
     568:	1c 00       	.word	0x001c	; ????
     56a:	00 00       	nop
     56c:	00 38       	cpi	r16, 0x80	; 128
     56e:	04 04       	cpc	r0, r4
     570:	1e 04       	cpc	r1, r14
     572:	04 04       	cpc	r0, r4
     574:	04 00       	.word	0x0004	; ????
     576:	00 00       	nop
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	3c 22       	and	r3, r28
     57e:	22 22       	and	r2, r18
     580:	3c 20       	and	r3, r12
     582:	20 1c       	adc	r2, r0
     584:	00 02       	muls	r16, r16
     586:	02 02       	muls	r16, r18
     588:	1e 22       	and	r1, r30
     58a:	22 22       	and	r2, r18
     58c:	22 00       	.word	0x0022	; ????
     58e:	00 00       	nop
     590:	00 08       	sbc	r0, r0
     592:	08 00       	.word	0x0008	; ????
     594:	0c 08       	sbc	r0, r12
     596:	08 08       	sbc	r0, r8
     598:	1c 00       	.word	0x001c	; ????
     59a:	00 00       	nop
     59c:	00 10       	cpse	r0, r0
     59e:	10 00       	.word	0x0010	; ????
     5a0:	1c 10       	cpse	r1, r12
     5a2:	10 10       	cpse	r1, r0
     5a4:	10 10       	cpse	r1, r0
     5a6:	10 0e       	add	r1, r16
     5a8:	00 02       	muls	r16, r16
     5aa:	02 02       	muls	r16, r18
     5ac:	12 0a       	sbc	r1, r18
     5ae:	06 0a       	sbc	r0, r22
     5b0:	12 00       	.word	0x0012	; ????
     5b2:	00 00       	nop
     5b4:	00 0c       	add	r0, r0
     5b6:	08 08       	sbc	r0, r8
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	1c 00       	.word	0x001c	; ????
     5be:	00 00       	nop
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	16 2a       	or	r1, r22
     5c6:	2a 2a       	or	r2, r26
     5c8:	22 00       	.word	0x0022	; ????
     5ca:	00 00       	nop
     5cc:	00 00       	nop
     5ce:	00 00       	nop
     5d0:	1a 26       	eor	r1, r26
     5d2:	22 22       	and	r2, r18
     5d4:	22 00       	.word	0x0022	; ????
     5d6:	00 00       	nop
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	1c 22       	and	r1, r28
     5de:	22 22       	and	r2, r18
     5e0:	1c 00       	.word	0x001c	; ????
     5e2:	00 00       	nop
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	1e 22       	and	r1, r30
     5ea:	22 22       	and	r2, r18
     5ec:	1e 02       	muls	r17, r30
     5ee:	02 02       	muls	r16, r18
     5f0:	00 00       	nop
     5f2:	00 00       	nop
     5f4:	3c 22       	and	r3, r28
     5f6:	22 22       	and	r2, r18
     5f8:	3c 20       	and	r3, r12
     5fa:	20 20       	and	r2, r0
     5fc:	00 00       	nop
     5fe:	00 00       	nop
     600:	1a 06       	cpc	r1, r26
     602:	02 02       	muls	r16, r18
     604:	02 00       	.word	0x0002	; ????
     606:	00 00       	nop
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	3c 02       	muls	r19, r28
     60e:	1c 20       	and	r1, r12
     610:	1e 00       	.word	0x001e	; ????
     612:	00 00       	nop
     614:	00 08       	sbc	r0, r0
     616:	08 08       	sbc	r0, r8
     618:	3e 08       	sbc	r3, r14
     61a:	08 08       	sbc	r0, r8
     61c:	30 00       	.word	0x0030	; ????
     61e:	00 00       	nop
     620:	00 00       	nop
     622:	00 00       	nop
     624:	22 22       	and	r2, r18
     626:	22 32       	cpi	r18, 0x22	; 34
     628:	2c 00       	.word	0x002c	; ????
     62a:	00 00       	nop
     62c:	00 00       	nop
     62e:	00 00       	nop
     630:	36 14       	cp	r3, r6
     632:	14 08       	sbc	r1, r4
     634:	08 00       	.word	0x0008	; ????
     636:	00 00       	nop
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	22 2a       	or	r2, r18
     63e:	2a 2a       	or	r2, r26
     640:	14 00       	.word	0x0014	; ????
     642:	00 00       	nop
     644:	00 00       	nop
     646:	00 00       	nop
     648:	22 14       	cp	r2, r2
     64a:	08 14       	cp	r0, r8
     64c:	22 00       	.word	0x0022	; ????
     64e:	00 00       	nop
     650:	00 00       	nop
     652:	00 00       	nop
     654:	22 22       	and	r2, r18
     656:	22 22       	and	r2, r18
     658:	3c 20       	and	r3, r12
     65a:	20 1c       	adc	r2, r0
     65c:	00 00       	nop
     65e:	00 00       	nop
     660:	3e 10       	cpse	r3, r14
     662:	08 04       	cpc	r0, r8
     664:	3e 00       	.word	0x003e	; ????
     666:	00 00       	nop
     668:	20 10       	cpse	r2, r0
     66a:	10 10       	cpse	r1, r0
     66c:	10 08       	sbc	r1, r0
     66e:	10 10       	cpse	r1, r0
     670:	10 10       	cpse	r1, r0
     672:	20 00       	.word	0x0020	; ????
     674:	08 08       	sbc	r0, r8
     676:	08 08       	sbc	r0, r8
     678:	08 08       	sbc	r0, r8
     67a:	08 08       	sbc	r0, r8
     67c:	08 08       	sbc	r0, r8
     67e:	08 00       	.word	0x0008	; ????
     680:	02 04       	cpc	r0, r2
     682:	04 04       	cpc	r0, r4
     684:	04 08       	sbc	r0, r4
     686:	04 04       	cpc	r0, r4
     688:	04 04       	cpc	r0, r4
     68a:	02 00       	.word	0x0002	; ????
     68c:	00 04       	cpc	r0, r0
     68e:	2a 10       	cpse	r2, r10
	...
     698:	00 00       	nop
     69a:	00 08       	sbc	r0, r0
     69c:	08 14       	cp	r0, r8
     69e:	14 22       	and	r1, r20
     6a0:	3e 00       	.word	0x003e	; ????
	...

000006a4 <_getPixels>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	9c e0       	ldi	r25, 0x0C	; 12
     6aa:	89 9f       	mul	r24, r25

000006ac <_gp1>:
     6ac:	e2 e5       	ldi	r30, 0x52	; 82
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e0 0d       	add	r30, r0
     6b6:	f1 1d       	adc	r31, r1
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	eb 01       	movw	r28, r22

000006bc <gpix1>:
     6bc:	95 91       	lpm	r25, Z+
     6be:	99 93       	st	Y+, r25
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <gpix1>
     6c4:	11 24       	eor	r1, r1
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_ZN8CallbackC1Ev>:
// This class defines a callback interface
// to be used by functions to register callbacks with other functions
// The first use is to provide callbacks to the clock routines.
//

class Callback
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN8CallbackC1Ev+0x6>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	2f ee       	ldi	r18, 0xEF	; 239
     6e0:	32 e0       	ldi	r19, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	31 83       	std	Z+1, r19	; 0x01
     6e6:	20 83       	st	Z, r18
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <_ZN11ElapsedTimeC1Eh>:
#include <avr/interrupt.h>

#include "clock.h"
#include "ElapsedTime.h"
 
ElapsedTime::ElapsedTime(uint8_t nt) {
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <_ZN11ElapsedTimeC1Eh+0x6>
     6f8:	1f 92       	push	r1
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	6b 83       	std	Y+3, r22	; 0x03
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	e1 df       	rcall	.-62     	; 0x6cc <_ZN8CallbackC1Ev>
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	29 ee       	ldi	r18, 0xE9	; 233
     710:	32 e0       	ldi	r19, 0x02	; 2
     712:	fc 01       	movw	r30, r24
     714:	31 83       	std	Z+1, r19	; 0x01
     716:	20 83       	st	Z, r18
     718:	89 81       	ldd	r24, Y+1	; 0x01
	event = 0;
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	fc 01       	movw	r30, r24
     71e:	12 82       	std	Z+2, r1	; 0x02
     720:	89 81       	ldd	r24, Y+1	; 0x01
	numTicks = nt;
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	2b 81       	ldd	r18, Y+3	; 0x03
     726:	fc 01       	movw	r30, r24
     728:	24 83       	std	Z+4, r18	; 0x04
     72a:	89 81       	ldd	r24, Y+1	; 0x01
	ticks = 0;
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	fc 01       	movw	r30, r24
     730:	13 82       	std	Z+3, r1	; 0x03
     732:	89 81       	ldd	r24, Y+1	; 0x01
	Clock::registerPeriodic(this);
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	a1 d3       	rcall	.+1858   	; 0xe7a <_ZN5Clock16registerPeriodicEP8Callback>
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
}
     73c:	0f 90       	pop	r0
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <_ZN11ElapsedTime8callbackEv>:


void ElapsedTime::callback(void) {
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	00 d0       	rcall	.+0      	; 0x74a <_ZN11ElapsedTime8callbackEv+0x6>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	9a 83       	std	Y+2, r25	; 0x02
     750:	89 83       	std	Y+1, r24	; 0x01
	ticks++;
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	fc 01       	movw	r30, r24
     758:	83 81       	ldd	r24, Z+3	; 0x03
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	28 0f       	add	r18, r24
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	fc 01       	movw	r30, r24
     764:	23 83       	std	Z+3, r18	; 0x03
	if (ticks >= numTicks) {
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	23 81       	ldd	r18, Z+3	; 0x03
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	28 17       	cp	r18, r24
     778:	70 f0       	brcs	.+28     	; 0x796 <_ZN11ElapsedTime8callbackEv+0x52>
		ticks = 0;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	fc 01       	movw	r30, r24
     780:	13 82       	std	Z+3, r1	; 0x03
		event++;
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	fc 01       	movw	r30, r24
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	28 0f       	add	r18, r24
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	fc 01       	movw	r30, r24
     794:	22 83       	std	Z+2, r18	; 0x02
	}
}
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <_ZN11ElapsedTime7expiredEv>:


bool ElapsedTime:: expired(void) {
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <_ZN11ElapsedTime7expiredEv+0x6>
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	9a 83       	std	Y+2, r25	; 0x02
     7ac:	89 83       	std	Y+1, r24	; 0x01
	if (event) {
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	fc 01       	movw	r30, r24
     7b4:	82 81       	ldd	r24, Z+2	; 0x02
     7b6:	88 23       	and	r24, r24
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <_ZN11ElapsedTime7expiredEv+0x26>
		event = 0;
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	fc 01       	movw	r30, r24
     7c0:	12 82       	std	Z+2, r1	; 0x02
		return true;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <_ZN11ElapsedTime7expiredEv+0x28>
	}
	return false;
     7c6:	80 e0       	ldi	r24, 0x00	; 0
}
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <_ZN2SwnwEj>:
	bool	hasEvent(void);
	event getEvent(void);
	void	clearEvent(void);
	void	callback(void);
	bool	isClosed(void);
	void *operator new(size_t size) { return malloc(size);}
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <_ZN2SwnwEj+0x6>
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <_ZN7EncoderC1Ehhh>:
#include "clock.h"
#include "sw.h"
#include "Encoder.h"


Encoder::Encoder(uint8_t a, uint8_t b, uint8_t port) {
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <_ZN7EncoderC1Ehhh+0xa>
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <_ZN7EncoderC1Ehhh+0xc>
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	6b 83       	std	Y+3, r22	; 0x03
     80a:	4c 83       	std	Y+4, r20	; 0x04
     80c:	2d 83       	std	Y+5, r18	; 0x05
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	5c df       	rcall	.-328    	; 0x6cc <_ZN8CallbackC1Ev>
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	25 ef       	ldi	r18, 0xF5	; 245
     81a:	32 e0       	ldi	r19, 0x02	; 2
     81c:	fc 01       	movw	r30, r24
     81e:	31 83       	std	Z+1, r19	; 0x01
     820:	20 83       	st	Z, r18

	eventRate = 4;				// default 4 pulses per cycle
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	9a 81       	ldd	r25, Y+2	; 0x02
     826:	24 e0       	ldi	r18, 0x04	; 4
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	36 87       	std	Z+14, r19	; 0x0e
     82e:	25 87       	std	Z+13, r18	; 0x0d
	encA = new Sw(a, port);
     830:	8b e0       	ldi	r24, 0x0B	; 11
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	ce df       	rcall	.-100    	; 0x7d2 <_ZN2SwnwEj>
     836:	8c 01       	movw	r16, r24
     838:	4d 81       	ldd	r20, Y+5	; 0x05
     83a:	6b 81       	ldd	r22, Y+3	; 0x03
     83c:	c8 01       	movw	r24, r16
     83e:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN2SwC1Ehh>
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	fc 01       	movw	r30, r24
     848:	13 83       	std	Z+3, r17	; 0x03
     84a:	02 83       	std	Z+2, r16	; 0x02
	encB = new Sw(b, port);
     84c:	8b e0       	ldi	r24, 0x0B	; 11
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	c0 df       	rcall	.-128    	; 0x7d2 <_ZN2SwnwEj>
     852:	8c 01       	movw	r16, r24
     854:	4d 81       	ldd	r20, Y+5	; 0x05
     856:	6c 81       	ldd	r22, Y+4	; 0x04
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN2SwC1Ehh>
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	9a 81       	ldd	r25, Y+2	; 0x02
     862:	fc 01       	movw	r30, r24
     864:	15 83       	std	Z+5, r17	; 0x05
     866:	04 83       	std	Z+4, r16	; 0x04
		
	if (encA->isClosed()) {
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	fc 01       	movw	r30, r24
     86e:	82 81       	ldd	r24, Z+2	; 0x02
     870:	93 81       	ldd	r25, Z+3	; 0x03
     872:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     876:	88 23       	and	r24, r24
     878:	c9 f0       	breq	.+50     	; 0x8ac <_ZN7EncoderC1Ehhh+0xba>
		if (encB->isClosed()) {
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	fc 01       	movw	r30, r24
     880:	84 81       	ldd	r24, Z+4	; 0x04
     882:	95 81       	ldd	r25, Z+5	; 0x05
     884:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     888:	88 23       	and	r24, r24
     88a:	41 f0       	breq	.+16     	; 0x89c <_ZN7EncoderC1Ehhh+0xaa>
			curState = 2;
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	22 e0       	ldi	r18, 0x02	; 2
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	37 83       	std	Z+7, r19	; 0x07
     898:	26 83       	std	Z+6, r18	; 0x06
     89a:	1e c0       	rjmp	.+60     	; 0x8d8 <_ZN7EncoderC1Ehhh+0xe6>
			} else {
			curState = 1;
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	fc 01       	movw	r30, r24
     8a6:	37 83       	std	Z+7, r19	; 0x07
     8a8:	26 83       	std	Z+6, r18	; 0x06
     8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <_ZN7EncoderC1Ehhh+0xe6>
		}
		} else {
		if (encB->isClosed()) {
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	fc 01       	movw	r30, r24
     8b2:	84 81       	ldd	r24, Z+4	; 0x04
     8b4:	95 81       	ldd	r25, Z+5	; 0x05
     8b6:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     8ba:	88 23       	and	r24, r24
     8bc:	41 f0       	breq	.+16     	; 0x8ce <_ZN7EncoderC1Ehhh+0xdc>
			curState = 4;
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	24 e0       	ldi	r18, 0x04	; 4
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	fc 01       	movw	r30, r24
     8c8:	37 83       	std	Z+7, r19	; 0x07
     8ca:	26 83       	std	Z+6, r18	; 0x06
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <_ZN7EncoderC1Ehhh+0xe6>
			} else {
			curState = 0;
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	fc 01       	movw	r30, r24
     8d4:	17 82       	std	Z+7, r1	; 0x07
     8d6:	16 82       	std	Z+6, r1	; 0x06
		}
	}
	lastEvent = ENC_NO_EVENT;
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	10 86       	std	Z+8, r1	; 0x08
	Clock::registerPeriodic(this);
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	ca d2       	rcall	.+1428   	; 0xe7a <_ZN5Clock16registerPeriodicEP8Callback>
	missedCwCount = 0;
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	fc 01       	movw	r30, r24
     8ec:	12 86       	std	Z+10, r1	; 0x0a
     8ee:	11 86       	std	Z+9, r1	; 0x09
	missedCcwCount = 0;
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	fc 01       	movw	r30, r24
     8f6:	14 86       	std	Z+12, r1	; 0x0c
     8f8:	13 86       	std	Z+11, r1	; 0x0b
}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <_ZN7Encoder6updateEv>:
// ccw event. 
//
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	00 d0       	rcall	.+0      	; 0x914 <_ZN7Encoder6updateEv+0x6>
     914:	1f 92       	push	r1
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8a 83       	std	Y+2, r24	; 0x02

	encEvent nxtEvent = ENC_NO_EVENT;
     91e:	19 82       	std	Y+1, r1	; 0x01

	if ( !encA->hasEvent() && !encB->hasEvent() ){
     920:	8a 81       	ldd	r24, Y+2	; 0x02
     922:	9b 81       	ldd	r25, Y+3	; 0x03
     924:	fc 01       	movw	r30, r24
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZN2Sw8hasEventEv>
     92e:	98 2f       	mov	r25, r24
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	89 27       	eor	r24, r25
     934:	88 23       	and	r24, r24
     936:	71 f0       	breq	.+28     	; 0x954 <_ZN7Encoder6updateEv+0x46>
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	9b 81       	ldd	r25, Y+3	; 0x03
     93c:	fc 01       	movw	r30, r24
     93e:	84 81       	ldd	r24, Z+4	; 0x04
     940:	95 81       	ldd	r25, Z+5	; 0x05
     942:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZN2Sw8hasEventEv>
     946:	98 2f       	mov	r25, r24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	89 27       	eor	r24, r25
     94c:	88 23       	and	r24, r24
     94e:	11 f0       	breq	.+4      	; 0x954 <_ZN7Encoder6updateEv+0x46>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	01 c0       	rjmp	.+2      	; 0x956 <_ZN7Encoder6updateEv+0x48>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	88 23       	and	r24, r24
     958:	09 f0       	breq	.+2      	; 0x95c <_ZN7Encoder6updateEv+0x4e>
		return;
     95a:	dc c0       	rjmp	.+440    	; 0xb14 <_ZN7Encoder6updateEv+0x206>
	}

	if (encA->getEvent() == EV_CLOSE) {
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	9b 81       	ldd	r25, Y+3	; 0x03
     960:	fc 01       	movw	r30, r24
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	93 81       	ldd	r25, Z+3	; 0x03
     966:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
     96a:	98 2f       	mov	r25, r24
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	92 30       	cpi	r25, 0x02	; 2
     970:	09 f0       	breq	.+2      	; 0x974 <_ZN7Encoder6updateEv+0x66>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	88 23       	and	r24, r24
     976:	79 f0       	breq	.+30     	; 0x996 <_ZN7Encoder6updateEv+0x88>
		if (encB->isClosed()) {
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	fc 01       	movw	r30, r24
     97e:	84 81       	ldd	r24, Z+4	; 0x04
     980:	95 81       	ldd	r25, Z+5	; 0x05
     982:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     986:	88 23       	and	r24, r24
     988:	19 f0       	breq	.+6      	; 0x990 <_ZN7Encoder6updateEv+0x82>
			nxtEvent = ENC_CCW_EVENT;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	6e c0       	rjmp	.+220    	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		} else {
			nxtEvent = ENC_CW_EVENT;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	6b c0       	rjmp	.+214    	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		}
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	9b 81       	ldd	r25, Y+3	; 0x03
     99a:	fc 01       	movw	r30, r24
     99c:	84 81       	ldd	r24, Z+4	; 0x04
     99e:	95 81       	ldd	r25, Z+5	; 0x05
     9a0:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	49 f4       	brne	.+18     	; 0x9ba <_ZN7Encoder6updateEv+0xac>
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	9b 81       	ldd	r25, Y+3	; 0x03
     9ac:	fc 01       	movw	r30, r24
     9ae:	85 85       	ldd	r24, Z+13	; 0x0d
     9b0:	96 85       	ldd	r25, Z+14	; 0x0e
     9b2:	04 97       	sbiw	r24, 0x04	; 4
     9b4:	11 f4       	brne	.+4      	; 0x9ba <_ZN7Encoder6updateEv+0xac>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <_ZN7Encoder6updateEv+0xae>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	88 23       	and	r24, r24
     9be:	79 f0       	breq	.+30     	; 0x9de <_ZN7Encoder6updateEv+0xd0>
		if (encA->isClosed()) {
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	fc 01       	movw	r30, r24
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     9ce:	88 23       	and	r24, r24
     9d0:	19 f0       	breq	.+6      	; 0x9d8 <_ZN7Encoder6updateEv+0xca>
			nxtEvent = ENC_CW_EVENT;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	4a c0       	rjmp	.+148    	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		} else {
			nxtEvent = ENC_CCW_EVENT;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	47 c0       	rjmp	.+142    	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		}

	} else if ( (encA->getEvent() == EV_OPEN) && (eventRate != 1)) {
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	9b 81       	ldd	r25, Y+3	; 0x03
     9e2:	fc 01       	movw	r30, r24
     9e4:	82 81       	ldd	r24, Z+2	; 0x02
     9e6:	93 81       	ldd	r25, Z+3	; 0x03
     9e8:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	49 f4       	brne	.+18     	; 0xa02 <_ZN7Encoder6updateEv+0xf4>
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	9b 81       	ldd	r25, Y+3	; 0x03
     9f4:	fc 01       	movw	r30, r24
     9f6:	85 85       	ldd	r24, Z+13	; 0x0d
     9f8:	96 85       	ldd	r25, Z+14	; 0x0e
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	11 f0       	breq	.+4      	; 0xa02 <_ZN7Encoder6updateEv+0xf4>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <_ZN7Encoder6updateEv+0xf6>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	88 23       	and	r24, r24
     a06:	79 f0       	breq	.+30     	; 0xa26 <_ZN7Encoder6updateEv+0x118>
		if (encB->isClosed()) {
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	fc 01       	movw	r30, r24
     a0e:	84 81       	ldd	r24, Z+4	; 0x04
     a10:	95 81       	ldd	r25, Z+5	; 0x05
     a12:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     a16:	88 23       	and	r24, r24
     a18:	19 f0       	breq	.+6      	; 0xa20 <_ZN7Encoder6updateEv+0x112>
			nxtEvent = ENC_CW_EVENT;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	26 c0       	rjmp	.+76     	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		} else {
			nxtEvent = ENC_CCW_EVENT;
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	23 c0       	rjmp	.+70     	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	fc 01       	movw	r30, r24
     a2c:	84 81       	ldd	r24, Z+4	; 0x04
     a2e:	95 81       	ldd	r25, Z+5	; 0x05
     a30:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	49 f4       	brne	.+18     	; 0xa4a <_ZN7Encoder6updateEv+0x13c>
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	9b 81       	ldd	r25, Y+3	; 0x03
     a3c:	fc 01       	movw	r30, r24
     a3e:	85 85       	ldd	r24, Z+13	; 0x0d
     a40:	96 85       	ldd	r25, Z+14	; 0x0e
     a42:	04 97       	sbiw	r24, 0x04	; 4
     a44:	11 f4       	brne	.+4      	; 0xa4a <_ZN7Encoder6updateEv+0x13c>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <_ZN7Encoder6updateEv+0x13e>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	88 23       	and	r24, r24
     a4e:	71 f0       	breq	.+28     	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		if (encA->isClosed()) {
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	9b 81       	ldd	r25, Y+3	; 0x03
     a54:	fc 01       	movw	r30, r24
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	93 81       	ldd	r25, Z+3	; 0x03
     a5a:	0e 94 81 1c 	call	0x3902	; 0x3902 <_ZN2Sw8isClosedEv>
     a5e:	88 23       	and	r24, r24
     a60:	19 f0       	breq	.+6      	; 0xa68 <_ZN7Encoder6updateEv+0x15a>
			nxtEvent = ENC_CCW_EVENT;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <_ZN7Encoder6updateEv+0x15e>
		} else {
			nxtEvent = ENC_CW_EVENT;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	89 83       	std	Y+1, r24	; 0x01
		}

	}

	encA->clearEvent();
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	9b 81       	ldd	r25, Y+3	; 0x03
     a70:	fc 01       	movw	r30, r24
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	93 81       	ldd	r25, Z+3	; 0x03
     a76:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN2Sw10clearEventEv>
	encB->clearEvent();
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	9b 81       	ldd	r25, Y+3	; 0x03
     a7e:	fc 01       	movw	r30, r24
     a80:	84 81       	ldd	r24, Z+4	; 0x04
     a82:	95 81       	ldd	r25, Z+5	; 0x05
     a84:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN2Sw10clearEventEv>

	//
	// process new event if any
	//
	if (nxtEvent == ENC_NO_EVENT) {
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_ZN7Encoder6updateEv+0x182>
		return;
     a8e:	42 c0       	rjmp	.+132    	; 0xb14 <_ZN7Encoder6updateEv+0x206>
	} else if (nxtEvent == ENC_CW_EVENT) {		// handle overrun
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	01 f5       	brne	.+64     	; 0xad6 <_ZN7Encoder6updateEv+0x1c8>
		if (nxtEvent == lastEvent) {
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	9b 81       	ldd	r25, Y+3	; 0x03
     a9a:	fc 01       	movw	r30, r24
     a9c:	90 85       	ldd	r25, Z+8	; 0x08
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	98 17       	cp	r25, r24
     aa2:	71 f4       	brne	.+28     	; 0xac0 <_ZN7Encoder6updateEv+0x1b2>
			missedCwCount++;
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	9b 81       	ldd	r25, Y+3	; 0x03
     aa8:	fc 01       	movw	r30, r24
     aaa:	81 85       	ldd	r24, Z+9	; 0x09
     aac:	92 85       	ldd	r25, Z+10	; 0x0a
     aae:	9c 01       	movw	r18, r24
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	9b 81       	ldd	r25, Y+3	; 0x03
     ab8:	fc 01       	movw	r30, r24
     aba:	32 87       	std	Z+10, r19	; 0x0a
     abc:	21 87       	std	Z+9, r18	; 0x09
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <_ZN7Encoder6updateEv+0x206>
		} else {
			missedCwCount = 0;
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	fc 01       	movw	r30, r24
     ac6:	12 86       	std	Z+10, r1	; 0x0a
     ac8:	11 86       	std	Z+9, r1	; 0x09
			lastEvent = nxtEvent;
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	29 81       	ldd	r18, Y+1	; 0x01
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 87       	std	Z+8, r18	; 0x08
     ad4:	1f c0       	rjmp	.+62     	; 0xb14 <_ZN7Encoder6updateEv+0x206>
		}
	} else {
		if (nxtEvent == lastEvent) {
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	fc 01       	movw	r30, r24
     adc:	90 85       	ldd	r25, Z+8	; 0x08
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	98 17       	cp	r25, r24
     ae2:	71 f4       	brne	.+28     	; 0xb00 <_ZN7Encoder6updateEv+0x1f2>
			missedCcwCount++;
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	9b 81       	ldd	r25, Y+3	; 0x03
     ae8:	fc 01       	movw	r30, r24
     aea:	83 85       	ldd	r24, Z+11	; 0x0b
     aec:	94 85       	ldd	r25, Z+12	; 0x0c
     aee:	9c 01       	movw	r18, r24
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	fc 01       	movw	r30, r24
     afa:	34 87       	std	Z+12, r19	; 0x0c
     afc:	23 87       	std	Z+11, r18	; 0x0b
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <_ZN7Encoder6updateEv+0x206>
		} else {
			missedCcwCount = 0;
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	9b 81       	ldd	r25, Y+3	; 0x03
     b04:	fc 01       	movw	r30, r24
     b06:	14 86       	std	Z+12, r1	; 0x0c
     b08:	13 86       	std	Z+11, r1	; 0x0b
			lastEvent = nxtEvent;
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	29 81       	ldd	r18, Y+1	; 0x01
     b10:	fc 01       	movw	r30, r24
     b12:	20 87       	std	Z+8, r18	; 0x08
		}
	}
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <_ZN7Encoder8hasEventEv>:



bool Encoder::hasEvent(void) {
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN7Encoder8hasEventEv+0x6>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
	return (lastEvent != ENC_NO_EVENT);
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	fc 01       	movw	r30, r24
     b34:	90 85       	ldd	r25, Z+8	; 0x08
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	99 23       	and	r25, r25
     b3a:	09 f4       	brne	.+2      	; 0xb3e <_ZN7Encoder8hasEventEv+0x1e>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
}
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <_ZN7Encoder8getEventEv>:


encEvent Encoder::getEvent(void) {
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <_ZN7Encoder8getEventEv+0x6>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	return lastEvent;
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	9a 81       	ldd	r25, Y+2	; 0x02
     b5a:	fc 01       	movw	r30, r24
     b5c:	80 85       	ldd	r24, Z+8	; 0x08
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <_ZN7Encoder10clearEventEv>:


void Encoder::clearEvent(void) {
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <_ZN7Encoder10clearEventEv+0x6>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	89 83       	std	Y+1, r24	; 0x01
	lastEvent = ENC_NO_EVENT;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	fc 01       	movw	r30, r24
     b7c:	10 86       	std	Z+8, r1	; 0x08
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_ZN7Encoder8callbackEv>:


void Encoder::callback(void) {
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <_ZN7Encoder8callbackEv+0x6>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	9a 83       	std	Y+2, r25	; 0x02
     b94:	89 83       	std	Y+1, r24	; 0x01
	update();
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	b9 de       	rcall	.-654    	; 0x90e <_ZN7Encoder6updateEv>
}
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <_ZN7Encoder16getMissedCwCountEv>:


int Encoder::getMissedCwCount(void) {
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	00 d0       	rcall	.+0      	; 0xbac <_ZN7Encoder16getMissedCwCountEv+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <_ZN7Encoder16getMissedCwCountEv+0x8>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	8b 83       	std	Y+3, r24	; 0x03
	int result = missedCwCount;
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	fc 01       	movw	r30, r24
     bbc:	81 85       	ldd	r24, Z+9	; 0x09
     bbe:	92 85       	ldd	r25, Z+10	; 0x0a
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
	missedCwCount = 0;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	fc 01       	movw	r30, r24
     bca:	12 86       	std	Z+10, r1	; 0x0a
     bcc:	11 86       	std	Z+9, r1	; 0x09
	return result;
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <_ZN7Encoder17getMissedCcwCountEv>:


int Encoder::getMissedCcwCount(void) {
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <_ZN7Encoder17getMissedCcwCountEv+0x6>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <_ZN7Encoder17getMissedCcwCountEv+0x8>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
	int result = missedCcwCount;
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	fc 01       	movw	r30, r24
     bf6:	83 85       	ldd	r24, Z+11	; 0x0b
     bf8:	94 85       	ldd	r25, Z+12	; 0x0c
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
	missedCcwCount = 0;
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	fc 01       	movw	r30, r24
     c04:	14 86       	std	Z+12, r1	; 0x0c
     c06:	13 86       	std	Z+11, r1	; 0x0b
	return result;
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <_ZN7Encoder12setEventRateEh>:

void Encoder::setEventRate(uint8_t r) {
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <_ZN7Encoder12setEventRateEh+0x6>
     c20:	1f 92       	push	r1
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	6b 83       	std	Y+3, r22	; 0x03
	eventRate = r;
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	36 87       	std	Z+14, r19	; 0x0e
     c3a:	25 87       	std	Z+13, r18	; 0x0d
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <__vector_11>:
Callback *Clock::singleTasks[NUM_SINGLE_TASKS];

//
// tick isr
//
ISR( TIMER1_COMPA_vect ) {
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	ef 93       	push	r30
     c6a:	ff 93       	push	r31
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
  Clock::tick();
     c74:	14 d0       	rcall	.+40     	; 0xc9e <_ZN5Clock4tickEv>
     c76:	df 91       	pop	r29
}
     c78:	cf 91       	pop	r28
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	bf 91       	pop	r27
     c80:	af 91       	pop	r26
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	7f 91       	pop	r23
     c88:	6f 91       	pop	r22
     c8a:	5f 91       	pop	r21
     c8c:	4f 91       	pop	r20
     c8e:	3f 91       	pop	r19
     c90:	2f 91       	pop	r18
     c92:	0f 90       	pop	r0
     c94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <_ZN5Clock4tickEv>:


//
// set the tic event count
//
void Clock::tick(void) {
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <_ZN5Clock4tickEv+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <_ZN5Clock4tickEv+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
  sysclock++;;
     caa:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
     cae:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__data_end+0x1>
     cb2:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <__data_end+0x2>
     cb6:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <__data_end+0x3>
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	a1 1d       	adc	r26, r1
     cbe:	b1 1d       	adc	r27, r1
     cc0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <__data_end>
     cc4:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <__data_end+0x1>
     cc8:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <__data_end+0x2>
     ccc:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <__data_end+0x3>
  if (delayTime) {
     cd0:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE>
     cd4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <_ZN5Clock9delayTimeE+0x1>
     cd8:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <_ZN5Clock9delayTimeE+0x2>
     cdc:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <_ZN5Clock9delayTimeE+0x3>
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	a1 05       	cpc	r26, r1
     ce6:	b1 05       	cpc	r27, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <_ZN5Clock4tickEv+0x4e>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	22 23       	and	r18, r18
     cee:	99 f0       	breq	.+38     	; 0xd16 <_ZN5Clock4tickEv+0x78>
    delayTime--;
     cf0:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE>
     cf4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <_ZN5Clock9delayTimeE+0x1>
     cf8:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <_ZN5Clock9delayTimeE+0x2>
     cfc:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <_ZN5Clock9delayTimeE+0x3>
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	a1 09       	sbc	r26, r1
     d04:	b1 09       	sbc	r27, r1
     d06:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_ZN5Clock9delayTimeE>
     d0a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <_ZN5Clock9delayTimeE+0x1>
     d0e:	a0 93 22 03 	sts	0x0322, r26	; 0x800322 <_ZN5Clock9delayTimeE+0x2>
     d12:	b0 93 23 03 	sts	0x0323, r27	; 0x800323 <_ZN5Clock9delayTimeE+0x3>
  }

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     d16:	1a 82       	std	Y+2, r1	; 0x02
     d18:	19 82       	std	Y+1, r1	; 0x01
     d1a:	2a c0       	rjmp	.+84     	; 0xd70 <_ZN5Clock4tickEv+0xd2>
		if (periodicTasks[i]) {
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	8b 5d       	subi	r24, 0xDB	; 219
     d26:	9c 4f       	sbci	r25, 0xFC	; 252
     d28:	fc 01       	movw	r30, r24
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	d1 f0       	breq	.+52     	; 0xd66 <_ZN5Clock4tickEv+0xc8>
				periodicTasks[i]->callback();
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	8b 5d       	subi	r24, 0xDB	; 219
     d3c:	9c 4f       	sbci	r25, 0xFC	; 252
     d3e:	fc 01       	movw	r30, r24
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 81       	ld	r18, Z
     d4e:	31 81       	ldd	r19, Z+1	; 0x01
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	8b 5d       	subi	r24, 0xDB	; 219
     d5a:	9c 4f       	sbci	r25, 0xFC	; 252
     d5c:	fc 01       	movw	r30, r24
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	f9 01       	movw	r30, r18
     d64:	09 95       	icall
  sysclock++;;
  if (delayTime) {
    delayTime--;
  }

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	80 31       	cpi	r24, 0x10	; 16
     d76:	91 05       	cpc	r25, r1
     d78:	8c f2       	brlt	.-94     	; 0xd1c <_ZN5Clock4tickEv+0x7e>
		if (periodicTasks[i]) {
				periodicTasks[i]->callback();
		}
	}

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     d7a:	1c 82       	std	Y+4, r1	; 0x04
     d7c:	1b 82       	std	Y+3, r1	; 0x03
     d7e:	33 c0       	rjmp	.+102    	; 0xde6 <_ZN5Clock4tickEv+0x148>
		if (singleTasks[i]) {
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	8b 5b       	subi	r24, 0xBB	; 187
     d8a:	9c 4f       	sbci	r25, 0xFC	; 252
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	19 f1       	breq	.+70     	; 0xddc <_ZN5Clock4tickEv+0x13e>
			singleTasks[i]->callback();
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	8b 5b       	subi	r24, 0xBB	; 187
     da0:	9c 4f       	sbci	r25, 0xFC	; 252
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	fc 01       	movw	r30, r24
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	8b 5b       	subi	r24, 0xBB	; 187
     dbe:	9c 4f       	sbci	r25, 0xFC	; 252
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	f9 01       	movw	r30, r18
     dc8:	09 95       	icall
			singleTasks[i] = NULL;
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	8b 5b       	subi	r24, 0xBB	; 187
     dd4:	9c 4f       	sbci	r25, 0xFC	; 252
     dd6:	fc 01       	movw	r30, r24
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	10 82       	st	Z, r1
		if (periodicTasks[i]) {
				periodicTasks[i]->callback();
		}
	}

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	91 05       	cpc	r25, r1
     dee:	44 f2       	brlt	.-112    	; 0xd80 <_ZN5Clock4tickEv+0xe2>
			singleTasks[i]->callback();
			singleTasks[i] = NULL;
		}
	}

}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_ZN5Clock5delayEm>:


// delay time in 
void Clock::delay(uint32_t dly) {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <_ZN5Clock5delayEm+0x6>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <_ZN5Clock5delayEm+0x8>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	69 83       	std	Y+1, r22	; 0x01
     e0c:	7a 83       	std	Y+2, r23	; 0x02
     e0e:	8b 83       	std	Y+3, r24	; 0x03
     e10:	9c 83       	std	Y+4, r25	; 0x04
  Clock::delayTime = dly;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	ab 81       	ldd	r26, Y+3	; 0x03
     e18:	bc 81       	ldd	r27, Y+4	; 0x04
     e1a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_ZN5Clock9delayTimeE>
     e1e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <_ZN5Clock9delayTimeE+0x1>
     e22:	a0 93 22 03 	sts	0x0322, r26	; 0x800322 <_ZN5Clock9delayTimeE+0x2>
     e26:	b0 93 23 03 	sts	0x0323, r27	; 0x800323 <_ZN5Clock9delayTimeE+0x3>
  while (Clock::delayTime);
     e2a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <_ZN5Clock9delayTimeE>
     e2e:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <_ZN5Clock9delayTimeE+0x1>
     e32:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <_ZN5Clock9delayTimeE+0x2>
     e36:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <_ZN5Clock9delayTimeE+0x3>
     e3a:	21 e0       	ldi	r18, 0x01	; 1
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	a1 05       	cpc	r26, r1
     e40:	b1 05       	cpc	r27, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <_ZN5Clock5delayEm+0x48>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	22 23       	and	r18, r18
     e48:	81 f7       	brne	.-32     	; 0xe2a <_ZN5Clock5delayEm+0x2c>
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <_ZN5Clock8getTicksEv>:

//
// return number of ticks that occurred
//
uint32_t Clock::getTicks(void) {
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
  return Clock::sysclock;
     e60:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
     e64:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__data_end+0x1>
     e68:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <__data_end+0x2>
     e6c:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <__data_end+0x3>
}
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <_ZN5Clock16registerPeriodicEP8Callback>:



bool Clock::registerPeriodic(Callback *cb) {
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <_ZN5Clock16registerPeriodicEP8Callback+0x6>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <_ZN5Clock16registerPeriodicEP8Callback+0x8>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     e8a:	1a 82       	std	Y+2, r1	; 0x02
     e8c:	19 82       	std	Y+1, r1	; 0x01
     e8e:	1d c0       	rjmp	.+58     	; 0xeca <_ZN5Clock16registerPeriodicEP8Callback+0x50>
		if (!periodicTasks[i]) {
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	8b 5d       	subi	r24, 0xDB	; 219
     e9a:	9c 4f       	sbci	r25, 0xFC	; 252
     e9c:	fc 01       	movw	r30, r24
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f4       	brne	.+26     	; 0xec0 <_ZN5Clock16registerPeriodicEP8Callback+0x46>
			periodicTasks[i] = cb;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	8b 5d       	subi	r24, 0xDB	; 219
     eb0:	9c 4f       	sbci	r25, 0xFC	; 252
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 83       	std	Z+1, r19	; 0x01
     eba:	20 83       	st	Z, r18
			return true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <_ZN5Clock16registerPeriodicEP8Callback+0x5c>



bool Clock::registerPeriodic(Callback *cb) {

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	80 31       	cpi	r24, 0x10	; 16
     ed0:	91 05       	cpc	r25, r1
     ed2:	f4 f2       	brlt	.-68     	; 0xe90 <_ZN5Clock16registerPeriodicEP8Callback+0x16>
		if (!periodicTasks[i]) {
			periodicTasks[i] = cb;
			return true;
		}
	}
	return false;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <_ZN5ClockC1Ev>:


//
// constructor
//
Clock::Clock(void) {
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	00 d0       	rcall	.+0      	; 0xeea <_ZN5ClockC1Ev+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <_ZN5ClockC1Ev+0x8>
     eec:	00 d0       	rcall	.+0      	; 0xeee <_ZN5ClockC1Ev+0xa>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	8d 83       	std	Y+5, r24	; 0x05
  cli();
     ef6:	f8 94       	cli
  TCCR1A  = 0;                          // wgm10 = 0, no outputs
     ef8:	80 e8       	ldi	r24, 0x80	; 128
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	fc 01       	movw	r30, r24
     efe:	10 82       	st	Z, r1
  TCCR1B = (1 << CS11) | (1 << WGM12);   // clock divide by 8, WGM30 = 4, CTC mode
     f00:	81 e8       	ldi	r24, 0x81	; 129
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	2a e0       	ldi	r18, 0x0A	; 10
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
  TCCR1C = 0;
     f0a:	82 e8       	ldi	r24, 0x82	; 130
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	fc 01       	movw	r30, r24
     f10:	10 82       	st	Z, r1
  TCNT1H = 0;
     f12:	85 e8       	ldi	r24, 0x85	; 133
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fc 01       	movw	r30, r24
     f18:	10 82       	st	Z, r1
  TCNT1L = 0;
     f1a:	84 e8       	ldi	r24, 0x84	; 132
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	10 82       	st	Z, r1
  OCR1A =  OCR1A_DIVISOR;               // divide by 20000, 10 msec, do this last!!
     f22:	88 e8       	ldi	r24, 0x88	; 136
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	20 e2       	ldi	r18, 0x20	; 32
     f28:	3e e4       	ldi	r19, 0x4E	; 78
     f2a:	fc 01       	movw	r30, r24
     f2c:	31 83       	std	Z+1, r19	; 0x01
     f2e:	20 83       	st	Z, r18
  TIMSK1 = (1 << OCIE1A);               // enable compare register 1 int
     f30:	8f e6       	ldi	r24, 0x6F	; 111
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	22 e0       	ldi	r18, 0x02	; 2
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
  sysclock = 0;
     f3a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <__data_end>
     f3e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <__data_end+0x1>
     f42:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <__data_end+0x2>
     f46:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <__data_end+0x3>
  count = 0;
     f4a:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN5Clock5countE>

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     f4e:	1a 82       	std	Y+2, r1	; 0x02
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <_ZN5ClockC1Ev+0x8c>
		periodicTasks[i] = NULL;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	8b 5d       	subi	r24, 0xDB	; 219
     f5e:	9c 4f       	sbci	r25, 0xFC	; 252
     f60:	fc 01       	movw	r30, r24
     f62:	11 82       	std	Z+1, r1	; 0x01
     f64:	10 82       	st	Z, r1
  OCR1A =  OCR1A_DIVISOR;               // divide by 20000, 10 msec, do this last!!
  TIMSK1 = (1 << OCIE1A);               // enable compare register 1 int
  sysclock = 0;
  count = 0;

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	80 31       	cpi	r24, 0x10	; 16
     f76:	91 05       	cpc	r25, r1
     f78:	6c f3       	brlt	.-38     	; 0xf54 <_ZN5ClockC1Ev+0x70>
		periodicTasks[i] = NULL;
	}

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     f7a:	1c 82       	std	Y+4, r1	; 0x04
     f7c:	1b 82       	std	Y+3, r1	; 0x03
     f7e:	0e c0       	rjmp	.+28     	; 0xf9c <_ZN5ClockC1Ev+0xb8>
		singleTasks[i] = NULL;
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	8b 5b       	subi	r24, 0xBB	; 187
     f8a:	9c 4f       	sbci	r25, 0xFC	; 252
     f8c:	fc 01       	movw	r30, r24
     f8e:	11 82       	std	Z+1, r1	; 0x01
     f90:	10 82       	st	Z, r1

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
		periodicTasks[i] = NULL;
	}

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	80 31       	cpi	r24, 0x10	; 16
     fa2:	91 05       	cpc	r25, r1
     fa4:	6c f3       	brlt	.-38     	; 0xf80 <_ZN5ClockC1Ev+0x9c>
		singleTasks[i] = NULL;
	}

  sei();
     fa6:	78 94       	sei
}
     fa8:	26 96       	adiw	r28, 0x06	; 6
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <_Z7usecDlyi>:

Clock::~Clock(void) {
}


void usecDly(int x) {
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <_Z7usecDlyi+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
	while (x--);
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	9c 01       	movw	r18, r24
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	31 09       	sbc	r19, r1
     fd2:	3a 83       	std	Y+2, r19	; 0x02
     fd4:	29 83       	std	Y+1, r18	; 0x01
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	09 f4       	brne	.+2      	; 0xfde <_Z7usecDlyi+0x24>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	22 23       	and	r18, r18
     fe0:	99 f7       	brne	.-26     	; 0xfc8 <_Z7usecDlyi+0xe>
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <DdsInit>:
//




void DdsInit(void) {
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	1f 92       	push	r1
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62

volatile uint8_t reg;

	reg = DDRB;
     ff6:	84 e2       	ldi	r24, 0x24	; 36
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	89 83       	std	Y+1, r24	; 0x01
	reg |= DDS_OUT_BITS;		// set Led pin to output
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	87 60       	ori	r24, 0x07	; 7
    1004:	89 83       	std	Y+1, r24	; 0x01
	DDRB = reg;
    1006:	84 e2       	ldi	r24, 0x24	; 36
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	29 81       	ldd	r18, Y+1	; 0x01
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18

	reg = PORTB;
    1010:	85 e2       	ldi	r24, 0x25	; 37
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	fc 01       	movw	r30, r24
    1016:	80 81       	ld	r24, Z
    1018:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~DDS_OUT_BITS;		
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 7f       	andi	r24, 0xF8	; 248
    101e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    1020:	85 e2       	ldi	r24, 0x25	; 37
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	29 81       	ldd	r18, Y+1	; 0x01
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
	
	reg |= FQUD_CLK;     // make sure we are in serial mode
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    1030:	85 e2       	ldi	r24, 0x25	; 37
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
	
	reg &= ~FQUD_CLK;    
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	8d 7f       	andi	r24, 0xFD	; 253
    103e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    1040:	85 e2       	ldi	r24, 0x25	; 37
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	fc 01       	movw	r30, r24
    1048:	20 83       	st	Z, r18
	
}
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <dds>:
// increment of 0x0E56043B.
// 



void dds(float fout) {
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2f 97       	sbiw	r28, 0x0f	; 15
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	6c 87       	std	Y+12, r22	; 0x0c
    1068:	7d 87       	std	Y+13, r23	; 0x0d
    106a:	8e 87       	std	Y+14, r24	; 0x0e
    106c:	9f 87       	std	Y+15, r25	; 0x0f

float n;
uint32_t phaseInc = 0x0E560418;			// 7.000000 mhz
    106e:	88 e1       	ldi	r24, 0x18	; 24
    1070:	94 e0       	ldi	r25, 0x04	; 4
    1072:	a6 e5       	ldi	r26, 0x56	; 86
    1074:	be e0       	ldi	r27, 0x0E	; 14
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	ab 83       	std	Y+3, r26	; 0x03
    107c:	bc 83       	std	Y+4, r27	; 0x04
int i;
uint8_t temp;

	cli();
    107e:	f8 94       	cli
//
// the ports need to be protected with a semaphore if we
// are going to make this code multi-tasking
//
	temp = PORTB;
    1080:	85 e2       	ldi	r24, 0x25	; 37
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	8f 83       	std	Y+7, r24	; 0x07
	temp &= ~DDS_OUT_BITS;
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	88 7f       	andi	r24, 0xF8	; 248
    108e:	8f 83       	std	Y+7, r24	; 0x07
	PORTB = temp;
    1090:	85 e2       	ldi	r24, 0x25	; 37
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	2f 81       	ldd	r18, Y+7	; 0x07
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
    109a:	2f e5       	ldi	r18, 0x5F	; 95
    109c:	30 e7       	ldi	r19, 0x70	; 112
    109e:	49 e0       	ldi	r20, 0x09	; 9
    10a0:	52 e4       	ldi	r21, 0x42	; 66
    10a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    10a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    10a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    10a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    10aa:	0e 94 99 24 	call	0x4932	; 0x4932 <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	88 87       	std	Y+8, r24	; 0x08
    10b4:	99 87       	std	Y+9, r25	; 0x09
    10b6:	aa 87       	std	Y+10, r26	; 0x0a
    10b8:	bb 87       	std	Y+11, r27	; 0x0b
	phaseInc = (uint32_t)n;
    10ba:	68 85       	ldd	r22, Y+8	; 0x08
    10bc:	79 85       	ldd	r23, Y+9	; 0x09
    10be:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c2:	0e 94 07 24 	call	0x480e	; 0x480e <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	ab 83       	std	Y+3, r26	; 0x03
    10d0:	bc 83       	std	Y+4, r27	; 0x04

	for (i=0;i<32;i++) {
    10d2:	1e 82       	std	Y+6, r1	; 0x06
    10d4:	1d 82       	std	Y+5, r1	; 0x05
    10d6:	39 c0       	rjmp	.+114    	; 0x114a <dds+0xf8>

		if (phaseInc & 0x01) {
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	ab 81       	ldd	r26, Y+3	; 0x03
    10de:	bc 81       	ldd	r27, Y+4	; 0x04
    10e0:	81 70       	andi	r24, 0x01	; 1
    10e2:	99 27       	eor	r25, r25
    10e4:	aa 27       	eor	r26, r26
    10e6:	bb 27       	eor	r27, r27
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	a1 05       	cpc	r26, r1
    10ec:	b1 05       	cpc	r27, r1
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <dds+0xa6>
			temp |= SD;
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	84 60       	ori	r24, 0x04	; 4
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <dds+0xac>
    } else {
			temp &= ~SD;
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	8f 83       	std	Y+7, r24	; 0x07
		}            
		PORTB = temp;								// data bit
    10fe:	85 e2       	ldi	r24, 0x25	; 37
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2f 81       	ldd	r18, Y+7	; 0x07
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18

		temp |= W_CLK;					// set clk
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	8f 83       	std	Y+7, r24	; 0x07
		PORTB = temp;
    110e:	85 e2       	ldi	r24, 0x25	; 37
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2f 81       	ldd	r18, Y+7	; 0x07
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
		temp &= ~W_CLK;					// clear clk
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	8f 83       	std	Y+7, r24	; 0x07
		PORTB = temp;	
    111e:	85 e2       	ldi	r24, 0x25	; 37
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	fc 01       	movw	r30, r24
    1126:	20 83       	st	Z, r18

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	ab 81       	ldd	r26, Y+3	; 0x03
    112e:	bc 81       	ldd	r27, Y+4	; 0x04
    1130:	b6 95       	lsr	r27
    1132:	a7 95       	ror	r26
    1134:	97 95       	ror	r25
    1136:	87 95       	ror	r24
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	ab 83       	std	Y+3, r26	; 0x03
    113e:	bc 83       	std	Y+4, r27	; 0x04
	PORTB = temp;

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	80 32       	cpi	r24, 0x20	; 32
    1150:	91 05       	cpc	r25, r1
    1152:	14 f2       	brlt	.-124    	; 0x10d8 <dds+0x86>
		PORTB = temp;	

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	8b 7f       	andi	r24, 0xFB	; 251
    1158:	8f 83       	std	Y+7, r24	; 0x07
	PORTB = temp;								// data bit
    115a:	85 e2       	ldi	r24, 0x25	; 37
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	2f 81       	ldd	r18, Y+7	; 0x07
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
	for (i=0;i<8;i++) {
    1164:	1e 82       	std	Y+6, r1	; 0x06
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	15 c0       	rjmp	.+42     	; 0x1194 <dds+0x142>
		temp |= W_CLK;					// set clk
    116a:	8f 81       	ldd	r24, Y+7	; 0x07
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8f 83       	std	Y+7, r24	; 0x07
		PORTB = temp;
    1170:	85 e2       	ldi	r24, 0x25	; 37
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	2f 81       	ldd	r18, Y+7	; 0x07
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
		temp &= ~W_CLK;					// clear clk
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	8e 7f       	andi	r24, 0xFE	; 254
    117e:	8f 83       	std	Y+7, r24	; 0x07
		PORTB = temp;
    1180:	85 e2       	ldi	r24, 0x25	; 37
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	2f 81       	ldd	r18, Y+7	; 0x07
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
	PORTB = temp;								// data bit
	for (i=0;i<8;i++) {
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	91 05       	cpc	r25, r1
    119c:	34 f3       	brlt	.-52     	; 0x116a <dds+0x118>
		temp &= ~W_CLK;					// clear clk
		PORTB = temp;

	}

	temp |= FQUD_CLK;            // Load the phase accumulator
    119e:	8f 81       	ldd	r24, Y+7	; 0x07
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	8f 83       	std	Y+7, r24	; 0x07
	PORTB = temp;
    11a4:	85 e2       	ldi	r24, 0x25	; 37
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2f 81       	ldd	r18, Y+7	; 0x07
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18

	temp &= ~FQUD_CLK;            // transfer shift reg to phase accumulator
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	8f 83       	std	Y+7, r24	; 0x07
	PORTB = temp;
    11b4:	85 e2       	ldi	r24, 0x25	; 37
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18

	sei();
    11be:	78 94       	sei
}
    11c0:	2f 96       	adiw	r28, 0x0f	; 15
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Graphics::draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
    11d2:	af 92       	push	r10
    11d4:	bf 92       	push	r11
    11d6:	cf 92       	push	r12
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	c1 55       	subi	r28, 0x51	; 81
    11e8:	d1 09       	sbc	r29, r1
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	fe 01       	movw	r30, r28
    11f6:	e9 5b       	subi	r30, 0xB9	; 185
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
    11fe:	ce 01       	movw	r24, r28
    1200:	87 5b       	subi	r24, 0xB7	; 183
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	fc 01       	movw	r30, r24
    1206:	60 83       	st	Z, r22
    1208:	ce 01       	movw	r24, r28
    120a:	86 5b       	subi	r24, 0xB6	; 182
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	fc 01       	movw	r30, r24
    1210:	40 83       	st	Z, r20
    1212:	ce 01       	movw	r24, r28
    1214:	85 5b       	subi	r24, 0xB5	; 181
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
    121c:	ce 01       	movw	r24, r28
    121e:	84 5b       	subi	r24, 0xB4	; 180
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	fc 01       	movw	r30, r24
    1224:	e0 82       	st	Z, r14
    1226:	f1 82       	std	Z+1, r15	; 0x01
    1228:	02 83       	std	Z+2, r16	; 0x02
    122a:	ce 01       	movw	r24, r28
    122c:	81 5b       	subi	r24, 0xB1	; 177
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	fc 01       	movw	r30, r24
    1232:	a0 82       	st	Z, r10
    1234:	b1 82       	std	Z+1, r11	; 0x01
    1236:	c2 82       	std	Z+2, r12	; 0x02
uint8_t xe; 
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 2 * 3];
uint8_t bufIndx;

  ys = line;
    1238:	ce 01       	movw	r24, r28
    123a:	86 5b       	subi	r24, 0xB6	; 182
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	fc 01       	movw	r30, r24
    1240:	80 81       	ld	r24, Z
    1242:	8f 83       	std	Y+7, r24	; 0x07
  xs = col;
    1244:	ce 01       	movw	r24, r28
    1246:	85 5b       	subi	r24, 0xB5	; 181
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	fc 01       	movw	r30, r24
    124c:	80 81       	ld	r24, Z
    124e:	88 87       	std	Y+8, r24	; 0x08
  ye = ys + (2*CHAR_HEIGHT) - 1;
    1250:	8f 81       	ldd	r24, Y+7	; 0x07
    1252:	89 5e       	subi	r24, 0xE9	; 233
    1254:	89 87       	std	Y+9, r24	; 0x09
  xe = xs + (2*CHAR_WIDTH) -1; 
    1256:	88 85       	ldd	r24, Y+8	; 0x08
    1258:	81 5f       	subi	r24, 0xF1	; 241
    125a:	8a 87       	std	Y+10, r24	; 0x0a
  cli();
    125c:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
    125e:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (xs & 0xff);
    1260:	88 85       	ldd	r24, Y+8	; 0x08
    1262:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (xe >> 8) & 0xff;
    1264:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (xe & 0xff);
    1266:	8a 85       	ldd	r24, Y+10	; 0x0a
    1268:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_COL_ADDR_SET);
    126a:	8a e2       	ldi	r24, 0x2A	; 42
    126c:	d5 d1       	rcall	.+938    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    126e:	ce 01       	movw	r24, r28
  sendData(buf, 4);
    1270:	47 96       	adiw	r24, 0x17	; 23
    1272:	64 e0       	ldi	r22, 0x04	; 4
    1274:	eb d1       	rcall	.+982    	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1276:	bb d3       	rcall	.+1910   	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1278:	1f 8a       	std	Y+23, r1	; 0x17
  cmpltCmd();
    127a:	8f 81       	ldd	r24, Y+7	; 0x07
    127c:	88 8f       	std	Y+24, r24	; 0x18
  
  buf[0] = (ys >> 8) & 0xff;
    127e:	19 8e       	std	Y+25, r1	; 0x19
  buf[1] = (ys & 0xff);
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	8a 8f       	std	Y+26, r24	; 0x1a
  buf[2] = (ye >> 8) & 0xff;
    1284:	8b e2       	ldi	r24, 0x2B	; 43
  buf[3] = (ye & 0xff);
    1286:	c8 d1       	rcall	.+912    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1288:	ce 01       	movw	r24, r28
  sendCmd(CMD_ROW_ADDR_SET);
    128a:	47 96       	adiw	r24, 0x17	; 23
    128c:	64 e0       	ldi	r22, 0x04	; 4
    128e:	de d1       	rcall	.+956    	; 0x164c <_ZN3Lcd8sendDataEPhh>
  sendData(buf, 4);
    1290:	ae d3       	rcall	.+1884   	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1292:	9e 01       	movw	r18, r28
    1294:	25 5f       	subi	r18, 0xF5	; 245
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	ce 01       	movw	r24, r28
  cmpltCmd();
    129a:	87 5b       	subi	r24, 0xB7	; 183
    129c:	9f 4f       	sbci	r25, 0xFF	; 255

  _getPixels(cc, pixBuf); 
    129e:	b9 01       	movw	r22, r18
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
    12a4:	ff d9       	rcall	.-3074   	; 0x6a4 <_getPixels>
    12a6:	8c e2       	ldi	r24, 0x2C	; 44
    12a8:	b7 d1       	rcall	.+878    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    12aa:	1b 82       	std	Y+3, r1	; 0x03
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	0e c1       	rjmp	.+540    	; 0x14cc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2fa>
    12b0:	19 82       	std	Y+1, r1	; 0x01
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02

  sendCmd(CMD_MEM_WRITE);
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	99 23       	and	r25, r25
    12b8:	0c f4       	brge	.+2      	; 0x12bc <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xea>
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	95 95       	asr	r25
    12be:	87 95       	ror	r24
    bufIndx = 0;
    12c0:	9e 01       	movw	r18, r28
    uint8_t pixels = pixBuf[i/2];
    12c2:	25 5f       	subi	r18, 0xF5	; 245
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
    12ce:	8c 83       	std	Y+4, r24	; 0x04
    12d0:	1e 82       	std	Y+6, r1	; 0x06
    12d2:	1d 82       	std	Y+5, r1	; 0x05
    12d4:	ec c0       	rjmp	.+472    	; 0x14ae <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2dc>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	99 27       	eor	r25, r25
    for (int j=0; j< CHAR_WIDTH; j++) {
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x114>
    12e4:	6d c0       	rjmp	.+218    	; 0x13c0 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x1ee>
      if (pixels & 0x01) {                // font table assumes right to left scan 
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	98 0f       	add	r25, r24
    12ec:	99 83       	std	Y+1, r25	; 0x01
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	9e 01       	movw	r18, r28
    12f4:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.r;
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	f9 01       	movw	r30, r18
    12fa:	40 81       	ld	r20, Z
    12fc:	9e 01       	movw	r18, r28
    12fe:	29 5e       	subi	r18, 0xE9	; 233
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	fc 01       	movw	r30, r24
    1308:	40 83       	st	Z, r20
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	98 0f       	add	r25, r24
    1310:	99 83       	std	Y+1, r25	; 0x01
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9e 01       	movw	r18, r28
    1318:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.g;
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	f9 01       	movw	r30, r18
    131e:	41 81       	ldd	r20, Z+1	; 0x01
    1320:	9e 01       	movw	r18, r28
    1322:	29 5e       	subi	r18, 0xE9	; 233
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	fc 01       	movw	r30, r24
    132c:	40 83       	st	Z, r20
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	98 0f       	add	r25, r24
    1334:	99 83       	std	Y+1, r25	; 0x01
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9e 01       	movw	r18, r28
    133c:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.b;
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	f9 01       	movw	r30, r18
    1342:	42 81       	ldd	r20, Z+2	; 0x02
    1344:	9e 01       	movw	r18, r28
    1346:	29 5e       	subi	r18, 0xE9	; 233
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	fc 01       	movw	r30, r24
    1350:	40 83       	st	Z, r20
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	98 0f       	add	r25, r24
    1358:	99 83       	std	Y+1, r25	; 0x01
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9e 01       	movw	r18, r28
    1360:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.r;
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	40 81       	ld	r20, Z
    1368:	9e 01       	movw	r18, r28
    136a:	29 5e       	subi	r18, 0xE9	; 233
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	fc 01       	movw	r30, r24
    1374:	40 83       	st	Z, r20
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	98 0f       	add	r25, r24
    137c:	99 83       	std	Y+1, r25	; 0x01
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9e 01       	movw	r18, r28
    1384:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.g;
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	f9 01       	movw	r30, r18
    138a:	41 81       	ldd	r20, Z+1	; 0x01
    138c:	9e 01       	movw	r18, r28
    138e:	29 5e       	subi	r18, 0xE9	; 233
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	82 0f       	add	r24, r18
    1394:	93 1f       	adc	r25, r19
    1396:	fc 01       	movw	r30, r24
    1398:	40 83       	st	Z, r20
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	98 0f       	add	r25, r24
    13a0:	99 83       	std	Y+1, r25	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9e 01       	movw	r18, r28
    13a8:	24 5b       	subi	r18, 0xB4	; 180
        buf[bufIndx++] = fc.b;
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	f9 01       	movw	r30, r18
    13ae:	42 81       	ldd	r20, Z+2	; 0x02
    13b0:	9e 01       	movw	r18, r28
    13b2:	29 5e       	subi	r18, 0xE9	; 233
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	fc 01       	movw	r30, r24
    13bc:	40 83       	st	Z, r20
    13be:	6c c0       	rjmp	.+216    	; 0x1498 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2c6>
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	98 0f       	add	r25, r24
    13c6:	99 83       	std	Y+1, r25	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e 01       	movw	r18, r28
    13ce:	21 5b       	subi	r18, 0xB1	; 177

      } else {
        buf[bufIndx++] = bc.r;
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	f9 01       	movw	r30, r18
    13d4:	40 81       	ld	r20, Z
    13d6:	9e 01       	movw	r18, r28
    13d8:	29 5e       	subi	r18, 0xE9	; 233
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	fc 01       	movw	r30, r24
    13e2:	40 83       	st	Z, r20
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	98 0f       	add	r25, r24
    13ea:	99 83       	std	Y+1, r25	; 0x01
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9e 01       	movw	r18, r28
    13f2:	21 5b       	subi	r18, 0xB1	; 177
        buf[bufIndx++] = bc.g;
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	f9 01       	movw	r30, r18
    13f8:	41 81       	ldd	r20, Z+1	; 0x01
    13fa:	9e 01       	movw	r18, r28
    13fc:	29 5e       	subi	r18, 0xE9	; 233
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	82 0f       	add	r24, r18
    1402:	93 1f       	adc	r25, r19
    1404:	fc 01       	movw	r30, r24
    1406:	40 83       	st	Z, r20
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	98 0f       	add	r25, r24
    140e:	99 83       	std	Y+1, r25	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e 01       	movw	r18, r28
    1416:	21 5b       	subi	r18, 0xB1	; 177
        buf[bufIndx++] = bc.b;
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	f9 01       	movw	r30, r18
    141c:	42 81       	ldd	r20, Z+2	; 0x02
    141e:	9e 01       	movw	r18, r28
    1420:	29 5e       	subi	r18, 0xE9	; 233
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	fc 01       	movw	r30, r24
    142a:	40 83       	st	Z, r20
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	98 0f       	add	r25, r24
    1432:	99 83       	std	Y+1, r25	; 0x01
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9e 01       	movw	r18, r28
    143a:	21 5b       	subi	r18, 0xB1	; 177
        buf[bufIndx++] = bc.r;
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	f9 01       	movw	r30, r18
    1440:	40 81       	ld	r20, Z
    1442:	9e 01       	movw	r18, r28
    1444:	29 5e       	subi	r18, 0xE9	; 233
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	40 83       	st	Z, r20
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	98 0f       	add	r25, r24
    1456:	99 83       	std	Y+1, r25	; 0x01
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e 01       	movw	r18, r28
    145e:	21 5b       	subi	r18, 0xB1	; 177
        buf[bufIndx++] = bc.g;
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	f9 01       	movw	r30, r18
    1464:	41 81       	ldd	r20, Z+1	; 0x01
    1466:	9e 01       	movw	r18, r28
    1468:	29 5e       	subi	r18, 0xE9	; 233
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	fc 01       	movw	r30, r24
    1472:	40 83       	st	Z, r20
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	98 0f       	add	r25, r24
    147a:	99 83       	std	Y+1, r25	; 0x01
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9e 01       	movw	r18, r28
    1482:	21 5b       	subi	r18, 0xB1	; 177
        buf[bufIndx++] = bc.b;
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	f9 01       	movw	r30, r18
    1488:	42 81       	ldd	r20, Z+2	; 0x02
    148a:	9e 01       	movw	r18, r28
    148c:	29 5e       	subi	r18, 0xE9	; 233
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	fc 01       	movw	r30, r24
    1496:	40 83       	st	Z, r20
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	95 95       	asr	r25
    14a0:	87 95       	ror	r24
    14a2:	8c 83       	std	Y+4, r24	; 0x04
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
      }
      pixels >>= 1;   
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	88 30       	cpi	r24, 0x08	; 8
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
    for (int j=0; j< CHAR_WIDTH; j++) {
    14b4:	91 05       	cpc	r25, r1
    14b6:	0c f4       	brge	.+2      	; 0x14ba <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2e8>
    14b8:	0e cf       	rjmp	.-484    	; 0x12d6 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x104>
    14ba:	ce 01       	movw	r24, r28
    14bc:	47 96       	adiw	r24, 0x17	; 23
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	c5 d0       	rcall	.+394    	; 0x164c <_ZN3Lcd8sendDataEPhh>
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	9b 83       	std	Y+3, r25	; 0x03
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	88 31       	cpi	r24, 0x18	; 24
    14d2:	91 05       	cpc	r25, r1

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x306>
    14d6:	ec ce       	rjmp	.-552    	; 0x12b0 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xde>
    14d8:	8a d2       	rcall	.+1300   	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    14da:	78 94       	sei
    14dc:	cf 5a       	subi	r28, 0xAF	; 175
    14de:	df 4f       	sbci	r29, 0xFF	; 255
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
  sei();
    14ee:	0f 91       	pop	r16
}
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	08 95       	ret

000014fc <_ZN3LcdC1Ev>:
pixColor Lcd::bgColor;
cursor_t Lcd::cursor;
uint8_t Lcd::lcdInitialized = 0;


Lcd::Lcd(void) {
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	00 d0       	rcall	.+0      	; 0x1502 <_ZN3LcdC1Ev+0x6>
    1502:	1f 92       	push	r1
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9b 83       	std	Y+3, r25	; 0x03
    150a:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t reg;

	if (lcdInitialized) {			// only init the lcd once
    150c:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <_ZN3Lcd14lcdInitializedE>
    1510:	88 23       	and	r24, r24
    1512:	09 f0       	breq	.+2      	; 0x1516 <_ZN3LcdC1Ev+0x1a>
		return;
    1514:	50 c0       	rjmp	.+160    	; 0x15b6 <_ZN3LcdC1Ev+0xba>
	}
	// set the LCD bits in PORTD to outputs
	reg = DDRD;
    1516:	8a e2       	ldi	r24, 0x2A	; 42
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	89 83       	std	Y+1, r24	; 0x01
	reg |= LCD_DDR;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	8c 67       	ori	r24, 0x7C	; 124
    1524:	89 83       	std	Y+1, r24	; 0x01
	DDRD = reg;
    1526:	8a e2       	ldi	r24, 0x2A	; 42
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	29 81       	ldd	r18, Y+1	; 0x01
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18

	// set the LCD bits to default
	reg = PORTD;
    1530:	8b e2       	ldi	r24, 0x2B	; 43
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	fc 01       	movw	r30, r24
    1536:	80 81       	ld	r24, Z
    1538:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~LCD_DDR;		// turn off all lcd bits
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	83 78       	andi	r24, 0x83	; 131
    153e:	89 83       	std	Y+1, r24	; 0x01
	reg |= LCD_DFLT;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	80 66       	ori	r24, 0x60	; 96
    1544:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;
    1546:	8b e2       	ldi	r24, 0x2B	; 43
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	29 81       	ldd	r18, Y+1	; 0x01
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
	fgColor.r = 0xfc;
    1550:	8c ef       	ldi	r24, 0xFC	; 252
    1552:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <_ZN3Lcd7fgColorE>
	fgColor.g = 0xfc;
    1556:	8c ef       	ldi	r24, 0xFC	; 252
    1558:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_ZN3Lcd7fgColorE+0x1>
	fgColor.b = 0xfc;
    155c:	8c ef       	ldi	r24, 0xFC	; 252
    155e:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <_ZN3Lcd7fgColorE+0x2>
	bgColor.r = 0;
    1562:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <_ZN3Lcd7bgColorE>
	bgColor.g = 0;
    1566:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
	bgColor.b = 0;
    156a:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
	cursor.col = 0;
    156e:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1572:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZN3Lcd6cursorE+0x2>
	cursor.line = 0;
    1576:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    157a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZN3Lcd6cursorE>
	reset();
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	1f d0       	rcall	.+62     	; 0x15c2 <_ZN3Lcd5resetEv>
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
	mem_access();
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	03 d1       	rcall	.+518    	; 0x1790 <_ZN3Lcd10mem_accessEv>
    158a:	6c e0       	ldi	r22, 0x0C	; 12
    158c:	70 e0       	ldi	r23, 0x00	; 0
	Clock::delay(12);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	35 dc       	rcall	.-1942   	; 0xdfe <_ZN5Clock5delayEm>
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	9b 81       	ldd	r25, Y+3	; 0x03
    1598:	ea d0       	rcall	.+468    	; 0x176e <_ZN3Lcd9sleep_outEv>
  sleep_out();
    159a:	6c e0       	ldi	r22, 0x0C	; 12
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
  Clock::delay(12);
    15a2:	2d dc       	rcall	.-1958   	; 0xdfe <_ZN5Clock5delayEm>
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	d1 d0       	rcall	.+418    	; 0x174c <_ZN3Lcd2onEv>
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	9b 81       	ldd	r25, Y+3	; 0x03
	on();	
    15ae:	9b d3       	rcall	.+1846   	; 0x1ce6 <_ZN3Lcd7clrScrnEv>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN3Lcd14lcdInitializedE>
 	clrScrn();
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	df 91       	pop	r29
	lcdInitialized = 1;
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <_ZN3Lcd5resetEv>:
}


void Lcd::reset(void) {
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <_ZN3Lcd5resetEv+0x6>
    15c8:	1f 92       	push	r1
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	9b 83       	std	Y+3, r25	; 0x03
    15d0:	8a 83       	std	Y+2, r24	; 0x02

	volatile uint8_t reg;

	reg = PORTD;
    15d2:	8b e2       	ldi	r24, 0x2B	; 43
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~LCD_nRST;		// set reset low
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	8f 7d       	andi	r24, 0xDF	; 223
    15e0:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;
    15e2:	8b e2       	ldi	r24, 0x2B	; 43
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	29 81       	ldd	r18, Y+1	; 0x01
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
	usecDly(RST_LOW);		// reset pulse is 10 usec
    15ec:	80 ea       	ldi	r24, 0xA0	; 160
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	e4 dc       	rcall	.-1592   	; 0xfba <_Z7usecDlyi>
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
	reg |= LCD_nRST;
    15f4:	80 62       	ori	r24, 0x20	; 32
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	8b e2       	ldi	r24, 0x2B	; 43
	PORTD = reg;			// set reset high
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
    1602:	6d e0       	ldi	r22, 0x0D	; 13
	Clock::delay(13);		// wait more than 120 msec
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	f9 db       	rcall	.-2062   	; 0xdfe <_ZN5Clock5delayEm>
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
}
    1610:	0f 90       	pop	r0
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <_ZN3Lcd7sendCmdEh>:


void Lcd::sendCmd(uint8_t cmd) {
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 d0       	rcall	.+0      	; 0x161e <_ZN3Lcd7sendCmdEh+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	8a 83       	std	Y+2, r24	; 0x02

volatile uint8_t reg;

	reg = PORTD;
    1624:	8b e2       	ldi	r24, 0x2B	; 43
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	fc 01       	movw	r30, r24
    162a:	80 81       	ld	r24, Z
    162c:	89 83       	std	Y+1, r24	; 0x01
	reg = reg & ~(LCD_nCS | LCD_A0);
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	8f 7a       	andi	r24, 0xAF	; 175
    1632:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;				// CS, A0 low
    1634:	8b e2       	ldi	r24, 0x2B	; 43
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	29 81       	ldd	r18, Y+1	; 0x01
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
	
	// first send cmd
	sendByte(cmd);
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	3c d0       	rcall	.+120    	; 0x16ba <_ZN3Lcd8sendByteEh>
    1642:	0f 90       	pop	r0
}
    1644:	0f 90       	pop	r0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <_ZN3Lcd8sendDataEPhh>:


void Lcd::sendData(uint8_t *buf, uint8_t cnt) {
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <_ZN3Lcd8sendDataEPhh+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <_ZN3Lcd8sendDataEPhh+0x8>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <_ZN3Lcd8sendDataEPhh+0xa>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9d 83       	std	Y+5, r25	; 0x05
    165c:	8c 83       	std	Y+4, r24	; 0x04
    165e:	6e 83       	std	Y+6, r22	; 0x06

volatile uint8_t reg = PORTD;
    1660:	8b e2       	ldi	r24, 0x2B	; 43
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	8b 83       	std	Y+3, r24	; 0x03
  
  PORTD = reg | LCD_A0;   // A0 hi for data/param
    166a:	8b e2       	ldi	r24, 0x2B	; 43
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	20 61       	ori	r18, 0x10	; 16
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18

  for (int i=0; i< cnt; i++) {
    1676:	1a 82       	std	Y+2, r1	; 0x02
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <_ZN3Lcd8sendDataEPhh+0x4c>
    sendByte(buf[i]);
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	82 0f       	add	r24, r18
    1686:	93 1f       	adc	r25, r19
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	16 d0       	rcall	.+44     	; 0x16ba <_ZN3Lcd8sendByteEh>
    168e:	89 81       	ldd	r24, Y+1	; 0x01

volatile uint8_t reg = PORTD;
  
  PORTD = reg | LCD_A0;   // A0 hi for data/param

  for (int i=0; i< cnt; i++) {
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	82 17       	cp	r24, r18
    16a4:	93 07       	cpc	r25, r19
    16a6:	54 f3       	brlt	.-44     	; 0x167c <_ZN3Lcd8sendDataEPhh+0x30>
    16a8:	26 96       	adiw	r28, 0x06	; 6
    sendByte(buf[i]);
  }
}
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <_ZN3Lcd8sendByteEh>:


//
// assumes CS and A0 are set correctly before entry
//
void Lcd::sendByte(uint8_t b) {
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <_ZN3Lcd8sendByteEh+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <_ZN3Lcd8sendByteEh+0x8>
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	8d 83       	std	Y+5, r24	; 0x05

volatile uint8_t treg = PORTD;
    16ca:	8b e2       	ldi	r24, 0x2B	; 43
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	fc 01       	movw	r30, r24
    16d0:	80 81       	ld	r24, Z
    16d2:	8b 83       	std	Y+3, r24	; 0x03
volatile uint8_t reg = treg;
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	8c 83       	std	Y+4, r24	; 0x04

	for (int i = 0 ; i < 8; i++) {
    16d8:	1a 82       	std	Y+2, r1	; 0x02
    16da:	19 82       	std	Y+1, r1	; 0x01
    16dc:	25 c0       	rjmp	.+74     	; 0x1728 <_ZN3Lcd8sendByteEh+0x6e>
		if ( b & 0x80) {
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	88 23       	and	r24, r24
    16e2:	24 f4       	brge	.+8      	; 0x16ec <_ZN3Lcd8sendByteEh+0x32>
			reg |= LCD_SDA;
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	88 60       	ori	r24, 0x08	; 8
    16e8:	8c 83       	std	Y+4, r24	; 0x04
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <_ZN3Lcd8sendByteEh+0x38>
		} else {
			reg &= ~LCD_SDA;
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	8c 83       	std	Y+4, r24	; 0x04
		}
		PORTD = reg;
    16f2:	8b e2       	ldi	r24, 0x2B	; 43
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	2c 81       	ldd	r18, Y+4	; 0x04
    16f8:	fc 01       	movw	r30, r24
    16fa:	20 83       	st	Z, r18
		PORTD = reg | LCD_SCK;
    16fc:	8b e2       	ldi	r24, 0x2B	; 43
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	24 60       	ori	r18, 0x04	; 4
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
		PORTD = reg;
    1708:	8b e2       	ldi	r24, 0x2B	; 43
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	2c 81       	ldd	r18, Y+4	; 0x04
    170e:	fc 01       	movw	r30, r24
    1710:	20 83       	st	Z, r18
		b = (b << 1) & 0xFF;		   
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	8d 83       	std	Y+5, r24	; 0x05
void Lcd::sendByte(uint8_t b) {

volatile uint8_t treg = PORTD;
volatile uint8_t reg = treg;

	for (int i = 0 ; i < 8; i++) {
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	88 30       	cpi	r24, 0x08	; 8
    172e:	91 05       	cpc	r25, r1
    1730:	b4 f2       	brlt	.-84     	; 0x16de <_ZN3Lcd8sendByteEh+0x24>
		PORTD = reg;
		PORTD = reg | LCD_SCK;
		PORTD = reg;
		b = (b << 1) & 0xFF;		   
	}
	PORTD = treg;			// return PORTD as we received it
    1732:	8b e2       	ldi	r24, 0x2B	; 43
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN3Lcd2onEv>:


void Lcd::on(void) {
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	00 d0       	rcall	.+0      	; 0x1752 <_ZN3Lcd2onEv+0x6>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01

  cli();
    175a:	f8 94       	cli
	sendCmd(CMD_DISPLAY_ON);
    175c:	89 e2       	ldi	r24, 0x29	; 41
    175e:	5c df       	rcall	.-328    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1760:	46 d1       	rcall	.+652    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
  cmpltCmd();
    1762:	78 94       	sei
    1764:	0f 90       	pop	r0
  sei();
    1766:	0f 90       	pop	r0
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <_ZN3Lcd9sleep_outEv>:
  cmpltCmd();
  sei();
}


void Lcd::sleep_out(void) {
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	00 d0       	rcall	.+0      	; 0x1774 <_ZN3Lcd9sleep_outEv+0x6>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01

  cli();
    177c:	f8 94       	cli
  sendCmd(CMD_SLEEP_OUT);
    177e:	81 e1       	ldi	r24, 0x11	; 17
    1780:	4b df       	rcall	.-362    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1782:	35 d1       	rcall	.+618    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
  cmpltCmd();
    1784:	78 94       	sei
    1786:	0f 90       	pop	r0
  sei();
    1788:	0f 90       	pop	r0
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <_ZN3Lcd10mem_accessEv>:

void Lcd::mem_access(void) {
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	00 d0       	rcall	.+0      	; 0x1796 <_ZN3Lcd10mem_accessEv+0x6>
    1796:	1f 92       	push	r1
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	9b 83       	std	Y+3, r25	; 0x03
    179e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t buf = LCD_MEM_CTL;
    17a0:	80 ea       	ldi	r24, 0xA0	; 160
    17a2:	89 83       	std	Y+1, r24	; 0x01
	cli();
    17a4:	f8 94       	cli

	//
	// flip xy if needed
	//
	sendCmd(CMD_MEM_CTRL);
    17a6:	86 e3       	ldi	r24, 0x36	; 54
    17a8:	37 df       	rcall	.-402    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    17aa:	61 e0       	ldi	r22, 0x01	; 1
	sendData(&buf, 1);
    17ac:	ce 01       	movw	r24, r28
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	4d df       	rcall	.-358    	; 0x164c <_ZN3Lcd8sendDataEPhh>
    17b2:	1d d1       	rcall	.+570    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    17b4:	8a e3       	ldi	r24, 0x3A	; 58
	cmpltCmd();
    17b6:	30 df       	rcall	.-416    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    17b8:	86 e0       	ldi	r24, 0x06	; 6

	//
	// set pixel format to 18 bits per pixel
	//
	sendCmd(CMD_PIX_FORMAT);
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	ce 01       	movw	r24, r28
	buf = FLAG_IFPF_18;
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	44 df       	rcall	.-376    	; 0x164c <_ZN3Lcd8sendDataEPhh>
	sendData(&buf, 1);
    17c4:	14 d1       	rcall	.+552    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    17c6:	78 94       	sei
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
	cmpltCmd();
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
	sei();
    17d2:	08 95       	ret

000017d4 <_ZN3Lcd11lcd_putcharEc>:
	bgColor.g = g;
	bgColor.b = b;
}


void Lcd::lcd_putchar(char c) {
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	af 97       	sbiw	r28, 0x2f	; 47
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8f a7       	std	Y+47, r24	; 0x2f

uint8_t ys = cursor.line * CHAR_HEIGHT;
    17ea:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    17ee:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    17f2:	98 2f       	mov	r25, r24
    17f4:	89 2f       	mov	r24, r25
    17f6:	88 0f       	add	r24, r24
    17f8:	89 0f       	add	r24, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	88 0f       	add	r24, r24
    17fe:	8f 83       	std	Y+7, r24	; 0x07
uint8_t ye = ys + CHAR_HEIGHT - 1;
    1800:	8f 81       	ldd	r24, Y+7	; 0x07
    1802:	85 5f       	subi	r24, 0xF5	; 245
    1804:	88 87       	std	Y+8, r24	; 0x08
uint8_t xs = cursor.col * CHAR_WIDTH;
    1806:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    180a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    180e:	88 0f       	add	r24, r24
    1810:	88 0f       	add	r24, r24
    1812:	88 0f       	add	r24, r24
    1814:	89 87       	std	Y+9, r24	; 0x09
uint8_t xe = xs + CHAR_WIDTH -1;
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	89 5f       	subi	r24, 0xF9	; 249
    181a:	8a 87       	std	Y+10, r24	; 0x0a
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 3];
uint8_t bufIndx;
  
  cli();
    181c:	f8 94       	cli
	buf[0] = (xs >> 8) & 0xff;
    181e:	1f 8a       	std	Y+23, r1	; 0x17
	buf[1] = (xs & 0xff);
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	88 8f       	std	Y+24, r24	; 0x18
	buf[2] = (xe >> 8) & 0xff;
    1824:	19 8e       	std	Y+25, r1	; 0x19
	buf[3] = (xe & 0xff);
    1826:	8a 85       	ldd	r24, Y+10	; 0x0a
    1828:	8a 8f       	std	Y+26, r24	; 0x1a
	sendCmd(CMD_COL_ADDR_SET);
    182a:	8a e2       	ldi	r24, 0x2A	; 42
    182c:	f5 de       	rcall	.-534    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    182e:	ce 01       	movw	r24, r28
	sendData(buf, 4);
    1830:	47 96       	adiw	r24, 0x17	; 23
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	0b df       	rcall	.-490    	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1836:	db d0       	rcall	.+438    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1838:	1f 8a       	std	Y+23, r1	; 0x17
  cmpltCmd();
    183a:	8f 81       	ldd	r24, Y+7	; 0x07
    183c:	88 8f       	std	Y+24, r24	; 0x18
  
	buf[0] = (ys >> 8) & 0xff;
    183e:	19 8e       	std	Y+25, r1	; 0x19
	buf[1] = (ys & 0xff);
    1840:	88 85       	ldd	r24, Y+8	; 0x08
    1842:	8a 8f       	std	Y+26, r24	; 0x1a
	buf[2] = (ye >> 8) & 0xff;
    1844:	8b e2       	ldi	r24, 0x2B	; 43
	buf[3] = (ye & 0xff);
    1846:	e8 de       	rcall	.-560    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1848:	ce 01       	movw	r24, r28
	sendCmd(CMD_ROW_ADDR_SET);
    184a:	47 96       	adiw	r24, 0x17	; 23
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	fe de       	rcall	.-516    	; 0x164c <_ZN3Lcd8sendDataEPhh>
	sendData(buf, 4);
    1850:	ce d0       	rcall	.+412    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1852:	ce 01       	movw	r24, r28
    1854:	0b 96       	adiw	r24, 0x0b	; 11
    1856:	bc 01       	movw	r22, r24
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
  cmpltCmd();
    185a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_getPixels>

	_getPixels(c, pixBuf); 
    185e:	8c e2       	ldi	r24, 0x2C	; 44
    1860:	db de       	rcall	.-586    	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1862:	1b 82       	std	Y+3, r1	; 0x03
    1864:	1a 82       	std	Y+2, r1	; 0x02
    1866:	8a c0       	rjmp	.+276    	; 0x197c <_ZN3Lcd11lcd_putcharEc+0x1a8>
    1868:	19 82       	std	Y+1, r1	; 0x01

  sendCmd(CMD_MEM_WRITE);
    186a:	9e 01       	movw	r18, r28
    186c:	25 5f       	subi	r18, 0xF5	; 245
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	82 0f       	add	r24, r18
    bufIndx = 0;
    1876:	93 1f       	adc	r25, r19
		uint8_t pixels = pixBuf[i];
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	8c 83       	std	Y+4, r24	; 0x04
    187e:	1e 82       	std	Y+6, r1	; 0x06
    1880:	1d 82       	std	Y+5, r1	; 0x05
    1882:	6d c0       	rjmp	.+218    	; 0x195e <_ZN3Lcd11lcd_putcharEc+0x18a>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	81 70       	andi	r24, 0x01	; 1
		for (int j=0; j< CHAR_WIDTH; j++) {
    188c:	99 27       	eor	r25, r25
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	71 f1       	breq	.+92     	; 0x18ee <_ZN3Lcd11lcd_putcharEc+0x11a>
			if (pixels & 0x01) {								// font table assumes right to left scan 
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	98 0f       	add	r25, r24
    1898:	99 83       	std	Y+1, r25	; 0x01
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	40 91 4d 03 	lds	r20, 0x034D	; 0x80034d <_ZN3Lcd7fgColorE>
				buf[bufIndx++] = fgColor.r;
    18a2:	9e 01       	movw	r18, r28
    18a4:	29 5e       	subi	r18, 0xE9	; 233
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	82 0f       	add	r24, r18
    18aa:	93 1f       	adc	r25, r19
    18ac:	fc 01       	movw	r30, r24
    18ae:	40 83       	st	Z, r20
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	98 0f       	add	r25, r24
    18b6:	99 83       	std	Y+1, r25	; 0x01
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	40 91 4e 03 	lds	r20, 0x034E	; 0x80034e <_ZN3Lcd7fgColorE+0x1>
				buf[bufIndx++] = fgColor.g;
    18c0:	9e 01       	movw	r18, r28
    18c2:	29 5e       	subi	r18, 0xE9	; 233
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	fc 01       	movw	r30, r24
    18cc:	40 83       	st	Z, r20
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	98 0f       	add	r25, r24
    18d4:	99 83       	std	Y+1, r25	; 0x01
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	40 91 4f 03 	lds	r20, 0x034F	; 0x80034f <_ZN3Lcd7fgColorE+0x2>
				buf[bufIndx++] = fgColor.b;
    18de:	9e 01       	movw	r18, r28
    18e0:	29 5e       	subi	r18, 0xE9	; 233
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	82 0f       	add	r24, r18
    18e6:	93 1f       	adc	r25, r19
    18e8:	fc 01       	movw	r30, r24
    18ea:	40 83       	st	Z, r20
    18ec:	2d c0       	rjmp	.+90     	; 0x1948 <_ZN3Lcd11lcd_putcharEc+0x174>
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	98 0f       	add	r25, r24
    18f4:	99 83       	std	Y+1, r25	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <_ZN3Lcd7bgColorE>
			} else {
				buf[bufIndx++] = bgColor.r;
    18fe:	9e 01       	movw	r18, r28
    1900:	29 5e       	subi	r18, 0xE9	; 233
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	82 0f       	add	r24, r18
    1906:	93 1f       	adc	r25, r19
    1908:	fc 01       	movw	r30, r24
    190a:	40 83       	st	Z, r20
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	98 0f       	add	r25, r24
    1912:	99 83       	std	Y+1, r25	; 0x01
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	40 91 51 03 	lds	r20, 0x0351	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
				buf[bufIndx++] = bgColor.g;
    191c:	9e 01       	movw	r18, r28
    191e:	29 5e       	subi	r18, 0xE9	; 233
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	fc 01       	movw	r30, r24
    1928:	40 83       	st	Z, r20
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	98 0f       	add	r25, r24
    1930:	99 83       	std	Y+1, r25	; 0x01
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
				buf[bufIndx++] = bgColor.b;
    193a:	9e 01       	movw	r18, r28
    193c:	29 5e       	subi	r18, 0xE9	; 233
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	82 0f       	add	r24, r18
    1942:	93 1f       	adc	r25, r19
    1944:	fc 01       	movw	r30, r24
    1946:	40 83       	st	Z, r20
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	95 95       	asr	r25
    1950:	87 95       	ror	r24
    1952:	8c 83       	std	Y+4, r24	; 0x04
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			pixels >>= 1;		
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
  sendCmd(CMD_MEM_WRITE);
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    bufIndx = 0;
		uint8_t pixels = pixBuf[i];
		for (int j=0; j< CHAR_WIDTH; j++) {
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	91 05       	cpc	r25, r1
    1966:	0c f4       	brge	.+2      	; 0x196a <_ZN3Lcd11lcd_putcharEc+0x196>
    1968:	8d cf       	rjmp	.-230    	; 0x1884 <_ZN3Lcd11lcd_putcharEc+0xb0>
    196a:	ce 01       	movw	r24, r28
    196c:	47 96       	adiw	r24, 0x17	; 23
    196e:	69 81       	ldd	r22, Y+1	; 0x01
    1970:	6d de       	rcall	.-806    	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	01 96       	adiw	r24, 0x01	; 1
				buf[bufIndx++] = bgColor.g;
				buf[bufIndx++] = bgColor.b;
			}
			pixels >>= 1;		
		}
    sendData(buf,bufIndx);
    1978:	9b 83       	std	Y+3, r25	; 0x03
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	9b 81       	ldd	r25, Y+3	; 0x03
    1980:	8c 30       	cpi	r24, 0x0C	; 12

	_getPixels(c, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    1982:	91 05       	cpc	r25, r1
    1984:	0c f4       	brge	.+2      	; 0x1988 <_ZN3Lcd11lcd_putcharEc+0x1b4>
    1986:	70 cf       	rjmp	.-288    	; 0x1868 <_ZN3Lcd11lcd_putcharEc+0x94>
    1988:	32 d0       	rcall	.+100    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    198a:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    198e:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <_ZN3Lcd6cursorE+0x3>
			}
			pixels >>= 1;		
		}
    sendData(buf,bufIndx);
	}
  cmpltCmd();
    1998:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZN3Lcd6cursorE+0x2>
  cursor.col++;
    199c:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    19a0:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    19a4:	84 31       	cpi	r24, 0x14	; 20
    19a6:	91 05       	cpc	r25, r1
    19a8:	c1 f4       	brne	.+48     	; 0x19da <_ZN3Lcd11lcd_putcharEc+0x206>
    19aa:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd6cursorE+0x3>
  if (cursor.col == NUM_CHAR_PER_LINE) {
    19ae:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    19b2:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    19b6:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    19ba:	01 96       	adiw	r24, 0x01	; 1
    cursor.col = 0;
    19bc:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    19c0:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN3Lcd6cursorE>
    cursor.line++;
    19c4:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    19c8:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    19cc:	8a 30       	cpi	r24, 0x0A	; 10
    19ce:	91 05       	cpc	r25, r1
    19d0:	21 f4       	brne	.+8      	; 0x19da <_ZN3Lcd11lcd_putcharEc+0x206>
    19d2:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    if (cursor.line == NUM_LINES) {
    19d6:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZN3Lcd6cursorE>
    19da:	78 94       	sei
    19dc:	af 96       	adiw	r28, 0x2f	; 47
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
      cursor.line = 0;
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    }  
  }
  sei();
    19ec:	08 95       	ret

000019ee <_ZN3Lcd8cmpltCmdEv>:
}

void Lcd::cmpltCmd(void) {
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	1f 92       	push	r1
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
uint8_t reg;
  
  reg = PORTD & ~LCD_DDR;
    19f8:	8b e2       	ldi	r24, 0x2B	; 43
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	83 78       	andi	r24, 0x83	; 131
    1a02:	89 83       	std	Y+1, r24	; 0x01
  PORTD = reg | LCD_DFLT;   // CS, RST hi
    1a04:	8b e2       	ldi	r24, 0x2B	; 43
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	29 81       	ldd	r18, Y+1	; 0x01
    1a0a:	20 66       	ori	r18, 0x60	; 96
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
}
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Lcd::drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	0f 93       	push	r16
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	ea 97       	sbiw	r28, 0x3a	; 58
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	98 ab       	std	Y+48, r25	; 0x30
    1a3c:	8f a7       	std	Y+47, r24	; 0x2f
    1a3e:	69 ab       	std	Y+49, r22	; 0x31
    1a40:	4a ab       	std	Y+50, r20	; 0x32
    1a42:	2b ab       	std	Y+51, r18	; 0x33
    1a44:	0c ab       	std	Y+52, r16	; 0x34
    1a46:	cd aa       	std	Y+53, r12	; 0x35
    1a48:	de aa       	std	Y+54, r13	; 0x36
    1a4a:	ef aa       	std	Y+55, r14	; 0x37
    1a4c:	88 ae       	std	Y+56, r8	; 0x38
    1a4e:	99 ae       	std	Y+57, r9	; 0x39
    1a50:	aa ae       	std	Y+58, r10	; 0x3a
uint8_t xe; 
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 3];
uint8_t bufIndx;

  if (mode) { 
    1a52:	8a a9       	ldd	r24, Y+50	; 0x32
    1a54:	88 23       	and	r24, r24
    1a56:	a1 f0       	breq	.+40     	; 0x1a80 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x68>
    ys = cursor.line * CHAR_HEIGHT;
    1a58:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    1a5c:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1a60:	98 2f       	mov	r25, r24
    1a62:	89 2f       	mov	r24, r25
    1a64:	88 0f       	add	r24, r24
    1a66:	89 0f       	add	r24, r25
    1a68:	88 0f       	add	r24, r24
    1a6a:	88 0f       	add	r24, r24
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    xs = cursor.col * CHAR_WIDTH;
    1a6e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1a72:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1a76:	88 0f       	add	r24, r24
    1a78:	88 0f       	add	r24, r24
    1a7a:	88 0f       	add	r24, r24
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x70>
  } else {
    ys = line;
    1a80:	8b a9       	ldd	r24, Y+51	; 0x33
    1a82:	89 83       	std	Y+1, r24	; 0x01
    xs = col;
    1a84:	8c a9       	ldd	r24, Y+52	; 0x34
    1a86:	8a 83       	std	Y+2, r24	; 0x02
  }
  ye = ys + CHAR_HEIGHT - 1;
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	85 5f       	subi	r24, 0xF5	; 245
    1a8c:	89 87       	std	Y+9, r24	; 0x09
  xe = xs + CHAR_WIDTH -1; 
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	89 5f       	subi	r24, 0xF9	; 249
    1a92:	8a 87       	std	Y+10, r24	; 0x0a
  cli();
    1a94:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
    1a96:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (xs & 0xff);
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (xe >> 8) & 0xff;
    1a9c:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (xe & 0xff);
    1a9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa0:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_COL_ADDR_SET);
    1aa2:	8a e2       	ldi	r24, 0x2A	; 42
    1aa4:	b9 dd       	rcall	.-1166   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1aa6:	ce 01       	movw	r24, r28
  sendData(buf, 4);
    1aa8:	47 96       	adiw	r24, 0x17	; 23
    1aaa:	64 e0       	ldi	r22, 0x04	; 4
    1aac:	cf dd       	rcall	.-1122   	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1aae:	9f df       	rcall	.-194    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1ab0:	1f 8a       	std	Y+23, r1	; 0x17
  cmpltCmd();
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	88 8f       	std	Y+24, r24	; 0x18
  
  buf[0] = (ys >> 8) & 0xff;
    1ab6:	19 8e       	std	Y+25, r1	; 0x19
  buf[1] = (ys & 0xff);
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	8a 8f       	std	Y+26, r24	; 0x1a
  buf[2] = (ye >> 8) & 0xff;
    1abc:	8b e2       	ldi	r24, 0x2B	; 43
  buf[3] = (ye & 0xff);
    1abe:	ac dd       	rcall	.-1192   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1ac0:	ce 01       	movw	r24, r28
  sendCmd(CMD_ROW_ADDR_SET);
    1ac2:	47 96       	adiw	r24, 0x17	; 23
    1ac4:	64 e0       	ldi	r22, 0x04	; 4
    1ac6:	c2 dd       	rcall	.-1148   	; 0x164c <_ZN3Lcd8sendDataEPhh>
  sendData(buf, 4);
    1ac8:	92 df       	rcall	.-220    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1aca:	ce 01       	movw	r24, r28
    1acc:	0b 96       	adiw	r24, 0x0b	; 11
    1ace:	bc 01       	movw	r22, r24
    1ad0:	89 a9       	ldd	r24, Y+49	; 0x31
  cmpltCmd();
    1ad2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_getPixels>

  _getPixels(cc, pixBuf); 
    1ad6:	8c e2       	ldi	r24, 0x2C	; 44
    1ad8:	9f dd       	rcall	.-1218   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1ada:	1d 82       	std	Y+5, r1	; 0x05
    1adc:	1c 82       	std	Y+4, r1	; 0x04
    1ade:	84 c0       	rjmp	.+264    	; 0x1be8 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1d0>
    1ae0:	1b 82       	std	Y+3, r1	; 0x03

  sendCmd(CMD_MEM_WRITE);
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	25 5f       	subi	r18, 0xF5	; 245
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	82 0f       	add	r24, r18
    bufIndx = 0;
    1aee:	93 1f       	adc	r25, r19
    uint8_t pixels = pixBuf[i];
    1af0:	fc 01       	movw	r30, r24
    1af2:	80 81       	ld	r24, Z
    1af4:	8e 83       	std	Y+6, r24	; 0x06
    1af6:	18 86       	std	Y+8, r1	; 0x08
    1af8:	1f 82       	std	Y+7, r1	; 0x07
    1afa:	67 c0       	rjmp	.+206    	; 0x1bca <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1b2>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	81 70       	andi	r24, 0x01	; 1
    for (int j=0; j< CHAR_WIDTH; j++) {
    1b04:	99 27       	eor	r25, r25
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	59 f1       	breq	.+86     	; 0x1b60 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x148>
      if (pixels & 0x01) {                // font table assumes right to left scan 
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	98 0f       	add	r25, r24
    1b10:	9b 83       	std	Y+3, r25	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	4d a9       	ldd	r20, Y+53	; 0x35
        buf[bufIndx++] = fc.r;
    1b18:	9e 01       	movw	r18, r28
    1b1a:	29 5e       	subi	r18, 0xE9	; 233
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	fc 01       	movw	r30, r24
    1b24:	40 83       	st	Z, r20
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	98 0f       	add	r25, r24
    1b2c:	9b 83       	std	Y+3, r25	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	4e a9       	ldd	r20, Y+54	; 0x36
        buf[bufIndx++] = fc.g;
    1b34:	9e 01       	movw	r18, r28
    1b36:	29 5e       	subi	r18, 0xE9	; 233
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	fc 01       	movw	r30, r24
    1b40:	40 83       	st	Z, r20
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	98 0f       	add	r25, r24
    1b48:	9b 83       	std	Y+3, r25	; 0x03
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	4f a9       	ldd	r20, Y+55	; 0x37
        buf[bufIndx++] = fc.b;
    1b50:	9e 01       	movw	r18, r28
    1b52:	29 5e       	subi	r18, 0xE9	; 233
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	82 0f       	add	r24, r18
    1b58:	93 1f       	adc	r25, r19
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	40 83       	st	Z, r20
    1b5e:	2a c0       	rjmp	.+84     	; 0x1bb4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x19c>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	98 0f       	add	r25, r24
    1b66:	9b 83       	std	Y+3, r25	; 0x03
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	48 ad       	ldd	r20, Y+56	; 0x38
      } else {
        buf[bufIndx++] = bc.r;
    1b6e:	9e 01       	movw	r18, r28
    1b70:	29 5e       	subi	r18, 0xE9	; 233
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	fc 01       	movw	r30, r24
    1b7a:	40 83       	st	Z, r20
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	98 0f       	add	r25, r24
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	49 ad       	ldd	r20, Y+57	; 0x39
        buf[bufIndx++] = bc.g;
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	29 5e       	subi	r18, 0xE9	; 233
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	fc 01       	movw	r30, r24
    1b96:	40 83       	st	Z, r20
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	98 0f       	add	r25, r24
    1b9e:	9b 83       	std	Y+3, r25	; 0x03
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	4a ad       	ldd	r20, Y+58	; 0x3a
        buf[bufIndx++] = bc.b;
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	29 5e       	subi	r18, 0xE9	; 233
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	40 83       	st	Z, r20
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	95 95       	asr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	8e 83       	std	Y+6, r24	; 0x06
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
      }
      pixels >>= 1;   
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	8f 81       	ldd	r24, Y+7	; 0x07
    1bcc:	98 85       	ldd	r25, Y+8	; 0x08
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i];
    for (int j=0; j< CHAR_WIDTH; j++) {
    1bce:	88 30       	cpi	r24, 0x08	; 8
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	0c f4       	brge	.+2      	; 0x1bd6 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1be>
    1bd4:	93 cf       	rjmp	.-218    	; 0x1afc <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xe4>
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	47 96       	adiw	r24, 0x17	; 23
    1bda:	6b 81       	ldd	r22, Y+3	; 0x03
    1bdc:	37 dd       	rcall	.-1426   	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	01 96       	adiw	r24, 0x01	; 1
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
    1be4:	9d 83       	std	Y+5, r25	; 0x05
    1be6:	8c 83       	std	Y+4, r24	; 0x04
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	8c 30       	cpi	r24, 0x0C	; 12

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    1bee:	91 05       	cpc	r25, r1
    1bf0:	0c f4       	brge	.+2      	; 0x1bf4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1dc>
    1bf2:	76 cf       	rjmp	.-276    	; 0x1ae0 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc8>
    1bf4:	fc de       	rcall	.-520    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1bf6:	8a a9       	ldd	r24, Y+50	; 0x32
    1bf8:	88 23       	and	r24, r24
    1bfa:	41 f1       	breq	.+80     	; 0x1c4c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x234>
    1bfc:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1c00:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <_ZN3Lcd6cursorE+0x3>
  if (mode) {
    1c0a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    cursor.col++;
    1c0e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1c12:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1c16:	84 31       	cpi	r24, 0x14	; 20
    1c18:	91 05       	cpc	r25, r1
    1c1a:	c1 f4       	brne	.+48     	; 0x1c4c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x234>
    1c1c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    if (cursor.col == NUM_CHAR_PER_LINE) {
    1c20:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1c24:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    1c28:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1c2c:	01 96       	adiw	r24, 0x01	; 1
      cursor.col = 0;
    1c2e:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1c32:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN3Lcd6cursorE>
      cursor.line++;
    1c36:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    1c3a:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1c3e:	8a 30       	cpi	r24, 0x0A	; 10
    1c40:	91 05       	cpc	r25, r1
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x234>
    1c44:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <_ZN3Lcd6cursorE+0x1>
      if (cursor.line == NUM_LINES) {
    1c48:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZN3Lcd6cursorE>
    1c4c:	78 94       	sei
    1c4e:	ea 96       	adiw	r28, 0x3a	; 58
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
        cursor.line = 0;
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
      }  
    }
  }
  sei();
    1c5e:	0f 91       	pop	r16
}
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	af 90       	pop	r10
    1c68:	9f 90       	pop	r9
    1c6a:	8f 90       	pop	r8
    1c6c:	08 95       	ret

00001c6e <_ZN3Lcd8drawCharEchhh>:


/*
 Draw character c at pixel position (y, x) with default foreground and background colors
 */
void Lcd::drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col ) {
    1c6e:	8f 92       	push	r8
    1c70:	9f 92       	push	r9
    1c72:	af 92       	push	r10
    1c74:	cf 92       	push	r12
    1c76:	df 92       	push	r13
    1c78:	ef 92       	push	r14
    1c7a:	0f 93       	push	r16
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <_ZN3Lcd8drawCharEchhh+0x14>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <_ZN3Lcd8drawCharEchhh+0x16>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <_ZN3Lcd8drawCharEchhh+0x18>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
    1c90:	4c 83       	std	Y+4, r20	; 0x04
    1c92:	2d 83       	std	Y+5, r18	; 0x05
    1c94:	0e 83       	std	Y+6, r16	; 0x06

	drawChar(cc, mode, line, col, fgColor, bgColor);
    1c96:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <_ZN3Lcd7bgColorE>
    1c9a:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
    1c9e:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
    1ca2:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <_ZN3Lcd7fgColorE>
    1ca6:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <_ZN3Lcd7fgColorE+0x1>
    1caa:	a0 91 4f 03 	lds	r26, 0x034F	; 0x80034f <_ZN3Lcd7fgColorE+0x2>
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	49 01       	movw	r8, r18
    1cb4:	a4 2e       	mov	r10, r20
    1cb6:	6c 01       	movw	r12, r24
    1cb8:	ea 2e       	mov	r14, r26
    1cba:	0e 81       	ldd	r16, Y+6	; 0x06
    1cbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1cc0:	6b 81       	ldd	r22, Y+3	; 0x03
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	a9 de       	rcall	.-686    	; 0x1a18 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    1cc6:	26 96       	adiw	r28, 0x06	; 6
}
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	0f 91       	pop	r16
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	08 95       	ret

00001ce6 <_ZN3Lcd7clrScrnEv>:


void Lcd::clrScrn(void) {
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	60 97       	sbiw	r28, 0x10	; 16
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	98 8b       	std	Y+16, r25	; 0x10
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f

uint8_t pixBuf[3];
uint8_t buf[4];

  pixColor oldBg = bgColor;
    1cfe:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <_ZN3Lcd7bgColorE>
    1d02:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
    1d06:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
    1d0a:	8c 87       	std	Y+12, r24	; 0x0c
    1d0c:	9d 87       	std	Y+13, r25	; 0x0d
    1d0e:	ae 87       	std	Y+14, r26	; 0x0e
  bgColor.r = 0;
    1d10:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <_ZN3Lcd7bgColorE>
  bgColor.g = 0xfc;
    1d14:	8c ef       	ldi	r24, 0xFC	; 252
    1d16:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
  bgColor.b = 0;
    1d1a:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
  
  cli();
    1d1e:	f8 94       	cli
  
  buf[0] = 0;
    1d20:	18 86       	std	Y+8, r1	; 0x08
  buf[1] = 0;
    1d22:	19 86       	std	Y+9, r1	; 0x09
  buf[2] = (NUM_PIX_PER_LINE >> 8) & 0xff;
    1d24:	1a 86       	std	Y+10, r1	; 0x0a
  buf[3] = (NUM_PIX_PER_LINE & 0xff);
    1d26:	80 ea       	ldi	r24, 0xA0	; 160
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
  sendCmd(CMD_COL_ADDR_SET);
    1d2a:	8a e2       	ldi	r24, 0x2A	; 42
    1d2c:	75 dc       	rcall	.-1814   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1d2e:	ce 01       	movw	r24, r28
  sendData(buf, 4);
    1d30:	08 96       	adiw	r24, 0x08	; 8
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	8b dc       	rcall	.-1770   	; 0x164c <_ZN3Lcd8sendDataEPhh>
    1d36:	5b de       	rcall	.-842    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1d38:	18 86       	std	Y+8, r1	; 0x08
  cmpltCmd();
    1d3a:	19 86       	std	Y+9, r1	; 0x09
    1d3c:	1a 86       	std	Y+10, r1	; 0x0a
  
  buf[0] = 0;
    1d3e:	80 e8       	ldi	r24, 0x80	; 128
  buf[1] = 0;
    1d40:	8b 87       	std	Y+11, r24	; 0x0b
  buf[2] = (NUM_PIX_LINES >> 8) & 0xff;
    1d42:	8b e2       	ldi	r24, 0x2B	; 43
  buf[3] = (NUM_PIX_LINES & 0xff);
    1d44:	69 dc       	rcall	.-1838   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1d46:	ce 01       	movw	r24, r28
  sendCmd(CMD_ROW_ADDR_SET);
    1d48:	08 96       	adiw	r24, 0x08	; 8
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	7f dc       	rcall	.-1794   	; 0x164c <_ZN3Lcd8sendDataEPhh>
  sendData(buf, 4);
    1d4e:	4f de       	rcall	.-866    	; 0x19ee <_ZN3Lcd8cmpltCmdEv>
    1d50:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <_ZN3Lcd7bgColorE>
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
  cmpltCmd();
    1d5a:	8e 83       	std	Y+6, r24	; 0x06

  pixBuf[0] = bgColor.r;
    1d5c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
    1d60:	8f 83       	std	Y+7, r24	; 0x07
  pixBuf[1] = bgColor.g;
    1d62:	8c e2       	ldi	r24, 0x2C	; 44
    1d64:	59 dc       	rcall	.-1870   	; 0x1618 <_ZN3Lcd7sendCmdEh>
    1d66:	1a 82       	std	Y+2, r1	; 0x02
  pixBuf[2] = bgColor.b; 
    1d68:	19 82       	std	Y+1, r1	; 0x01
    1d6a:	16 c0       	rjmp	.+44     	; 0x1d98 <_ZN3Lcd7clrScrnEv+0xb2>
    1d6c:	1c 82       	std	Y+4, r1	; 0x04

  sendCmd(CMD_MEM_WRITE);
    1d6e:	1b 82       	std	Y+3, r1	; 0x03
    1d70:	09 c0       	rjmp	.+18     	; 0x1d84 <_ZN3Lcd7clrScrnEv+0x9e>
    1d72:	ce 01       	movw	r24, r28
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    1d74:	05 96       	adiw	r24, 0x05	; 5
    1d76:	63 e0       	ldi	r22, 0x03	; 3
    1d78:	69 dc       	rcall	.-1838   	; 0x164c <_ZN3Lcd8sendDataEPhh>
    for (int j=0; j< NUM_PIX_PER_LINE; j++) {
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 96       	adiw	r24, 0x01	; 1
      sendData(pixBuf,3);
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	80 3a       	cpi	r24, 0xA0	; 160
  pixBuf[2] = bgColor.b; 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    for (int j=0; j< NUM_PIX_PER_LINE; j++) {
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	94 f3       	brlt	.-28     	; 0x1d72 <_ZN3Lcd7clrScrnEv+0x8c>
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	80 38       	cpi	r24, 0x80	; 128
  pixBuf[1] = bgColor.g;
  pixBuf[2] = bgColor.b; 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    1d9e:	91 05       	cpc	r25, r1
    1da0:	2c f3       	brlt	.-54     	; 0x1d6c <_ZN3Lcd7clrScrnEv+0x86>
    1da2:	78 94       	sei
    1da4:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1da8:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZN3Lcd6cursorE>
    1dac:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1db0:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZN3Lcd6cursorE+0x2>
      sendData(pixBuf,3);
    }
  }
  sei();
	
	cursor.line = 0;
    1db4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1db6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1db8:	ae 85       	ldd	r26, Y+14	; 0x0e
    1dba:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <_ZN3Lcd7bgColorE>
	cursor.col = 0;
    1dbe:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
    1dc2:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
  bgColor = oldBg;
    1dc6:	60 96       	adiw	r28, 0x10	; 16
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
}
    1dd6:	08 95       	ret

00001dd8 <_ZN3Lcd4putsEPKc>:


void Lcd::puts(const char *p) {
    1dd8:	0f 93       	push	r16
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <_ZN3Lcd4putsEPKc+0x8>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <_ZN3Lcd4putsEPKc+0xa>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	7c 83       	std	Y+4, r23	; 0x04
    1dec:	6b 83       	std	Y+3, r22	; 0x03
	while (*p) {
    1dee:	1a c0       	rjmp	.+52     	; 0x1e24 <_ZN3Lcd4putsEPKc+0x4c>
		drawChar(*p++, 1, cursor.line, cursor.col);
    1df0:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1df4:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1df8:	58 2f       	mov	r21, r24
    1dfa:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    1dfe:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1e02:	48 2f       	mov	r20, r24
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	9c 01       	movw	r18, r24
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	3c 83       	std	Y+4, r19	; 0x04
    1e10:	2b 83       	std	Y+3, r18	; 0x03
    1e12:	fc 01       	movw	r30, r24
    1e14:	30 81       	ld	r19, Z
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	05 2f       	mov	r16, r21
    1e1c:	24 2f       	mov	r18, r20
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	63 2f       	mov	r22, r19
    1e22:	25 df       	rcall	.-438    	; 0x1c6e <_ZN3Lcd8drawCharEchhh>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
  bgColor = oldBg;
}


void Lcd::puts(const char *p) {
	while (*p) {
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	fc 01       	movw	r30, r24
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	01 f7       	brne	.-64     	; 0x1df0 <_ZN3Lcd4putsEPKc+0x18>
    1e30:	0f 90       	pop	r0
		drawChar(*p++, 1, cursor.line, cursor.col);
	}	
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <_ZN3Lcd4putsEPKc9_pixColor>:


void Lcd::puts(const char *p, pixColor c) {
    1e40:	8f 92       	push	r8
    1e42:	9f 92       	push	r9
    1e44:	af 92       	push	r10
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	0f 93       	push	r16
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	27 97       	sbiw	r28, 0x07	; 7
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	7c 83       	std	Y+4, r23	; 0x04
    1e68:	6b 83       	std	Y+3, r22	; 0x03
    1e6a:	2d 83       	std	Y+5, r18	; 0x05
    1e6c:	3e 83       	std	Y+6, r19	; 0x06
    1e6e:	4f 83       	std	Y+7, r20	; 0x07
	while (*p) {
    1e70:	28 c0       	rjmp	.+80     	; 0x1ec2 <_ZN3Lcd4putsEPKc9_pixColor+0x82>
		drawChar(*p++, 1, cursor.line, cursor.col, c, bgColor);
    1e72:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <_ZN3Lcd6cursorE+0x2>
    1e76:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1e7a:	78 2f       	mov	r23, r24
    1e7c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd6cursorE>
    1e80:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1e84:	68 2f       	mov	r22, r24
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	3c 83       	std	Y+4, r19	; 0x04
    1e92:	2b 83       	std	Y+3, r18	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	50 81       	ld	r21, Z
    1e98:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <_ZN3Lcd7bgColorE>
    1e9c:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <_ZN3Lcd7bgColorE+0x1>
    1ea0:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <_ZN3Lcd7bgColorE+0x2>
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	af 81       	ldd	r26, Y+7	; 0x07
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	49 01       	movw	r8, r18
    1eb0:	a4 2e       	mov	r10, r20
    1eb2:	6c 01       	movw	r12, r24
    1eb4:	ea 2e       	mov	r14, r26
    1eb6:	07 2f       	mov	r16, r23
    1eb8:	26 2f       	mov	r18, r22
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	65 2f       	mov	r22, r21
    1ebe:	cf 01       	movw	r24, r30
    1ec0:	ab dd       	rcall	.-1194   	; 0x1a18 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
	}	
}


void Lcd::puts(const char *p, pixColor c) {
	while (*p) {
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 23       	and	r24, r24
    1ecc:	91 f6       	brne	.-92     	; 0x1e72 <_ZN3Lcd4putsEPKc9_pixColor+0x32>
    1ece:	27 96       	adiw	r28, 0x07	; 7
		drawChar(*p++, 1, cursor.line, cursor.col, c, bgColor);
	}
}
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	0f 91       	pop	r16
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	af 90       	pop	r10
    1ee8:	9f 90       	pop	r9
    1eea:	8f 90       	pop	r8
    1eec:	08 95       	ret

00001eee <_ZN3Lcd6gotoxyEhh>:


void Lcd::gotoxy(uint8_t line, uint8_t col) {	
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <_ZN3Lcd6gotoxyEhh+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <_ZN3Lcd6gotoxyEhh+0x8>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	6b 83       	std	Y+3, r22	; 0x03
    1f00:	4c 83       	std	Y+4, r20	; 0x04
	cursor.line = line;
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN3Lcd6cursorE+0x1>
    1f0c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN3Lcd6cursorE>
	cursor.col = col;
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <_ZN3Lcd6cursorE+0x3>
    1f1a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZN3Lcd6cursorE+0x2>
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <_Z8lcd_putccP6__file>:


//
// fprintf wrapper
//
int lcd_putc(char c, FILE *f) {
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <_Z8lcd_putccP6__file+0x6>
    1f32:	1f 92       	push	r1
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	7b 83       	std	Y+3, r23	; 0x03
    1f3c:	6a 83       	std	Y+2, r22	; 0x02
	Lcd::lcd_putchar(c);
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	49 dc       	rcall	.-1902   	; 0x17d4 <_ZN3Lcd11lcd_putcharEc>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0f 90       	pop	r0
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <_ZN3LedC1Ev>:
#include "led.h"

//
// constructor
//
Led::Led(void) {
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <_ZN3LedC1Ev+0x6>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN8CallbackC1Ev>
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	2b ef       	ldi	r18, 0xFB	; 251
    1f6e:	32 e0       	ldi	r19, 0x02	; 2
    1f70:	fc 01       	movw	r30, r24
    1f72:	31 83       	std	Z+1, r19	; 0x01
    1f74:	20 83       	st	Z, r18
  // set up led (PB5)
  DDRB |= LED_MSK;    // PB5 is output
    1f76:	84 e2       	ldi	r24, 0x24	; 36
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	24 e2       	ldi	r18, 0x24	; 36
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	f9 01       	movw	r30, r18
    1f80:	20 81       	ld	r18, Z
    1f82:	20 62       	ori	r18, 0x20	; 32
    1f84:	fc 01       	movw	r30, r24
    1f86:	20 83       	st	Z, r18
  PORTB |= LED_MSK;    // turn on the ouput
    1f88:	85 e2       	ldi	r24, 0x25	; 37
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	25 e2       	ldi	r18, 0x25	; 37
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	20 62       	ori	r18, 0x20	; 32
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
	count = 0;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	12 82       	std	Z+2, r1	; 0x02
	Clock::registerPeriodic(this);
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN5Clock16registerPeriodicEP8Callback>
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <_ZN3Led8callbackEv>:


void Led::callback(void) {
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <_ZN3Led8callbackEv+0x6>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	count++;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	21 e0       	ldi	r18, 0x01	; 1
    1fcc:	28 0f       	add	r18, r24
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	22 83       	std	Z+2, r18	; 0x02
	if (count == 50) {
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	fc 01       	movw	r30, r24
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	82 33       	cpi	r24, 0x32	; 50
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <_ZN3Led8callbackEv+0x3c>
		count = 0;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	12 82       	std	Z+2, r1	; 0x02
		toggle();
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	05 d0       	rcall	.+10     	; 0x1ffa <_ZN3Led6toggleEv>
    1ff0:	0f 90       	pop	r0
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret

00001ffa <_ZN3Led6toggleEv>:


//
// toggle the led
void Led::toggle(void) {
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <_ZN3Led6toggleEv+0x6>
    2000:	1f 92       	push	r1
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9b 83       	std	Y+3, r25	; 0x03
    2008:	8a 83       	std	Y+2, r24	; 0x02
uint8_t reg = PORTB;
    200a:	85 e2       	ldi	r24, 0x25	; 37
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	80 81       	ld	r24, Z
    2012:	89 83       	std	Y+1, r24	; 0x01

  reg ^= LED_MSK;
    2014:	99 81       	ldd	r25, Y+1	; 0x01
    2016:	80 e2       	ldi	r24, 0x20	; 32
    2018:	89 27       	eor	r24, r25
    201a:	89 83       	std	Y+1, r24	; 0x01
  PORTB = reg;
    201c:	85 e2       	ldi	r24, 0x25	; 37
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	29 81       	ldd	r18, Y+1	; 0x01
    2022:	fc 01       	movw	r30, r24
    2024:	20 83       	st	Z, r18
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <_ZN5ClocknwEj>:
  static uint32_t getTicks(void);
	static void tick(void);
  static void delay(uint32_t dly);
	static bool registerPeriodic(Callback *cb);
	static bool registerOnce(Callback *cb);
	void *operator new(size_t size) { return malloc(size);}
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	00 d0       	rcall	.+0      	; 0x2038 <_ZN5ClocknwEj+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <_ZN3LednwEj>:
  Led(void);
  void toggle(void);
  uint8_t is_led_set(void);
  void on(void);
  void off(void);
	void *operator new(size_t size) { return malloc(size);}
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	00 d0       	rcall	.+0      	; 0x2058 <_ZN3LednwEj+0x6>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <_ZN3LcdnwEj>:
	void drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col, pixColor fc, pixColor bc);
	void clrScrn(void);
	void gotoxy(uint8_t line, uint8_t col);
	void setFgColor(uint8_t r, uint8_t g, uint8_t b);
	void setBgColor(uint8_t r, uint8_t g, uint8_t b);
	void *operator new(size_t size) { return malloc(size);}
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 d0       	rcall	.+0      	; 0x2078 <_ZN3LcdnwEj+0x6>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <_ZN8GraphicsnwEj>:

public:
	void draw2xChar(char c, uint8_t line, uint8_t col);
	void draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc);
	void puts2x(char *p, uint8_t line, uint8_t col);
	void *operator new(size_t size) { return malloc(size);}
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	00 d0       	rcall	.+0      	; 0x2098 <_ZN8GraphicsnwEj+0x6>
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <_ZN11ElapsedTimenwEj>:
public:

	ElapsedTime(uint8_t nt);
	void callback(void);
	bool expired(void);
	void *operator new(size_t size) { return malloc(size);}
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <_ZN11ElapsedTimenwEj+0x6>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	08 95       	ret

000020d2 <_ZN7EncodernwEj>:
	encEvent getEvent(void);
	void	clearEvent(void);
	void	callback(void);
	int getMissedCwCount(void);
	int getMissedCcwCount(void);
	void *operator new(size_t size) { return malloc(size);}
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <_ZN7EncodernwEj+0x6>
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <_ZN3vfonwEj>:
	float getTxFreq(band_t band);
	void getRxDisplayFreq(char *buf, band_t band);
	void getTxDisplayFreq(char *buf, band_t band);
	void setStep(step_t step);
	step_t getStep(void);
	void *operator new(size_t size) { return malloc(size);}
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <_ZN3vfonwEj+0x6>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <_ZN6paramsnwEj>:
	void	setMode(mode_t newMode);

	void update(Encoder *enc, Sw *pb, Lcd *lcd);
	void updateEnter(Encoder *enc, Sw *pb, Lcd *lcd);

	void *operator new(size_t size) { return malloc(size);}
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	00 d0       	rcall	.+0      	; 0x2118 <_ZN6paramsnwEj+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	0e 94 24 25 	call	0x4a48	; 0x4a48 <malloc>
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <_ZN8GraphicsC1Ev>:
#define GRAPHICS_H_

#include <stdlib.h>
#include "lcd.h"

class Graphics : public Lcd {
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	00 d0       	rcall	.+0      	; 0x2138 <_ZN8GraphicsC1Ev+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	db d9       	rcall	.-3146   	; 0x14fc <_ZN3LcdC1Ev>
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <main>:
FILE uart_str = FDEV_SETUP_STREAM_CPP(uart_putc, uart_getc, _FDEV_SETUP_RW);
FILE lcd_str  = FDEV_SETUP_STREAM_CPP(lcd_putc, NULL, _FDEV_SETUP_WRITE);
FILE *lcdfp = &lcd_str;


int main(void) {
    2150:	af 92       	push	r10
    2152:	bf 92       	push	r11
    2154:	cf 92       	push	r12
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	cd 54       	subi	r28, 0x4D	; 77
    2168:	d1 09       	sbc	r29, r1
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61

volatile uint8_t reg;

Clock *cl = new Clock();
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	5c df       	rcall	.-328    	; 0x2032 <_ZN5ClocknwEj>
    217a:	8c 01       	movw	r16, r24
    217c:	c8 01       	movw	r24, r16
    217e:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN5ClockC1Ev>
    2182:	1e 8b       	std	Y+22, r17	; 0x16
    2184:	0d 8b       	std	Y+21, r16	; 0x15
Led *led = new Led();
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	63 df       	rcall	.-314    	; 0x2052 <_ZN3LednwEj>
    218c:	8c 01       	movw	r16, r24
    218e:	c8 01       	movw	r24, r16
    2190:	e0 de       	rcall	.-576    	; 0x1f52 <_ZN3LedC1Ev>
    2192:	18 8f       	std	Y+24, r17	; 0x18
    2194:	0f 8b       	std	Y+23, r16	; 0x17
Lcd *l = new Lcd();
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	6b df       	rcall	.-298    	; 0x2072 <_ZN3LcdnwEj>
    219c:	8c 01       	movw	r16, r24
    219e:	c8 01       	movw	r24, r16
    21a0:	ad d9       	rcall	.-3238   	; 0x14fc <_ZN3LcdC1Ev>
    21a2:	1a 8f       	std	Y+26, r17	; 0x1a
    21a4:	09 8f       	std	Y+25, r16	; 0x19
Graphics *g = new Graphics();
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	73 df       	rcall	.-282    	; 0x2092 <_ZN8GraphicsnwEj>
    21ac:	8c 01       	movw	r16, r24
    21ae:	c8 01       	movw	r24, r16
    21b0:	c0 df       	rcall	.-128    	; 0x2132 <_ZN8GraphicsC1Ev>
    21b2:	1c 8f       	std	Y+28, r17	; 0x1c
    21b4:	0b 8f       	std	Y+27, r16	; 0x1b

int pass = 0;
    21b6:	1a 82       	std	Y+2, r1	; 0x02
    21b8:	19 82       	std	Y+1, r1	; 0x01
pixColor  f = {0xfc,0x0,0x0};
    21ba:	8c ef       	ldi	r24, 0xFC	; 252
    21bc:	89 ab       	std	Y+49, r24	; 0x31
    21be:	1a aa       	std	Y+50, r1	; 0x32
    21c0:	1b aa       	std	Y+51, r1	; 0x33
pixColor  b = {0xfc,0xfc,0xfc};
    21c2:	8c ef       	ldi	r24, 0xFC	; 252
    21c4:	8c ab       	std	Y+52, r24	; 0x34
    21c6:	8c ef       	ldi	r24, 0xFC	; 252
    21c8:	8d ab       	std	Y+53, r24	; 0x35
    21ca:	8c ef       	ldi	r24, 0xFC	; 252
    21cc:	8e ab       	std	Y+54, r24	; 0x36
pixColor  fg_grey = {0x7c,0x7c,0x7c};
    21ce:	8c e7       	ldi	r24, 0x7C	; 124
    21d0:	8f ab       	std	Y+55, r24	; 0x37
    21d2:	8c e7       	ldi	r24, 0x7C	; 124
    21d4:	88 af       	std	Y+56, r24	; 0x38
    21d6:	8c e7       	ldi	r24, 0x7C	; 124
    21d8:	89 af       	std	Y+57, r24	; 0x39
volatile float freq;
char buf[16];
mode_t curMode;

#ifndef LCD_TT
	uart_init();
    21da:	0e 94 9c 1c 	call	0x3938	; 0x3938 <uart_init>
	stdout = stdin = &uart_str;
    21de:	86 e0       	ldi	r24, 0x06	; 6
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <__iob+0x1>
    21e6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <__iob>
    21ea:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__iob>
    21ee:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <__iob+0x1>
    21f2:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <__iob+0x3>
    21f6:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <__iob+0x2>
	stderr = &uart_str;
    21fa:	86 e0       	ldi	r24, 0x06	; 6
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__iob+0x5>
    2202:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__iob+0x4>
	printf("main: Starting loop\n");
    2206:	8a e3       	ldi	r24, 0x3A	; 58
    2208:	92 e0       	ldi	r25, 0x02	; 2
    220a:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <puts>
#endif

	DdsInit();
    220e:	0e 94 f6 07 	call	0xfec	; 0xfec <DdsInit>
	// init RLY as output,
	reg = DDRD;
    2212:	8a e2       	ldi	r24, 0x2A	; 42
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	fc 01       	movw	r30, r24
    2218:	80 81       	ld	r24, Z
    221a:	88 ab       	std	Y+48, r24	; 0x30
	DDRD = reg | RLY_MSK;
    221c:	8a e2       	ldi	r24, 0x2A	; 42
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	28 a9       	ldd	r18, Y+48	; 0x30
    2222:	20 64       	ori	r18, 0x40	; 64
    2224:	fc 01       	movw	r30, r24
    2226:	20 83       	st	Z, r18

	reg = PORTD;
    2228:	8b e2       	ldi	r24, 0x2B	; 43
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	88 ab       	std	Y+48, r24	; 0x30
	PORTD = reg & ~RLY_MSK;
    2232:	8b e2       	ldi	r24, 0x2B	; 43
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	28 a9       	ldd	r18, Y+48	; 0x30
    2238:	2f 7b       	andi	r18, 0xBF	; 191
    223a:	fc 01       	movw	r30, r24
    223c:	20 83       	st	Z, r18
	
	Sw *dot = new Sw(DOT, PORTC_ADR);
    223e:	8b e0       	ldi	r24, 0x0B	; 11
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN2SwnwEj>
    2246:	8c 01       	movw	r16, r24
    2248:	48 e2       	ldi	r20, 0x28	; 40
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	c8 01       	movw	r24, r16
    224e:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN2SwC1Ehh>
    2252:	1e 8f       	std	Y+30, r17	; 0x1e
    2254:	0d 8f       	std	Y+29, r16	; 0x1d
	Sw *dash = new Sw(DASH, PORTC_ADR);
    2256:	8b e0       	ldi	r24, 0x0B	; 11
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN2SwnwEj>
    225e:	8c 01       	movw	r16, r24
    2260:	48 e2       	ldi	r20, 0x28	; 40
    2262:	63 e0       	ldi	r22, 0x03	; 3
    2264:	c8 01       	movw	r24, r16
    2266:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN2SwC1Ehh>
    226a:	18 a3       	std	Y+32, r17	; 0x20
    226c:	0f 8f       	std	Y+31, r16	; 0x1f
	Sw *pb = new Sw(PB, PORTD_ADR);
    226e:	8b e0       	ldi	r24, 0x0B	; 11
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN2SwnwEj>
    2276:	8c 01       	movw	r16, r24
    2278:	4b e2       	ldi	r20, 0x2B	; 43
    227a:	67 e0       	ldi	r22, 0x07	; 7
    227c:	c8 01       	movw	r24, r16
    227e:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN2SwC1Ehh>
    2282:	1a a3       	std	Y+34, r17	; 0x22
    2284:	09 a3       	std	Y+33, r16	; 0x21
	ElapsedTime *et = new ElapsedTime(100);
    2286:	85 e0       	ldi	r24, 0x05	; 5
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	13 df       	rcall	.-474    	; 0x20b2 <_ZN11ElapsedTimenwEj>
    228c:	8c 01       	movw	r16, r24
    228e:	64 e6       	ldi	r22, 0x64	; 100
    2290:	c8 01       	movw	r24, r16
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN11ElapsedTimeC1Eh>
    2296:	1c a3       	std	Y+36, r17	; 0x24
    2298:	0b a3       	std	Y+35, r16	; 0x23
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);
    229a:	8f e0       	ldi	r24, 0x0F	; 15
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	19 df       	rcall	.-462    	; 0x20d2 <_ZN7EncodernwEj>
    22a0:	8c 01       	movw	r16, r24
    22a2:	25 e2       	ldi	r18, 0x25	; 37
    22a4:	44 e0       	ldi	r20, 0x04	; 4
    22a6:	63 e0       	ldi	r22, 0x03	; 3
    22a8:	c8 01       	movw	r24, r16
    22aa:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN7EncoderC1Ehhh>
    22ae:	1e a3       	std	Y+38, r17	; 0x26
    22b0:	0d a3       	std	Y+37, r16	; 0x25

	band_t band = BAND_40;
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	8c 83       	std	Y+4, r24	; 0x04
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
    22b6:	8b ea       	ldi	r24, 0xAB	; 171
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	1b df       	rcall	.-458    	; 0x20f2 <_ZN3vfonwEj>
    22bc:	8c 01       	movw	r16, r24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	48 e9       	ldi	r20, 0x98	; 152
    22c8:	51 e0       	ldi	r21, 0x01	; 1
    22ca:	bc 01       	movw	r22, r24
    22cc:	c8 01       	movw	r24, r16
    22ce:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
    22d2:	18 a7       	std	Y+40, r17	; 0x28
    22d4:	0f a3       	std	Y+39, r16	; 0x27
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);
    22d6:	8b ea       	ldi	r24, 0xAB	; 171
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0b df       	rcall	.-490    	; 0x20f2 <_ZN3vfonwEj>
    22dc:	8c 01       	movw	r16, r24
    22de:	8d a1       	ldd	r24, Y+37	; 0x25
    22e0:	9e a1       	ldd	r25, Y+38	; 0x26
    22e2:	24 e2       	ldi	r18, 0x24	; 36
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	48 e9       	ldi	r20, 0x98	; 152
    22e8:	51 e0       	ldi	r21, 0x01	; 1
    22ea:	bc 01       	movw	r22, r24
    22ec:	c8 01       	movw	r24, r16
    22ee:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
    22f2:	1a a7       	std	Y+42, r17	; 0x2a
    22f4:	09 a7       	std	Y+41, r16	; 0x29

	vfoA->getTxDisplayFreq(buf, band);
    22f6:	9e 01       	movw	r18, r28
    22f8:	22 5c       	subi	r18, 0xC2	; 194
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	8f a1       	ldd	r24, Y+39	; 0x27
    22fe:	98 a5       	ldd	r25, Y+40	; 0x28
    2300:	4c 81       	ldd	r20, Y+4	; 0x04
    2302:	b9 01       	movw	r22, r18
    2304:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
	for (size_t i = 0; i < strlen(buf); i++) {
    2308:	1e 82       	std	Y+6, r1	; 0x06
    230a:	1d 82       	std	Y+5, r1	; 0x05
    230c:	24 c0       	rjmp	.+72     	; 0x2356 <main+0x206>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	68 2f       	mov	r22, r24
    2312:	62 95       	swap	r22
    2314:	60 7f       	andi	r22, 0xF0	; 240
    2316:	9e 01       	movw	r18, r28
    2318:	22 5c       	subi	r18, 0xC2	; 194
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	82 0f       	add	r24, r18
    2322:	93 1f       	adc	r25, r19
    2324:	fc 01       	movw	r30, r24
    2326:	50 81       	ld	r21, Z
    2328:	2c a9       	ldd	r18, Y+52	; 0x34
    232a:	3d a9       	ldd	r19, Y+53	; 0x35
    232c:	4e a9       	ldd	r20, Y+54	; 0x36
    232e:	89 a9       	ldd	r24, Y+49	; 0x31
    2330:	9a a9       	ldd	r25, Y+50	; 0x32
    2332:	ab a9       	ldd	r26, Y+51	; 0x33
    2334:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2336:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2338:	59 01       	movw	r10, r18
    233a:	c4 2e       	mov	r12, r20
    233c:	7c 01       	movw	r14, r24
    233e:	0a 2f       	mov	r16, r26
    2340:	26 2f       	mov	r18, r22
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	65 2f       	mov	r22, r21
    2346:	cf 01       	movw	r24, r30
    2348:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);

	vfoA->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	ce 01       	movw	r24, r28
    2358:	ce 96       	adiw	r24, 0x3e	; 62
    235a:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    235e:	9c 01       	movw	r18, r24
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	82 17       	cp	r24, r18
    2366:	93 07       	cpc	r25, r19
    2368:	90 f2       	brcs	.-92     	; 0x230e <main+0x1be>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
    236a:	9e 01       	movw	r18, r28
    236c:	22 5c       	subi	r18, 0xC2	; 194
    236e:	3f 4f       	sbci	r19, 0xFF	; 255
    2370:	89 a5       	ldd	r24, Y+41	; 0x29
    2372:	9a a5       	ldd	r25, Y+42	; 0x2a
    2374:	4c 81       	ldd	r20, Y+4	; 0x04
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
	for (size_t i = 0; i < strlen(buf); i++) {
    237c:	18 86       	std	Y+8, r1	; 0x08
    237e:	1f 82       	std	Y+7, r1	; 0x07
    2380:	24 c0       	rjmp	.+72     	; 0x23ca <main+0x27a>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    2382:	8f 81       	ldd	r24, Y+7	; 0x07
    2384:	68 2f       	mov	r22, r24
    2386:	62 95       	swap	r22
    2388:	60 7f       	andi	r22, 0xF0	; 240
    238a:	9e 01       	movw	r18, r28
    238c:	22 5c       	subi	r18, 0xC2	; 194
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	8f 81       	ldd	r24, Y+7	; 0x07
    2392:	98 85       	ldd	r25, Y+8	; 0x08
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	fc 01       	movw	r30, r24
    239a:	50 81       	ld	r21, Z
    239c:	2c a9       	ldd	r18, Y+52	; 0x34
    239e:	3d a9       	ldd	r19, Y+53	; 0x35
    23a0:	4e a9       	ldd	r20, Y+54	; 0x36
    23a2:	8f a9       	ldd	r24, Y+55	; 0x37
    23a4:	98 ad       	ldd	r25, Y+56	; 0x38
    23a6:	a9 ad       	ldd	r26, Y+57	; 0x39
    23a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    23aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    23ac:	59 01       	movw	r10, r18
    23ae:	c4 2e       	mov	r12, r20
    23b0:	7c 01       	movw	r14, r24
    23b2:	0a 2f       	mov	r16, r26
    23b4:	26 2f       	mov	r18, r22
    23b6:	44 e2       	ldi	r20, 0x24	; 36
    23b8:	65 2f       	mov	r22, r21
    23ba:	cf 01       	movw	r24, r30
    23bc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	98 85       	ldd	r25, Y+8	; 0x08
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	98 87       	std	Y+8, r25	; 0x08
    23c8:	8f 83       	std	Y+7, r24	; 0x07
    23ca:	ce 01       	movw	r24, r28
    23cc:	ce 96       	adiw	r24, 0x3e	; 62
    23ce:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    23d2:	9c 01       	movw	r18, r24
    23d4:	8f 81       	ldd	r24, Y+7	; 0x07
    23d6:	98 85       	ldd	r25, Y+8	; 0x08
    23d8:	82 17       	cp	r24, r18
    23da:	93 07       	cpc	r25, r19
    23dc:	90 f2       	brcs	.-92     	; 0x2382 <main+0x232>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
	}

	vfo *curVfo = vfoA;
    23de:	8f a1       	ldd	r24, Y+39	; 0x27
    23e0:	98 a5       	ldd	r25, Y+40	; 0x28
    23e2:	9a 87       	std	Y+10, r25	; 0x0a
    23e4:	89 87       	std	Y+9, r24	; 0x09
	params *param = new params(l);
    23e6:	8e e4       	ldi	r24, 0x4E	; 78
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	93 de       	rcall	.-730    	; 0x2112 <_ZN6paramsnwEj>
    23ec:	8c 01       	movw	r16, r24
    23ee:	89 8d       	ldd	r24, Y+25	; 0x19
    23f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23f2:	bc 01       	movw	r22, r24
    23f4:	c8 01       	movw	r24, r16
    23f6:	a5 d2       	rcall	.+1354   	; 0x2942 <_ZN6paramsC1EP3Lcd>
    23f8:	1c a7       	std	Y+44, r17	; 0x2c
    23fa:	0b a7       	std	Y+43, r16	; 0x2b
	curMode = param->getMode();
    23fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2400:	79 d4       	rcall	.+2290   	; 0x2cf4 <_ZN6params7getModeEv>
    2402:	8b 83       	std	Y+3, r24	; 0x03

	while(1) {

		mode_t newMode = param->getMode();
    2404:	8b a5       	ldd	r24, Y+43	; 0x2b
    2406:	9c a5       	ldd	r25, Y+44	; 0x2c
    2408:	75 d4       	rcall	.+2282   	; 0x2cf4 <_ZN6params7getModeEv>
    240a:	8d a7       	std	Y+45, r24	; 0x2d

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	09 f0       	breq	.+2      	; 0x2414 <main+0x2c4>
    2412:	0d c1       	rjmp	.+538    	; 0x262e <main+0x4de>
    2414:	8d a5       	ldd	r24, Y+45	; 0x2d
    2416:	88 23       	and	r24, r24
    2418:	09 f0       	breq	.+2      	; 0x241c <main+0x2cc>
    241a:	09 c1       	rjmp	.+530    	; 0x262e <main+0x4de>

			band = param->getBand();
    241c:	8b a5       	ldd	r24, Y+43	; 0x2b
    241e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2420:	49 d4       	rcall	.+2194   	; 0x2cb4 <_ZN6params7getBandEv>
    2422:	8c 83       	std	Y+4, r24	; 0x04


			if (param->getVfo() == VFOA) {
    2424:	8b a5       	ldd	r24, Y+43	; 0x2b
    2426:	9c a5       	ldd	r25, Y+44	; 0x2c
    2428:	55 d4       	rcall	.+2218   	; 0x2cd4 <_ZN6params6getVfoEv>
    242a:	98 2f       	mov	r25, r24
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	99 23       	and	r25, r25
    2430:	09 f0       	breq	.+2      	; 0x2434 <main+0x2e4>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	88 23       	and	r24, r24
    2436:	09 f4       	brne	.+2      	; 0x243a <main+0x2ea>
    2438:	79 c0       	rjmp	.+242    	; 0x252c <main+0x3dc>
				curVfo = vfoA;
    243a:	8f a1       	ldd	r24, Y+39	; 0x27
    243c:	98 a5       	ldd	r25, Y+40	; 0x28
    243e:	9a 87       	std	Y+10, r25	; 0x0a
    2440:	89 87       	std	Y+9, r24	; 0x09
				vfoA->getTxDisplayFreq(buf, band);
    2442:	9e 01       	movw	r18, r28
    2444:	22 5c       	subi	r18, 0xC2	; 194
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	8f a1       	ldd	r24, Y+39	; 0x27
    244a:	98 a5       	ldd	r25, Y+40	; 0x28
    244c:	4c 81       	ldd	r20, Y+4	; 0x04
    244e:	b9 01       	movw	r22, r18
    2450:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    2454:	1c 86       	std	Y+12, r1	; 0x0c
    2456:	1b 86       	std	Y+11, r1	; 0x0b
    2458:	24 c0       	rjmp	.+72     	; 0x24a2 <main+0x352>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
    245a:	8b 85       	ldd	r24, Y+11	; 0x0b
    245c:	68 2f       	mov	r22, r24
    245e:	62 95       	swap	r22
    2460:	60 7f       	andi	r22, 0xF0	; 240
    2462:	9e 01       	movw	r18, r28
    2464:	22 5c       	subi	r18, 0xC2	; 194
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	8b 85       	ldd	r24, Y+11	; 0x0b
    246a:	9c 85       	ldd	r25, Y+12	; 0x0c
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	fc 01       	movw	r30, r24
    2472:	50 81       	ld	r21, Z
    2474:	2c a9       	ldd	r18, Y+52	; 0x34
    2476:	3d a9       	ldd	r19, Y+53	; 0x35
    2478:	4e a9       	ldd	r20, Y+54	; 0x36
    247a:	89 a9       	ldd	r24, Y+49	; 0x31
    247c:	9a a9       	ldd	r25, Y+50	; 0x32
    247e:	ab a9       	ldd	r26, Y+51	; 0x33
    2480:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2482:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2484:	59 01       	movw	r10, r18
    2486:	c4 2e       	mov	r12, r20
    2488:	7c 01       	movw	r14, r24
    248a:	0a 2f       	mov	r16, r26
    248c:	26 2f       	mov	r18, r22
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	65 2f       	mov	r22, r21
    2492:	cf 01       	movw	r24, r30
    2494:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>


			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    2498:	8b 85       	ldd	r24, Y+11	; 0x0b
    249a:	9c 85       	ldd	r25, Y+12	; 0x0c
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	9c 87       	std	Y+12, r25	; 0x0c
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	ce 01       	movw	r24, r28
    24a4:	ce 96       	adiw	r24, 0x3e	; 62
    24a6:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    24aa:	9c 01       	movw	r18, r24
    24ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    24b0:	82 17       	cp	r24, r18
    24b2:	93 07       	cpc	r25, r19
    24b4:	90 f2       	brcs	.-92     	; 0x245a <main+0x30a>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    24b6:	9e 01       	movw	r18, r28
    24b8:	22 5c       	subi	r18, 0xC2	; 194
    24ba:	3f 4f       	sbci	r19, 0xFF	; 255
    24bc:	89 a5       	ldd	r24, Y+41	; 0x29
    24be:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c0:	4c 81       	ldd	r20, Y+4	; 0x04
    24c2:	b9 01       	movw	r22, r18
    24c4:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    24c8:	1e 86       	std	Y+14, r1	; 0x0e
    24ca:	1d 86       	std	Y+13, r1	; 0x0d
    24cc:	24 c0       	rjmp	.+72     	; 0x2516 <main+0x3c6>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    24ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d0:	68 2f       	mov	r22, r24
    24d2:	62 95       	swap	r22
    24d4:	60 7f       	andi	r22, 0xF0	; 240
    24d6:	9e 01       	movw	r18, r28
    24d8:	22 5c       	subi	r18, 0xC2	; 194
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	fc 01       	movw	r30, r24
    24e6:	50 81       	ld	r21, Z
    24e8:	2c a9       	ldd	r18, Y+52	; 0x34
    24ea:	3d a9       	ldd	r19, Y+53	; 0x35
    24ec:	4e a9       	ldd	r20, Y+54	; 0x36
    24ee:	8f a9       	ldd	r24, Y+55	; 0x37
    24f0:	98 ad       	ldd	r25, Y+56	; 0x38
    24f2:	a9 ad       	ldd	r26, Y+57	; 0x39
    24f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    24f6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    24f8:	59 01       	movw	r10, r18
    24fa:	c4 2e       	mov	r12, r20
    24fc:	7c 01       	movw	r14, r24
    24fe:	0a 2f       	mov	r16, r26
    2500:	26 2f       	mov	r18, r22
    2502:	44 e2       	ldi	r20, 0x24	; 36
    2504:	65 2f       	mov	r22, r21
    2506:	cf 01       	movw	r24, r30
    2508:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	9e 87       	std	Y+14, r25	; 0x0e
    2514:	8d 87       	std	Y+13, r24	; 0x0d
    2516:	ce 01       	movw	r24, r28
    2518:	ce 96       	adiw	r24, 0x3e	; 62
    251a:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    251e:	9c 01       	movw	r18, r24
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	82 17       	cp	r24, r18
    2526:	93 07       	cpc	r25, r19
    2528:	90 f2       	brcs	.-92     	; 0x24ce <main+0x37e>
    252a:	78 c0       	rjmp	.+240    	; 0x261c <main+0x4cc>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

			} else {
				curVfo = vfoB;
    252c:	89 a5       	ldd	r24, Y+41	; 0x29
    252e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2530:	9a 87       	std	Y+10, r25	; 0x0a
    2532:	89 87       	std	Y+9, r24	; 0x09
				vfoA->getTxDisplayFreq(buf, band);
    2534:	9e 01       	movw	r18, r28
    2536:	22 5c       	subi	r18, 0xC2	; 194
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	8f a1       	ldd	r24, Y+39	; 0x27
    253c:	98 a5       	ldd	r25, Y+40	; 0x28
    253e:	4c 81       	ldd	r20, Y+4	; 0x04
    2540:	b9 01       	movw	r22, r18
    2542:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    2546:	18 8a       	std	Y+16, r1	; 0x10
    2548:	1f 86       	std	Y+15, r1	; 0x0f
    254a:	24 c0       	rjmp	.+72     	; 0x2594 <main+0x444>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	68 2f       	mov	r22, r24
    2550:	62 95       	swap	r22
    2552:	60 7f       	andi	r22, 0xF0	; 240
    2554:	9e 01       	movw	r18, r28
    2556:	22 5c       	subi	r18, 0xC2	; 194
    2558:	3f 4f       	sbci	r19, 0xFF	; 255
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	98 89       	ldd	r25, Y+16	; 0x10
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	fc 01       	movw	r30, r24
    2564:	50 81       	ld	r21, Z
    2566:	2c a9       	ldd	r18, Y+52	; 0x34
    2568:	3d a9       	ldd	r19, Y+53	; 0x35
    256a:	4e a9       	ldd	r20, Y+54	; 0x36
    256c:	8f a9       	ldd	r24, Y+55	; 0x37
    256e:	98 ad       	ldd	r25, Y+56	; 0x38
    2570:	a9 ad       	ldd	r26, Y+57	; 0x39
    2572:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2574:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2576:	59 01       	movw	r10, r18
    2578:	c4 2e       	mov	r12, r20
    257a:	7c 01       	movw	r14, r24
    257c:	0a 2f       	mov	r16, r26
    257e:	26 2f       	mov	r18, r22
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	65 2f       	mov	r22, r21
    2584:	cf 01       	movw	r24, r30
    2586:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    258a:	8f 85       	ldd	r24, Y+15	; 0x0f
    258c:	98 89       	ldd	r25, Y+16	; 0x10
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	98 8b       	std	Y+16, r25	; 0x10
    2592:	8f 87       	std	Y+15, r24	; 0x0f
    2594:	ce 01       	movw	r24, r28
    2596:	ce 96       	adiw	r24, 0x3e	; 62
    2598:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    259c:	9c 01       	movw	r18, r24
    259e:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a0:	98 89       	ldd	r25, Y+16	; 0x10
    25a2:	82 17       	cp	r24, r18
    25a4:	93 07       	cpc	r25, r19
    25a6:	90 f2       	brcs	.-92     	; 0x254c <main+0x3fc>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    25a8:	9e 01       	movw	r18, r28
    25aa:	22 5c       	subi	r18, 0xC2	; 194
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	89 a5       	ldd	r24, Y+41	; 0x29
    25b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b2:	4c 81       	ldd	r20, Y+4	; 0x04
    25b4:	b9 01       	movw	r22, r18
    25b6:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    25ba:	1a 8a       	std	Y+18, r1	; 0x12
    25bc:	19 8a       	std	Y+17, r1	; 0x11
    25be:	24 c0       	rjmp	.+72     	; 0x2608 <main+0x4b8>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	68 2f       	mov	r22, r24
    25c4:	62 95       	swap	r22
    25c6:	60 7f       	andi	r22, 0xF0	; 240
    25c8:	9e 01       	movw	r18, r28
    25ca:	22 5c       	subi	r18, 0xC2	; 194
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	89 89       	ldd	r24, Y+17	; 0x11
    25d0:	9a 89       	ldd	r25, Y+18	; 0x12
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	fc 01       	movw	r30, r24
    25d8:	50 81       	ld	r21, Z
    25da:	2c a9       	ldd	r18, Y+52	; 0x34
    25dc:	3d a9       	ldd	r19, Y+53	; 0x35
    25de:	4e a9       	ldd	r20, Y+54	; 0x36
    25e0:	89 a9       	ldd	r24, Y+49	; 0x31
    25e2:	9a a9       	ldd	r25, Y+50	; 0x32
    25e4:	ab a9       	ldd	r26, Y+51	; 0x33
    25e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    25e8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    25ea:	59 01       	movw	r10, r18
    25ec:	c4 2e       	mov	r12, r20
    25ee:	7c 01       	movw	r14, r24
    25f0:	0a 2f       	mov	r16, r26
    25f2:	26 2f       	mov	r18, r22
    25f4:	44 e2       	ldi	r20, 0x24	; 36
    25f6:	65 2f       	mov	r22, r21
    25f8:	cf 01       	movw	r24, r30
    25fa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    25fe:	89 89       	ldd	r24, Y+17	; 0x11
    2600:	9a 89       	ldd	r25, Y+18	; 0x12
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
    2608:	ce 01       	movw	r24, r28
    260a:	ce 96       	adiw	r24, 0x3e	; 62
    260c:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    2610:	9c 01       	movw	r18, r24
    2612:	89 89       	ldd	r24, Y+17	; 0x11
    2614:	9a 89       	ldd	r25, Y+18	; 0x12
    2616:	82 17       	cp	r24, r18
    2618:	93 07       	cpc	r25, r19
    261a:	90 f2       	brcs	.-92     	; 0x25c0 <main+0x470>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
				}

			}

			curVfo->setStep(param->getStep());
    261c:	8b a5       	ldd	r24, Y+43	; 0x2b
    261e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2620:	39 d3       	rcall	.+1650   	; 0x2c94 <_ZN6params7getStepEv>
    2622:	28 2f       	mov	r18, r24
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	62 2f       	mov	r22, r18
    262a:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN3vfo7setStepE6step_t>
		}
		curMode = newMode;
    262e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2630:	8b 83       	std	Y+3, r24	; 0x03

		switch (curMode) {
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	91 05       	cpc	r25, r1
    263c:	39 f0       	breq	.+14     	; 0x264c <main+0x4fc>
    263e:	82 30       	cpi	r24, 0x02	; 2
    2640:	91 05       	cpc	r25, r1
    2642:	09 f4       	brne	.+2      	; 0x2646 <main+0x4f6>
    2644:	84 c0       	rjmp	.+264    	; 0x274e <main+0x5fe>
    2646:	89 2b       	or	r24, r25
    2648:	59 f0       	breq	.+22     	; 0x2660 <main+0x510>
    264a:	82 c0       	rjmp	.+260    	; 0x2750 <main+0x600>

			case MODE_PARAMS:
				param->updateEnter(enc, pb, l);
    264c:	29 8d       	ldd	r18, Y+25	; 0x19
    264e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2650:	49 a1       	ldd	r20, Y+33	; 0x21
    2652:	5a a1       	ldd	r21, Y+34	; 0x22
    2654:	6d a1       	ldd	r22, Y+37	; 0x25
    2656:	7e a1       	ldd	r23, Y+38	; 0x26
    2658:	8b a5       	ldd	r24, Y+43	; 0x2b
    265a:	9c a5       	ldd	r25, Y+44	; 0x2c
    265c:	6f d3       	rcall	.+1758   	; 0x2d3c <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>
				break;
    265e:	78 c0       	rjmp	.+240    	; 0x2750 <main+0x600>
			//
			// for now, no keyer, just straight key
			//

			case MODE_NORMAL:
				if (pb->hasEvent()) {
    2660:	89 a1       	ldd	r24, Y+33	; 0x21
    2662:	9a a1       	ldd	r25, Y+34	; 0x22
    2664:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZN2Sw8hasEventEv>
    2668:	88 23       	and	r24, r24
    266a:	f9 f0       	breq	.+62     	; 0x26aa <main+0x55a>
					if (pb->getEvent() == EV_CLOSE) {
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9a a1       	ldd	r25, Y+34	; 0x22
    2670:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
    2674:	98 2f       	mov	r25, r24
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	92 30       	cpi	r25, 0x02	; 2
    267a:	09 f0       	breq	.+2      	; 0x267e <main+0x52e>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	88 23       	and	r24, r24
    2680:	79 f4       	brne	.+30     	; 0x26a0 <main+0x550>

					} else if (pb->getEvent() == EV_OPEN) {
    2682:	89 a1       	ldd	r24, Y+33	; 0x21
    2684:	9a a1       	ldd	r25, Y+34	; 0x22
    2686:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
    268a:	98 2f       	mov	r25, r24
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	91 30       	cpi	r25, 0x01	; 1
    2690:	09 f0       	breq	.+2      	; 0x2694 <main+0x544>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	88 23       	and	r24, r24
    2696:	21 f0       	breq	.+8      	; 0x26a0 <main+0x550>
						param->setMode(MODE_PARAMS);
    2698:	8b a5       	ldd	r24, Y+43	; 0x2b
    269a:	9c a5       	ldd	r25, Y+44	; 0x2c
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	3a d3       	rcall	.+1652   	; 0x2d14 <_ZN6params7setModeE7_mode_t>
					}
					pb->clearEvent();
    26a0:	89 a1       	ldd	r24, Y+33	; 0x21
    26a2:	9a a1       	ldd	r25, Y+34	; 0x22
    26a4:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN2Sw10clearEventEv>
					break;
    26a8:	53 c0       	rjmp	.+166    	; 0x2750 <main+0x600>
				}
		
				if (enc->hasEvent()) {
    26aa:	8d a1       	ldd	r24, Y+37	; 0x25
    26ac:	9e a1       	ldd	r25, Y+38	; 0x26
    26ae:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Encoder8hasEventEv>
    26b2:	88 23       	and	r24, r24
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <main+0x568>
    26b6:	4a c0       	rjmp	.+148    	; 0x274c <main+0x5fc>
					uint16_t line;
					curVfo->update(band);
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	6c 81       	ldd	r22, Y+4	; 0x04
    26be:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <_ZN3vfo6updateEh>
					enc->clearEvent();
    26c2:	8d a1       	ldd	r24, Y+37	; 0x25
    26c4:	9e a1       	ldd	r25, Y+38	; 0x26
    26c6:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN7Encoder10clearEventEv>

					curVfo->getTxDisplayFreq(buf, band);
    26ca:	9e 01       	movw	r18, r28
    26cc:	22 5c       	subi	r18, 0xC2	; 194
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	4c 81       	ldd	r20, Y+4	; 0x04
    26d6:	b9 01       	movw	r22, r18
    26d8:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>
					line = curVfo->getLine();
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	0e 94 a3 23 	call	0x4746	; 0x4746 <_ZN3vfo7getLineEv>
    26e4:	9f a7       	std	Y+47, r25	; 0x2f
    26e6:	8e a7       	std	Y+46, r24	; 0x2e
					for (size_t i = 0; i < strlen(buf); i++) {
    26e8:	1c 8a       	std	Y+20, r1	; 0x14
    26ea:	1b 8a       	std	Y+19, r1	; 0x13
    26ec:	25 c0       	rjmp	.+74     	; 0x2738 <main+0x5e8>
						g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f, b);
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	78 2f       	mov	r23, r24
    26f2:	72 95       	swap	r23
    26f4:	70 7f       	andi	r23, 0xF0	; 240
    26f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    26f8:	9e 01       	movw	r18, r28
    26fa:	22 5c       	subi	r18, 0xC2	; 194
    26fc:	3f 4f       	sbci	r19, 0xFF	; 255
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	82 0f       	add	r24, r18
    2704:	93 1f       	adc	r25, r19
    2706:	fc 01       	movw	r30, r24
    2708:	50 81       	ld	r21, Z
    270a:	2c a9       	ldd	r18, Y+52	; 0x34
    270c:	3d a9       	ldd	r19, Y+53	; 0x35
    270e:	4e a9       	ldd	r20, Y+54	; 0x36
    2710:	89 a9       	ldd	r24, Y+49	; 0x31
    2712:	9a a9       	ldd	r25, Y+50	; 0x32
    2714:	ab a9       	ldd	r26, Y+51	; 0x33
    2716:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2718:	fc 8d       	ldd	r31, Y+28	; 0x1c
    271a:	59 01       	movw	r10, r18
    271c:	c4 2e       	mov	r12, r20
    271e:	7c 01       	movw	r14, r24
    2720:	0a 2f       	mov	r16, r26
    2722:	27 2f       	mov	r18, r23
    2724:	46 2f       	mov	r20, r22
    2726:	65 2f       	mov	r22, r21
    2728:	cf 01       	movw	r24, r30
    272a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
					curVfo->update(band);
					enc->clearEvent();

					curVfo->getTxDisplayFreq(buf, band);
					line = curVfo->getLine();
					for (size_t i = 0; i < strlen(buf); i++) {
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	ce 01       	movw	r24, r28
    273a:	ce 96       	adiw	r24, 0x3e	; 62
    273c:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <strlen>
    2740:	9c 01       	movw	r18, r24
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	9c 89       	ldd	r25, Y+20	; 0x14
    2746:	82 17       	cp	r24, r18
    2748:	93 07       	cpc	r25, r19
    274a:	88 f2       	brcs	.-94     	; 0x26ee <main+0x59e>
						g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f, b);
					}
				}
				break;
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <main+0x600>

			case MODE_SETUP:
				break;
    274e:	00 00       	nop
		}

		if (dot->hasEvent()) {
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2754:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZN2Sw8hasEventEv>
    2758:	88 23       	and	r24, r24
    275a:	09 f4       	brne	.+2      	; 0x275e <main+0x60e>
    275c:	4c c0       	rjmp	.+152    	; 0x27f6 <main+0x6a6>
			if (dot->getEvent() == EV_CLOSE) {
    275e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2760:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2762:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
    2766:	98 2f       	mov	r25, r24
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	92 30       	cpi	r25, 0x02	; 2
    276c:	09 f0       	breq	.+2      	; 0x2770 <main+0x620>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	88 23       	and	r24, r24
    2772:	f9 f0       	breq	.+62     	; 0x27b2 <main+0x662>
				freq = curVfo->getTxFreq(band);
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	6c 81       	ldd	r22, Y+4	; 0x04
    277a:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN3vfo9getTxFreqE5_band>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8a af       	std	Y+58, r24	; 0x3a
    2784:	9b af       	std	Y+59, r25	; 0x3b
    2786:	ac af       	std	Y+60, r26	; 0x3c
    2788:	bd af       	std	Y+61, r27	; 0x3d
				dds(freq);
    278a:	8a ad       	ldd	r24, Y+58	; 0x3a
    278c:	9b ad       	ldd	r25, Y+59	; 0x3b
    278e:	ac ad       	ldd	r26, Y+60	; 0x3c
    2790:	bd ad       	ldd	r27, Y+61	; 0x3d
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 29 08 	call	0x1052	; 0x1052 <dds>
				reg = PORTD;
    279a:	8b e2       	ldi	r24, 0x2B	; 43
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	fc 01       	movw	r30, r24
    27a0:	80 81       	ld	r24, Z
    27a2:	88 ab       	std	Y+48, r24	; 0x30
				PORTD = reg | RLY_MSK;
    27a4:	8b e2       	ldi	r24, 0x2B	; 43
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	28 a9       	ldd	r18, Y+48	; 0x30
    27aa:	20 64       	ori	r18, 0x40	; 64
    27ac:	fc 01       	movw	r30, r24
    27ae:	20 83       	st	Z, r18
    27b0:	1e c0       	rjmp	.+60     	; 0x27ee <main+0x69e>

			} else {
				freq = curVfo->getRxFreq(band);
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	6c 81       	ldd	r22, Y+4	; 0x04
    27b8:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZN3vfo9getRxFreqE5_band>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8a af       	std	Y+58, r24	; 0x3a
    27c2:	9b af       	std	Y+59, r25	; 0x3b
    27c4:	ac af       	std	Y+60, r26	; 0x3c
    27c6:	bd af       	std	Y+61, r27	; 0x3d
				dds(freq);
    27c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    27ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    27cc:	ac ad       	ldd	r26, Y+60	; 0x3c
    27ce:	bd ad       	ldd	r27, Y+61	; 0x3d
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 29 08 	call	0x1052	; 0x1052 <dds>
				reg = PORTD;
    27d8:	8b e2       	ldi	r24, 0x2B	; 43
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	fc 01       	movw	r30, r24
    27de:	80 81       	ld	r24, Z
    27e0:	88 ab       	std	Y+48, r24	; 0x30
				PORTD = reg & ~RLY_MSK;
    27e2:	8b e2       	ldi	r24, 0x2B	; 43
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	28 a9       	ldd	r18, Y+48	; 0x30
    27e8:	2f 7b       	andi	r18, 0xBF	; 191
    27ea:	fc 01       	movw	r30, r24
    27ec:	20 83       	st	Z, r18
			}
			dot->clearEvent();
    27ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27f2:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN2Sw10clearEventEv>
		}

		if (dash->hasEvent()) {
    27f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f8:	98 a1       	ldd	r25, Y+32	; 0x20
    27fa:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZN2Sw8hasEventEv>
    27fe:	88 23       	and	r24, r24
    2800:	81 f1       	breq	.+96     	; 0x2862 <main+0x712>
			if (dash->getEvent() == EV_CLOSE) {
    2802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2804:	98 a1       	ldd	r25, Y+32	; 0x20
    2806:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN2Sw8getEventEv>
    280a:	98 2f       	mov	r25, r24
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	92 30       	cpi	r25, 0x02	; 2
    2810:	09 f0       	breq	.+2      	; 0x2814 <main+0x6c4>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	88 23       	and	r24, r24
    2816:	59 f0       	breq	.+22     	; 0x282e <main+0x6de>
				sprintf(buf,"DASH_CLOSE");
    2818:	ce 01       	movw	r24, r28
    281a:	ce 96       	adiw	r24, 0x3e	; 62
    281c:	2b e0       	ldi	r18, 0x0B	; 11
    281e:	ee e4       	ldi	r30, 0x4E	; 78
    2820:	f2 e0       	ldi	r31, 0x02	; 2
    2822:	dc 01       	movw	r26, r24
    2824:	01 90       	ld	r0, Z+
    2826:	0d 92       	st	X+, r0
    2828:	2a 95       	dec	r18
    282a:	e1 f7       	brne	.-8      	; 0x2824 <main+0x6d4>
    282c:	0a c0       	rjmp	.+20     	; 0x2842 <main+0x6f2>
				} else {
				sprintf(buf,"DASH_OPEN ");
    282e:	ce 01       	movw	r24, r28
    2830:	ce 96       	adiw	r24, 0x3e	; 62
    2832:	2b e0       	ldi	r18, 0x0B	; 11
    2834:	e9 e5       	ldi	r30, 0x59	; 89
    2836:	f2 e0       	ldi	r31, 0x02	; 2
    2838:	dc 01       	movw	r26, r24
    283a:	01 90       	ld	r0, Z+
    283c:	0d 92       	st	X+, r0
    283e:	2a 95       	dec	r18
    2840:	e1 f7       	brne	.-8      	; 0x283a <main+0x6ea>
			}
			dash->clearEvent();
    2842:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2844:	98 a1       	ldd	r25, Y+32	; 0x20
    2846:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN2Sw10clearEventEv>
			l->gotoxy(9,0);
    284a:	89 8d       	ldd	r24, Y+25	; 0x19
    284c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	69 e0       	ldi	r22, 0x09	; 9
    2852:	4d db       	rcall	.-2406   	; 0x1eee <_ZN3Lcd6gotoxyEhh>
			l->puts(buf);
    2854:	9e 01       	movw	r18, r28
    2856:	22 5c       	subi	r18, 0xC2	; 194
    2858:	3f 4f       	sbci	r19, 0xFF	; 255
    285a:	89 8d       	ldd	r24, Y+25	; 0x19
    285c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    285e:	b9 01       	movw	r22, r18
    2860:	bb da       	rcall	.-2698   	; 0x1dd8 <_ZN3Lcd4putsEPKc>
		}

		if (et->expired()) {
    2862:	8b a1       	ldd	r24, Y+35	; 0x23
    2864:	9c a1       	ldd	r25, Y+36	; 0x24
    2866:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN11ElapsedTime7expiredEv>
    286a:	88 23       	and	r24, r24
    286c:	31 f1       	breq	.+76     	; 0x28ba <main+0x76a>
			g->gotoxy(9,10);
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	4a e0       	ldi	r20, 0x0A	; 10
    2874:	69 e0       	ldi	r22, 0x09	; 9
    2876:	3b db       	rcall	.-2442   	; 0x1eee <_ZN3Lcd6gotoxyEhh>
			fprintf(lcdfp, "Pass %d\n", pass++);
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	9c 01       	movw	r18, r24
    287e:	2f 5f       	subi	r18, 0xFF	; 255
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	3a 83       	std	Y+2, r19	; 0x02
    2884:	29 83       	std	Y+1, r18	; 0x01
    2886:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <lcdfp>
    288a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <lcdfp+0x1>
    288e:	49 2f       	mov	r20, r25
    2890:	4f 93       	push	r20
    2892:	8f 93       	push	r24
    2894:	84 e6       	ldi	r24, 0x64	; 100
    2896:	92 e0       	ldi	r25, 0x02	; 2
    2898:	89 2f       	mov	r24, r25
    289a:	8f 93       	push	r24
    289c:	84 e6       	ldi	r24, 0x64	; 100
    289e:	92 e0       	ldi	r25, 0x02	; 2
    28a0:	8f 93       	push	r24
    28a2:	83 2f       	mov	r24, r19
    28a4:	8f 93       	push	r24
    28a6:	82 2f       	mov	r24, r18
    28a8:	8f 93       	push	r24
    28aa:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fprintf>
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
		}
	}
    28ba:	a4 cd       	rjmp	.-1208   	; 0x2404 <main+0x2b4>

000028bc <_Z6memcpyPvPKvj>:

pixColor  fg_red = {0xfc,0x0,0x0};
pixColor  fg_white = {0xfc,0xfc,0xfc};


void * memcpy(void *dest, const void* src, size_t cnt) {
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	2a 97       	sbiw	r28, 0x0a	; 10
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	78 87       	std	Y+8, r23	; 0x08
    28d6:	6f 83       	std	Y+7, r22	; 0x07
    28d8:	5a 87       	std	Y+10, r21	; 0x0a
    28da:	49 87       	std	Y+9, r20	; 0x09
	char *pdst = (char *) dest;
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	char *psrc = (char *)src;
    28e4:	8f 81       	ldd	r24, Y+7	; 0x07
    28e6:	98 85       	ldd	r25, Y+8	; 0x08
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03

	while (cnt--) {
    28ec:	12 c0       	rjmp	.+36     	; 0x2912 <_Z6memcpyPvPKvj+0x56>
		*pdst++ = *psrc++;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	9c 01       	movw	r18, r24
    28f4:	2f 5f       	subi	r18, 0xFF	; 255
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	3a 83       	std	Y+2, r19	; 0x02
    28fa:	29 83       	std	Y+1, r18	; 0x01
    28fc:	2b 81       	ldd	r18, Y+3	; 0x03
    28fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2900:	a9 01       	movw	r20, r18
    2902:	4f 5f       	subi	r20, 0xFF	; 255
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	5c 83       	std	Y+4, r21	; 0x04
    2908:	4b 83       	std	Y+3, r20	; 0x03
    290a:	f9 01       	movw	r30, r18
    290c:	20 81       	ld	r18, Z
    290e:	fc 01       	movw	r30, r24
    2910:	20 83       	st	Z, r18

void * memcpy(void *dest, const void* src, size_t cnt) {
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	9c 01       	movw	r18, r24
    2918:	21 50       	subi	r18, 0x01	; 1
    291a:	31 09       	sbc	r19, r1
    291c:	3a 87       	std	Y+10, r19	; 0x0a
    291e:	29 87       	std	Y+9, r18	; 0x09
    2920:	21 e0       	ldi	r18, 0x01	; 1
    2922:	89 2b       	or	r24, r25
    2924:	09 f4       	brne	.+2      	; 0x2928 <_Z6memcpyPvPKvj+0x6c>
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	22 23       	and	r18, r18
    292a:	09 f7       	brne	.-62     	; 0x28ee <_Z6memcpyPvPKvj+0x32>
		*pdst++ = *psrc++;
	}
	return dest;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2930:	2a 96       	adiw	r28, 0x0a	; 10
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <_ZN6paramsC1EP3Lcd>:


params::params(Lcd *l) {
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	00 d0       	rcall	.+0      	; 0x2948 <_ZN6paramsC1EP3Lcd+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <_ZN6paramsC1EP3Lcd+0x8>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	7c 83       	std	Y+4, r23	; 0x04
    2954:	6b 83       	std	Y+3, r22	; 0x03
	step = STEP_100HZ;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	21 e0       	ldi	r18, 0x01	; 1
    295c:	fc 01       	movw	r30, r24
    295e:	20 83       	st	Z, r18
	band = BAND_40;
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	22 e0       	ldi	r18, 0x02	; 2
    2966:	fc 01       	movw	r30, r24
    2968:	21 83       	std	Z+1, r18	; 0x01
	vfo = VFOA;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	fc 01       	movw	r30, r24
    2970:	12 82       	std	Z+2, r1	; 0x02
	activeVfo = RX;
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	fc 01       	movw	r30, r24
    2978:	13 82       	std	Z+3, r1	; 0x03
	mode = MODE_NORMAL;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	fc 01       	movw	r30, r24
    2980:	14 82       	std	Z+4, r1	; 0x04
	key = KEY_ST;
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	fc 01       	movw	r30, r24
    2988:	15 82       	std	Z+5, r1	; 0x05
	speed = 18;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	22 e1       	ldi	r18, 0x12	; 18
    2990:	fc 01       	movw	r30, r24
    2992:	26 83       	std	Z+6, r18	; 0x06

	memcpy(param_display,default_param_display, sizeof(param_display));
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	0b 96       	adiw	r24, 0x0b	; 11
    299a:	42 e4       	ldi	r20, 0x42	; 66
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	60 e5       	ldi	r22, 0x50	; 80
    29a0:	71 e0       	ldi	r23, 0x01	; 1
    29a2:	8c df       	rcall	.-232    	; 0x28bc <_Z6memcpyPvPKvj>
	initParams(l);
    29a4:	2b 81       	ldd	r18, Y+3	; 0x03
    29a6:	3c 81       	ldd	r19, Y+4	; 0x04
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	b9 01       	movw	r22, r18
    29ae:	07 d0       	rcall	.+14     	; 0x29be <_ZN6params10initParamsEP3Lcd>
}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	08 95       	ret

000029be <_ZN6params10initParamsEP3Lcd>:


void params::initParams(Lcd *lcd) {
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	6a 97       	sbiw	r28, 0x1a	; 26
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	98 8f       	std	Y+24, r25	; 0x18
    29d4:	8f 8b       	std	Y+23, r24	; 0x17
    29d6:	7a 8f       	std	Y+26, r23	; 0x1a
    29d8:	69 8f       	std	Y+25, r22	; 0x19
	uint16_t line;
	uint16_t col;
	const char *valp = NULL;
    29da:	1a 82       	std	Y+2, r1	; 0x02
    29dc:	19 82       	std	Y+1, r1	; 0x01
	char buf[16];

	curParam = PARAM_STEP;
    29de:	8f 89       	ldd	r24, Y+23	; 0x17
    29e0:	98 8d       	ldd	r25, Y+24	; 0x18
    29e2:	83 5b       	subi	r24, 0xB3	; 179
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	fc 01       	movw	r30, r24
    29e8:	10 82       	st	Z, r1

	while (curParam != PARAM_END) {
    29ea:	3c c1       	rjmp	.+632    	; 0x2c64 <_ZN6params10initParamsEP3Lcd+0x2a6>
		line = param_display[curParam].label_psn.line;
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	98 8d       	ldd	r25, Y+24	; 0x18
    29f0:	83 5b       	subi	r24, 0xB3	; 179
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	fc 01       	movw	r30, r24
    29f6:	80 81       	ld	r24, Z
    29f8:	48 2f       	mov	r20, r24
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	2f 89       	ldd	r18, Y+23	; 0x17
    29fe:	38 8d       	ldd	r19, Y+24	; 0x18
    2a00:	6b e0       	ldi	r22, 0x0B	; 11
    2a02:	64 9f       	mul	r22, r20
    2a04:	c0 01       	movw	r24, r0
    2a06:	65 9f       	mul	r22, r21
    2a08:	90 0d       	add	r25, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	82 0f       	add	r24, r18
    2a0e:	93 1f       	adc	r25, r19
    2a10:	0c 96       	adiw	r24, 0x0c	; 12
    2a12:	fc 01       	movw	r30, r24
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
		col =  param_display[curParam].label_psn.col;
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	83 5b       	subi	r24, 0xB3	; 179
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	fc 01       	movw	r30, r24
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	2f 89       	ldd	r18, Y+23	; 0x17
    2a2e:	38 8d       	ldd	r19, Y+24	; 0x18
    2a30:	6b e0       	ldi	r22, 0x0B	; 11
    2a32:	64 9f       	mul	r22, r20
    2a34:	c0 01       	movw	r24, r0
    2a36:	65 9f       	mul	r22, r21
    2a38:	90 0d       	add	r25, r0
    2a3a:	11 24       	eor	r1, r1
    2a3c:	82 0f       	add	r24, r18
    2a3e:	93 1f       	adc	r25, r19
    2a40:	0e 96       	adiw	r24, 0x0e	; 14
    2a42:	fc 01       	movw	r30, r24
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		lcd->gotoxy(line,col);
    2a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	89 8d       	ldd	r24, Y+25	; 0x19
    2a52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a54:	43 2f       	mov	r20, r19
    2a56:	62 2f       	mov	r22, r18
    2a58:	4a da       	rcall	.-2924   	; 0x1eee <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fg_white);
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	83 5b       	subi	r24, 0xB3	; 179
    2a60:	9f 4f       	sbci	r25, 0xFF	; 255
    2a62:	fc 01       	movw	r30, r24
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	2f 89       	ldd	r18, Y+23	; 0x17
    2a6c:	38 8d       	ldd	r19, Y+24	; 0x18
    2a6e:	6b e0       	ldi	r22, 0x0B	; 11
    2a70:	64 9f       	mul	r22, r20
    2a72:	c0 01       	movw	r24, r0
    2a74:	65 9f       	mul	r22, r21
    2a76:	90 0d       	add	r25, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	82 0f       	add	r24, r18
    2a7c:	93 1f       	adc	r25, r19
    2a7e:	40 96       	adiw	r24, 0x10	; 16
    2a80:	fc 01       	movw	r30, r24
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <fg_white>
    2a8a:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <fg_white+0x1>
    2a8e:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <fg_white+0x2>
    2a92:	e9 8d       	ldd	r30, Y+25	; 0x19
    2a94:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2a96:	9c 01       	movw	r18, r24
    2a98:	4a 2f       	mov	r20, r26
    2a9a:	cf 01       	movw	r24, r30
    2a9c:	d1 d9       	rcall	.-3166   	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>

		line = param_display[curParam].val_psn.line;
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	83 5b       	subi	r24, 0xB3	; 179
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	80 81       	ld	r24, Z
    2aaa:	48 2f       	mov	r20, r24
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	2f 89       	ldd	r18, Y+23	; 0x17
    2ab0:	38 8d       	ldd	r19, Y+24	; 0x18
    2ab2:	6b e0       	ldi	r22, 0x0B	; 11
    2ab4:	64 9f       	mul	r22, r20
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	65 9f       	mul	r22, r21
    2aba:	90 0d       	add	r25, r0
    2abc:	11 24       	eor	r1, r1
    2abe:	82 0f       	add	r24, r18
    2ac0:	93 1f       	adc	r25, r19
    2ac2:	42 96       	adiw	r24, 0x12	; 18
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	9c 83       	std	Y+4, r25	; 0x04
    2acc:	8b 83       	std	Y+3, r24	; 0x03
		col =  param_display[curParam].val_psn.col;
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	83 5b       	subi	r24, 0xB3	; 179
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	48 2f       	mov	r20, r24
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	2f 89       	ldd	r18, Y+23	; 0x17
    2ae0:	38 8d       	ldd	r19, Y+24	; 0x18
    2ae2:	6b e0       	ldi	r22, 0x0B	; 11
    2ae4:	64 9f       	mul	r22, r20
    2ae6:	c0 01       	movw	r24, r0
    2ae8:	65 9f       	mul	r22, r21
    2aea:	90 0d       	add	r25, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	82 0f       	add	r24, r18
    2af0:	93 1f       	adc	r25, r19
    2af2:	44 96       	adiw	r24, 0x14	; 20
    2af4:	fc 01       	movw	r30, r24
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	8d 83       	std	Y+5, r24	; 0x05
		lcd->gotoxy(line,col);
    2afe:	3d 81       	ldd	r19, Y+5	; 0x05
    2b00:	2b 81       	ldd	r18, Y+3	; 0x03
    2b02:	89 8d       	ldd	r24, Y+25	; 0x19
    2b04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b06:	43 2f       	mov	r20, r19
    2b08:	62 2f       	mov	r22, r18
    2b0a:	f1 d9       	rcall	.-3102   	; 0x1eee <_ZN3Lcd6gotoxyEhh>
		switch(curParam) {
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	83 5b       	subi	r24, 0xB3	; 179
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	fc 01       	movw	r30, r24
    2b16:	80 81       	ld	r24, Z
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	91 05       	cpc	r25, r1
    2b20:	99 f1       	breq	.+102    	; 0x2b88 <_ZN6params10initParamsEP3Lcd+0x1ca>
    2b22:	83 30       	cpi	r24, 0x03	; 3
    2b24:	91 05       	cpc	r25, r1
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <_ZN6params10initParamsEP3Lcd+0x174>
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <_ZN6params10initParamsEP3Lcd+0x18a>
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	e1 f0       	breq	.+56     	; 0x2b68 <_ZN6params10initParamsEP3Lcd+0x1aa>
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
				break;
						
			default:
				break;
    2b30:	7d c0       	rjmp	.+250    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
		lcd->puts(param_display[curParam].label, fg_white);

		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
    2b32:	84 30       	cpi	r24, 0x04	; 4
    2b34:	91 05       	cpc	r25, r1
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <_ZN6params10initParamsEP3Lcd+0x17c>
    2b38:	47 c0       	rjmp	.+142    	; 0x2bc8 <_ZN6params10initParamsEP3Lcd+0x20a>
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	a4 f1       	brlt	.+104    	; 0x2ba8 <_ZN6params10initParamsEP3Lcd+0x1ea>
    2b40:	05 97       	sbiw	r24, 0x05	; 5
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <_ZN6params10initParamsEP3Lcd+0x188>
    2b44:	63 c0       	rjmp	.+198    	; 0x2c0c <_ZN6params10initParamsEP3Lcd+0x24e>
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
				break;
						
			default:
				break;
    2b46:	72 c0       	rjmp	.+228    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
			case PARAM_STEP:
				valp = step_strings[step];
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	8a 5c       	subi	r24, 0xCA	; 202
    2b5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01
				break;	
    2b66:	62 c0       	rjmp	.+196    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
				
			case PARAM_BAND:
				valp = band_strings[band];
    2b68:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	81 81       	ldd	r24, Z+1	; 0x01
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	8c 5d       	subi	r24, 0xDC	; 220
    2b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
				break;
    2b86:	52 c0       	rjmp	.+164    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
				
			case PARAM_VFO:
				valp = vfo_strings[vfo];
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	80 5c       	subi	r24, 0xC0	; 192
    2b9a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
				break;
    2ba6:	42 c0       	rjmp	.+132    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
			
			case PARAM_KEY:
				valp = key_strings[key];
    2ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    2baa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bac:	fc 01       	movw	r30, r24
    2bae:	85 81       	ldd	r24, Z+5	; 0x05
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	86 5b       	subi	r24, 0xB6	; 182
    2bba:	9e 4f       	sbci	r25, 0xFE	; 254
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
				break;
    2bc6:	32 c0       	rjmp	.+100    	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    2bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bca:	98 8d       	ldd	r25, Y+24	; 0x18
    2bcc:	fc 01       	movw	r30, r24
    2bce:	86 81       	ldd	r24, Z+6	; 0x06
    2bd0:	88 2f       	mov	r24, r24
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	29 2f       	mov	r18, r25
    2bd6:	2f 93       	push	r18
    2bd8:	8f 93       	push	r24
    2bda:	8e ed       	ldi	r24, 0xDE	; 222
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	89 2f       	mov	r24, r25
    2be0:	8f 93       	push	r24
    2be2:	8e ed       	ldi	r24, 0xDE	; 222
    2be4:	92 e0       	ldi	r25, 0x02	; 2
    2be6:	8f 93       	push	r24
    2be8:	ce 01       	movw	r24, r28
    2bea:	07 96       	adiw	r24, 0x07	; 7
    2bec:	29 2f       	mov	r18, r25
    2bee:	2f 93       	push	r18
    2bf0:	8f 93       	push	r24
    2bf2:	0e 94 99 26 	call	0x4d32	; 0x4d32 <sprintf>
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
				valp = buf;
    2c02:	ce 01       	movw	r24, r28
    2c04:	07 96       	adiw	r24, 0x07	; 7
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
				break;
    2c0a:	10 c0       	rjmp	.+32     	; 0x2c2c <_ZN6params10initParamsEP3Lcd+0x26e>
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	fc 01       	movw	r30, r24
    2c12:	83 81       	ldd	r24, Z+3	; 0x03
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	8a 5b       	subi	r24, 0xBA	; 186
    2c1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c20:	fc 01       	movw	r30, r24
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
				break;
    2c2a:	00 00       	nop
						
			default:
				break;
		}
		lcd->puts(valp, fg_white);
    2c2c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <fg_white>
    2c30:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <fg_white+0x1>
    2c34:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <fg_white+0x2>
    2c38:	69 81       	ldd	r22, Y+1	; 0x01
    2c3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c3c:	e9 8d       	ldd	r30, Y+25	; 0x19
    2c3e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2c40:	9c 01       	movw	r18, r24
    2c42:	4a 2f       	mov	r20, r26
    2c44:	cf 01       	movw	r24, r30
    2c46:	fc d8       	rcall	.-3592   	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
		curParam = (param_t)((int)curParam + 1);
    2c48:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4c:	83 5b       	subi	r24, 0xB3	; 179
    2c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c50:	fc 01       	movw	r30, r24
    2c52:	80 81       	ld	r24, Z
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	28 0f       	add	r18, r24
    2c58:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5c:	83 5b       	subi	r24, 0xB3	; 179
    2c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c60:	fc 01       	movw	r30, r24
    2c62:	20 83       	st	Z, r18
	const char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    2c64:	8f 89       	ldd	r24, Y+23	; 0x17
    2c66:	98 8d       	ldd	r25, Y+24	; 0x18
    2c68:	83 5b       	subi	r24, 0xB3	; 179
    2c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	80 81       	ld	r24, Z
    2c70:	86 30       	cpi	r24, 0x06	; 6
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <_ZN6params10initParamsEP3Lcd+0x2b8>
    2c74:	bb ce       	rjmp	.-650    	; 0x29ec <_ZN6params10initParamsEP3Lcd+0x2e>
				break;
		}
		lcd->puts(valp, fg_white);
		curParam = (param_t)((int)curParam + 1);
	}	
	curParam = PARAM_STEP;
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	83 5b       	subi	r24, 0xB3	; 179
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	fc 01       	movw	r30, r24
    2c80:	10 82       	st	Z, r1
}
    2c82:	6a 96       	adiw	r28, 0x1a	; 26
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <_ZN6params7getStepEv>:

step_t params::getStep(void) {
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <_ZN6params7getStepEv+0x6>
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01
	return step;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	80 81       	ld	r24, Z
}
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

00002cb4 <_ZN6params7getBandEv>:
 	
	
band_t params::getBand(void) {
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <_ZN6params7getBandEv+0x6>
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
	return band;
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	81 81       	ldd	r24, Z+1	; 0x01
}
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <_ZN6params6getVfoEv>:
 	
	
vfo_select_t params::getVfo(void) {
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <_ZN6params6getVfoEv+0x6>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	89 83       	std	Y+1, r24	; 0x01
	return vfo;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	08 95       	ret

00002cf4 <_ZN6params7getModeEv>:
vfo_actv_t params::getActiveVfo(void) {
	return activeVfo;
}
 	
	
mode_t	params::getMode(void) {
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <_ZN6params7getModeEv+0x6>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
	return mode;
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	fc 01       	movw	r30, r24
    2d08:	84 81       	ldd	r24, Z+4	; 0x04
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	08 95       	ret

00002d14 <_ZN6params7setModeE7_mode_t>:


void	params::setMode(mode_t newMode) {
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <_ZN6params7setModeE7_mode_t+0x6>
    2d1a:	1f 92       	push	r1
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	6b 83       	std	Y+3, r22	; 0x03
	mode = newMode;
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	24 83       	std	Z+4, r18	; 0x04
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

00002d3c <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>:

 	
void params::updateEnter(Encoder *enc, Sw *pb, Lcd *lcd) {
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	2c 97       	sbiw	r28, 0x0c	; 12
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	78 87       	std	Y+8, r23	; 0x08
    2d56:	6f 83       	std	Y+7, r22	; 0x07
    2d58:	5a 87       	std	Y+10, r21	; 0x0a
    2d5a:	49 87       	std	Y+9, r20	; 0x09
    2d5c:	3c 87       	std	Y+12, r19	; 0x0c
    2d5e:	2b 87       	std	Y+11, r18	; 0x0b
	//
	// hilight current parameter on entry to update
	//
	uint16_t line = param_display[curParam].label_psn.line;
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	83 5b       	subi	r24, 0xB3	; 179
    2d66:	9f 4f       	sbci	r25, 0xFF	; 255
    2d68:	fc 01       	movw	r30, r24
    2d6a:	80 81       	ld	r24, Z
    2d6c:	48 2f       	mov	r20, r24
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	2d 81       	ldd	r18, Y+5	; 0x05
    2d72:	3e 81       	ldd	r19, Y+6	; 0x06
    2d74:	6b e0       	ldi	r22, 0x0B	; 11
    2d76:	64 9f       	mul	r22, r20
    2d78:	c0 01       	movw	r24, r0
    2d7a:	65 9f       	mul	r22, r21
    2d7c:	90 0d       	add	r25, r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	0c 96       	adiw	r24, 0x0c	; 12
    2d86:	fc 01       	movw	r30, r24
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
	uint16_t col =  param_display[curParam].label_psn.col;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	83 5b       	subi	r24, 0xB3	; 179
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	fc 01       	movw	r30, r24
    2d9a:	80 81       	ld	r24, Z
    2d9c:	48 2f       	mov	r20, r24
    2d9e:	50 e0       	ldi	r21, 0x00	; 0
    2da0:	2d 81       	ldd	r18, Y+5	; 0x05
    2da2:	3e 81       	ldd	r19, Y+6	; 0x06
    2da4:	6b e0       	ldi	r22, 0x0B	; 11
    2da6:	64 9f       	mul	r22, r20
    2da8:	c0 01       	movw	r24, r0
    2daa:	65 9f       	mul	r22, r21
    2dac:	90 0d       	add	r25, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	82 0f       	add	r24, r18
    2db2:	93 1f       	adc	r25, r19
    2db4:	0e 96       	adiw	r24, 0x0e	; 14
    2db6:	fc 01       	movw	r30, r24
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
	lcd->gotoxy(line,col);
    2dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    2dc2:	29 81       	ldd	r18, Y+1	; 0x01
    2dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dc8:	43 2f       	mov	r20, r19
    2dca:	62 2f       	mov	r22, r18
    2dcc:	90 d8       	rcall	.-3808   	; 0x1eee <_ZN3Lcd6gotoxyEhh>
	lcd->puts(param_display[curParam].label, fg_red);
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	83 5b       	subi	r24, 0xB3	; 179
    2dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	80 81       	ld	r24, Z
    2dda:	48 2f       	mov	r20, r24
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	2d 81       	ldd	r18, Y+5	; 0x05
    2de0:	3e 81       	ldd	r19, Y+6	; 0x06
    2de2:	6b e0       	ldi	r22, 0x0B	; 11
    2de4:	64 9f       	mul	r22, r20
    2de6:	c0 01       	movw	r24, r0
    2de8:	65 9f       	mul	r22, r21
    2dea:	90 0d       	add	r25, r0
    2dec:	11 24       	eor	r1, r1
    2dee:	82 0f       	add	r24, r18
    2df0:	93 1f       	adc	r25, r19
    2df2:	40 96       	adiw	r24, 0x10	; 16
    2df4:	fc 01       	movw	r30, r24
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <fg_red>
    2dfe:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <fg_red+0x1>
    2e02:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <fg_red+0x2>
    2e06:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e08:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	4a 2f       	mov	r20, r26
    2e0e:	cf 01       	movw	r24, r30
    2e10:	17 d8       	rcall	.-4050   	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
	enc->setEventRate(1);
    2e12:	8f 81       	ldd	r24, Y+7	; 0x07
    2e14:	98 85       	ldd	r25, Y+8	; 0x08
    2e16:	61 e0       	ldi	r22, 0x01	; 1
    2e18:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN7Encoder12setEventRateEh>
	update(enc, pb, lcd);	
    2e1c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e1e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e20:	49 85       	ldd	r20, Y+9	; 0x09
    2e22:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	09 d0       	rcall	.+18     	; 0x2e40 <_ZN6params6updateEP7EncoderP2SwP3Lcd>
}
    2e2e:	2c 96       	adiw	r28, 0x0c	; 12
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <_ZN6params6updateEP7EncoderP2SwP3Lcd>:


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	ae 97       	sbiw	r28, 0x2e	; 46
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	98 a7       	std	Y+40, r25	; 0x28
    2e5e:	8f a3       	std	Y+39, r24	; 0x27
    2e60:	7a a7       	std	Y+42, r23	; 0x2a
    2e62:	69 a7       	std	Y+41, r22	; 0x29
    2e64:	5c a7       	std	Y+44, r21	; 0x2c
    2e66:	4b a7       	std	Y+43, r20	; 0x2b
    2e68:	3e a7       	std	Y+46, r19	; 0x2e
    2e6a:	2d a7       	std	Y+45, r18	; 0x2d
	uint16_t line;
	uint16_t col;
	const char *valp = NULL;
    2e6c:	1a 82       	std	Y+2, r1	; 0x02
    2e6e:	19 82       	std	Y+1, r1	; 0x01
	char buf[16];

	if (pb->hasEvent()) {
    2e70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e72:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e74:	02 d5       	rcall	.+2564   	; 0x387a <_ZN2Sw8hasEventEv>
    2e76:	88 23       	and	r24, r24
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c>
    2e7a:	af c1       	rjmp	.+862    	; 0x31da <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x39a>
		if (pb->getEvent() == EV_CLOSE) {
    2e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e80:	11 d5       	rcall	.+2594   	; 0x38a4 <_ZN2Sw8getEventEv>
    2e82:	98 2f       	mov	r25, r24
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	92 30       	cpi	r25, 0x02	; 2
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4c>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	88 23       	and	r24, r24
    2e8e:	79 f0       	breq	.+30     	; 0x2eae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6e>
			pbCloseTicks = Clock::getTicks();
    2e90:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN5Clock8getTicksEv>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	2f a1       	ldd	r18, Y+39	; 0x27
    2e9a:	38 a5       	ldd	r19, Y+40	; 0x28
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	87 83       	std	Z+7, r24	; 0x07
    2ea0:	90 87       	std	Z+8, r25	; 0x08
    2ea2:	a1 87       	std	Z+9, r26	; 0x09
    2ea4:	b2 87       	std	Z+10, r27	; 0x0a
			pb->clearEvent();
    2ea6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eaa:	0c d5       	rcall	.+2584   	; 0x38c4 <_ZN2Sw10clearEventEv>
    2eac:	96 c1       	rjmp	.+812    	; 0x31da <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x39a>

		} else if (pb->getEvent() == EV_OPEN) {
    2eae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb2:	f8 d4       	rcall	.+2544   	; 0x38a4 <_ZN2Sw8getEventEv>
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	91 30       	cpi	r25, 0x01	; 1
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7e>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	88 23       	and	r24, r24
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x84>
    2ec2:	8b c1       	rjmp	.+790    	; 0x31da <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x39a>

			uint32_t timeNow = Clock::getTicks();
    2ec4:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN5Clock8getTicksEv>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8f 83       	std	Y+7, r24	; 0x07
    2ece:	98 87       	std	Y+8, r25	; 0x08
    2ed0:	a9 87       	std	Y+9, r26	; 0x09
    2ed2:	ba 87       	std	Y+10, r27	; 0x0a
			uint32_t deltaTicks;

			if (timeNow < pbCloseTicks) {
    2ed4:	8f a1       	ldd	r24, Y+39	; 0x27
    2ed6:	98 a5       	ldd	r25, Y+40	; 0x28
    2ed8:	fc 01       	movw	r30, r24
    2eda:	27 81       	ldd	r18, Z+7	; 0x07
    2edc:	30 85       	ldd	r19, Z+8	; 0x08
    2ede:	41 85       	ldd	r20, Z+9	; 0x09
    2ee0:	52 85       	ldd	r21, Z+10	; 0x0a
    2ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee4:	98 85       	ldd	r25, Y+8	; 0x08
    2ee6:	a9 85       	ldd	r26, Y+9	; 0x09
    2ee8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2eea:	82 17       	cp	r24, r18
    2eec:	93 07       	cpc	r25, r19
    2eee:	a4 07       	cpc	r26, r20
    2ef0:	b5 07       	cpc	r27, r21
    2ef2:	c0 f4       	brcc	.+48     	; 0x2f24 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0xe4>
				deltaTicks = timeNow + ((uint32_t)((uint64_t)(0x100000000) - (uint64_t)pbCloseTicks));
    2ef4:	8f a1       	ldd	r24, Y+39	; 0x27
    2ef6:	98 a5       	ldd	r25, Y+40	; 0x28
    2ef8:	fc 01       	movw	r30, r24
    2efa:	87 81       	ldd	r24, Z+7	; 0x07
    2efc:	90 85       	ldd	r25, Z+8	; 0x08
    2efe:	a1 85       	ldd	r26, Z+9	; 0x09
    2f00:	b2 85       	ldd	r27, Z+10	; 0x0a
    2f02:	2f 81       	ldd	r18, Y+7	; 0x07
    2f04:	38 85       	ldd	r19, Y+8	; 0x08
    2f06:	49 85       	ldd	r20, Y+9	; 0x09
    2f08:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f0a:	79 01       	movw	r14, r18
    2f0c:	8a 01       	movw	r16, r20
    2f0e:	e8 1a       	sub	r14, r24
    2f10:	f9 0a       	sbc	r15, r25
    2f12:	0a 0b       	sbc	r16, r26
    2f14:	1b 0b       	sbc	r17, r27
    2f16:	d8 01       	movw	r26, r16
    2f18:	c7 01       	movw	r24, r14
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	ad 83       	std	Y+5, r26	; 0x05
    2f20:	be 83       	std	Y+6, r27	; 0x06
    2f22:	17 c0       	rjmp	.+46     	; 0x2f52 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x112>
			} else {
				deltaTicks = timeNow - pbCloseTicks;
    2f24:	8f a1       	ldd	r24, Y+39	; 0x27
    2f26:	98 a5       	ldd	r25, Y+40	; 0x28
    2f28:	fc 01       	movw	r30, r24
    2f2a:	87 81       	ldd	r24, Z+7	; 0x07
    2f2c:	90 85       	ldd	r25, Z+8	; 0x08
    2f2e:	a1 85       	ldd	r26, Z+9	; 0x09
    2f30:	b2 85       	ldd	r27, Z+10	; 0x0a
    2f32:	2f 81       	ldd	r18, Y+7	; 0x07
    2f34:	38 85       	ldd	r19, Y+8	; 0x08
    2f36:	49 85       	ldd	r20, Y+9	; 0x09
    2f38:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f3a:	79 01       	movw	r14, r18
    2f3c:	8a 01       	movw	r16, r20
    2f3e:	e8 1a       	sub	r14, r24
    2f40:	f9 0a       	sbc	r15, r25
    2f42:	0a 0b       	sbc	r16, r26
    2f44:	1b 0b       	sbc	r17, r27
    2f46:	d8 01       	movw	r26, r16
    2f48:	c7 01       	movw	r24, r14
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	ad 83       	std	Y+5, r26	; 0x05
    2f50:	be 83       	std	Y+6, r27	; 0x06
			}
			pb->clearEvent();
    2f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f56:	b6 d4       	rcall	.+2412   	; 0x38c4 <_ZN2Sw10clearEventEv>

			if (deltaTicks > SHORT_CLOSE) {
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2f5e:	be 81       	ldd	r27, Y+6	; 0x06
    2f60:	89 3c       	cpi	r24, 0xC9	; 201
    2f62:	91 05       	cpc	r25, r1
    2f64:	a1 05       	cpc	r26, r1
    2f66:	b1 05       	cpc	r27, r1
    2f68:	08 f4       	brcc	.+2      	; 0x2f6c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x12c>
    2f6a:	65 c0       	rjmp	.+202    	; 0x3036 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1f6>
				uint16_t line = param_display[curParam].label_psn.line;
    2f6c:	8f a1       	ldd	r24, Y+39	; 0x27
    2f6e:	98 a5       	ldd	r25, Y+40	; 0x28
    2f70:	83 5b       	subi	r24, 0xB3	; 179
    2f72:	9f 4f       	sbci	r25, 0xFF	; 255
    2f74:	fc 01       	movw	r30, r24
    2f76:	80 81       	ld	r24, Z
    2f78:	48 2f       	mov	r20, r24
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	2f a1       	ldd	r18, Y+39	; 0x27
    2f7e:	38 a5       	ldd	r19, Y+40	; 0x28
    2f80:	6b e0       	ldi	r22, 0x0B	; 11
    2f82:	64 9f       	mul	r22, r20
    2f84:	c0 01       	movw	r24, r0
    2f86:	65 9f       	mul	r22, r21
    2f88:	90 0d       	add	r25, r0
    2f8a:	11 24       	eor	r1, r1
    2f8c:	82 0f       	add	r24, r18
    2f8e:	93 1f       	adc	r25, r19
    2f90:	0c 96       	adiw	r24, 0x0c	; 12
    2f92:	fc 01       	movw	r30, r24
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	98 8b       	std	Y+16, r25	; 0x10
    2f9a:	8f 87       	std	Y+15, r24	; 0x0f
				uint16_t col =  param_display[curParam].label_psn.col;
    2f9c:	8f a1       	ldd	r24, Y+39	; 0x27
    2f9e:	98 a5       	ldd	r25, Y+40	; 0x28
    2fa0:	83 5b       	subi	r24, 0xB3	; 179
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	80 81       	ld	r24, Z
    2fa8:	48 2f       	mov	r20, r24
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	2f a1       	ldd	r18, Y+39	; 0x27
    2fae:	38 a5       	ldd	r19, Y+40	; 0x28
    2fb0:	6b e0       	ldi	r22, 0x0B	; 11
    2fb2:	64 9f       	mul	r22, r20
    2fb4:	c0 01       	movw	r24, r0
    2fb6:	65 9f       	mul	r22, r21
    2fb8:	90 0d       	add	r25, r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	0e 96       	adiw	r24, 0x0e	; 14
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	9a 8b       	std	Y+18, r25	; 0x12
    2fca:	89 8b       	std	Y+17, r24	; 0x11

				lcd->gotoxy(line,col);
    2fcc:	39 89       	ldd	r19, Y+17	; 0x11
    2fce:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fd4:	43 2f       	mov	r20, r19
    2fd6:	62 2f       	mov	r22, r18
    2fd8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_white);
    2fdc:	8f a1       	ldd	r24, Y+39	; 0x27
    2fde:	98 a5       	ldd	r25, Y+40	; 0x28
    2fe0:	83 5b       	subi	r24, 0xB3	; 179
    2fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	2f a1       	ldd	r18, Y+39	; 0x27
    2fee:	38 a5       	ldd	r19, Y+40	; 0x28
    2ff0:	6b e0       	ldi	r22, 0x0B	; 11
    2ff2:	64 9f       	mul	r22, r20
    2ff4:	c0 01       	movw	r24, r0
    2ff6:	65 9f       	mul	r22, r21
    2ff8:	90 0d       	add	r25, r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	82 0f       	add	r24, r18
    2ffe:	93 1f       	adc	r25, r19
    3000:	40 96       	adiw	r24, 0x10	; 16
    3002:	fc 01       	movw	r30, r24
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <fg_white>
    300c:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <fg_white+0x1>
    3010:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <fg_white+0x2>
    3014:	ed a5       	ldd	r30, Y+45	; 0x2d
    3016:	fe a5       	ldd	r31, Y+46	; 0x2e
    3018:	9c 01       	movw	r18, r24
    301a:	4a 2f       	mov	r20, r26
    301c:	cf 01       	movw	r24, r30
    301e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
				mode = MODE_NORMAL;
    3022:	8f a1       	ldd	r24, Y+39	; 0x27
    3024:	98 a5       	ldd	r25, Y+40	; 0x28
    3026:	fc 01       	movw	r30, r24
    3028:	14 82       	std	Z+4, r1	; 0x04
				enc->setEventRate(4);
    302a:	89 a5       	ldd	r24, Y+41	; 0x29
    302c:	9a a5       	ldd	r25, Y+42	; 0x2a
    302e:	64 e0       	ldi	r22, 0x04	; 4
    3030:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN7Encoder12setEventRateEh>
				return;
    3034:	17 c3       	rjmp	.+1582   	; 0x3664 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x824>

			} else {
				uint16_t line = param_display[curParam].label_psn.line;
    3036:	8f a1       	ldd	r24, Y+39	; 0x27
    3038:	98 a5       	ldd	r25, Y+40	; 0x28
    303a:	83 5b       	subi	r24, 0xB3	; 179
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	fc 01       	movw	r30, r24
    3040:	80 81       	ld	r24, Z
    3042:	48 2f       	mov	r20, r24
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	2f a1       	ldd	r18, Y+39	; 0x27
    3048:	38 a5       	ldd	r19, Y+40	; 0x28
    304a:	6b e0       	ldi	r22, 0x0B	; 11
    304c:	64 9f       	mul	r22, r20
    304e:	c0 01       	movw	r24, r0
    3050:	65 9f       	mul	r22, r21
    3052:	90 0d       	add	r25, r0
    3054:	11 24       	eor	r1, r1
    3056:	82 0f       	add	r24, r18
    3058:	93 1f       	adc	r25, r19
    305a:	0c 96       	adiw	r24, 0x0c	; 12
    305c:	fc 01       	movw	r30, r24
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	9c 87       	std	Y+12, r25	; 0x0c
    3064:	8b 87       	std	Y+11, r24	; 0x0b
				uint16_t col =  param_display[curParam].label_psn.col;
    3066:	8f a1       	ldd	r24, Y+39	; 0x27
    3068:	98 a5       	ldd	r25, Y+40	; 0x28
    306a:	83 5b       	subi	r24, 0xB3	; 179
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	fc 01       	movw	r30, r24
    3070:	80 81       	ld	r24, Z
    3072:	48 2f       	mov	r20, r24
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	2f a1       	ldd	r18, Y+39	; 0x27
    3078:	38 a5       	ldd	r19, Y+40	; 0x28
    307a:	6b e0       	ldi	r22, 0x0B	; 11
    307c:	64 9f       	mul	r22, r20
    307e:	c0 01       	movw	r24, r0
    3080:	65 9f       	mul	r22, r21
    3082:	90 0d       	add	r25, r0
    3084:	11 24       	eor	r1, r1
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	0e 96       	adiw	r24, 0x0e	; 14
    308c:	fc 01       	movw	r30, r24
    308e:	80 81       	ld	r24, Z
    3090:	91 81       	ldd	r25, Z+1	; 0x01
    3092:	9e 87       	std	Y+14, r25	; 0x0e
    3094:	8d 87       	std	Y+13, r24	; 0x0d

				lcd->gotoxy(line,col);
    3096:	3d 85       	ldd	r19, Y+13	; 0x0d
    3098:	2b 85       	ldd	r18, Y+11	; 0x0b
    309a:	8d a5       	ldd	r24, Y+45	; 0x2d
    309c:	9e a5       	ldd	r25, Y+46	; 0x2e
    309e:	43 2f       	mov	r20, r19
    30a0:	62 2f       	mov	r22, r18
    30a2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_white);
    30a6:	8f a1       	ldd	r24, Y+39	; 0x27
    30a8:	98 a5       	ldd	r25, Y+40	; 0x28
    30aa:	83 5b       	subi	r24, 0xB3	; 179
    30ac:	9f 4f       	sbci	r25, 0xFF	; 255
    30ae:	fc 01       	movw	r30, r24
    30b0:	80 81       	ld	r24, Z
    30b2:	48 2f       	mov	r20, r24
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	2f a1       	ldd	r18, Y+39	; 0x27
    30b8:	38 a5       	ldd	r19, Y+40	; 0x28
    30ba:	6b e0       	ldi	r22, 0x0B	; 11
    30bc:	64 9f       	mul	r22, r20
    30be:	c0 01       	movw	r24, r0
    30c0:	65 9f       	mul	r22, r21
    30c2:	90 0d       	add	r25, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	82 0f       	add	r24, r18
    30c8:	93 1f       	adc	r25, r19
    30ca:	40 96       	adiw	r24, 0x10	; 16
    30cc:	fc 01       	movw	r30, r24
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <fg_white>
    30d6:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <fg_white+0x1>
    30da:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <fg_white+0x2>
    30de:	ed a5       	ldd	r30, Y+45	; 0x2d
    30e0:	fe a5       	ldd	r31, Y+46	; 0x2e
    30e2:	9c 01       	movw	r18, r24
    30e4:	4a 2f       	mov	r20, r26
    30e6:	cf 01       	movw	r24, r30
    30e8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
				curParam = (param_t)((int)curParam + 1);
    30ec:	8f a1       	ldd	r24, Y+39	; 0x27
    30ee:	98 a5       	ldd	r25, Y+40	; 0x28
    30f0:	83 5b       	subi	r24, 0xB3	; 179
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	fc 01       	movw	r30, r24
    30f6:	80 81       	ld	r24, Z
    30f8:	21 e0       	ldi	r18, 0x01	; 1
    30fa:	28 0f       	add	r18, r24
    30fc:	8f a1       	ldd	r24, Y+39	; 0x27
    30fe:	98 a5       	ldd	r25, Y+40	; 0x28
    3100:	83 5b       	subi	r24, 0xB3	; 179
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	fc 01       	movw	r30, r24
    3106:	20 83       	st	Z, r18
				if (curParam == PARAM_END) {
    3108:	8f a1       	ldd	r24, Y+39	; 0x27
    310a:	98 a5       	ldd	r25, Y+40	; 0x28
    310c:	83 5b       	subi	r24, 0xB3	; 179
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	fc 01       	movw	r30, r24
    3112:	80 81       	ld	r24, Z
    3114:	86 30       	cpi	r24, 0x06	; 6
    3116:	31 f4       	brne	.+12     	; 0x3124 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x2e4>
					curParam = PARAM_STEP;
    3118:	8f a1       	ldd	r24, Y+39	; 0x27
    311a:	98 a5       	ldd	r25, Y+40	; 0x28
    311c:	83 5b       	subi	r24, 0xB3	; 179
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	fc 01       	movw	r30, r24
    3122:	10 82       	st	Z, r1
				}					
				line = param_display[curParam].label_psn.line;
    3124:	8f a1       	ldd	r24, Y+39	; 0x27
    3126:	98 a5       	ldd	r25, Y+40	; 0x28
    3128:	83 5b       	subi	r24, 0xB3	; 179
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	fc 01       	movw	r30, r24
    312e:	80 81       	ld	r24, Z
    3130:	48 2f       	mov	r20, r24
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	2f a1       	ldd	r18, Y+39	; 0x27
    3136:	38 a5       	ldd	r19, Y+40	; 0x28
    3138:	6b e0       	ldi	r22, 0x0B	; 11
    313a:	64 9f       	mul	r22, r20
    313c:	c0 01       	movw	r24, r0
    313e:	65 9f       	mul	r22, r21
    3140:	90 0d       	add	r25, r0
    3142:	11 24       	eor	r1, r1
    3144:	82 0f       	add	r24, r18
    3146:	93 1f       	adc	r25, r19
    3148:	0c 96       	adiw	r24, 0x0c	; 12
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	9c 87       	std	Y+12, r25	; 0x0c
    3152:	8b 87       	std	Y+11, r24	; 0x0b
				col =  param_display[curParam].label_psn.col;
    3154:	8f a1       	ldd	r24, Y+39	; 0x27
    3156:	98 a5       	ldd	r25, Y+40	; 0x28
    3158:	83 5b       	subi	r24, 0xB3	; 179
    315a:	9f 4f       	sbci	r25, 0xFF	; 255
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	48 2f       	mov	r20, r24
    3162:	50 e0       	ldi	r21, 0x00	; 0
    3164:	2f a1       	ldd	r18, Y+39	; 0x27
    3166:	38 a5       	ldd	r19, Y+40	; 0x28
    3168:	6b e0       	ldi	r22, 0x0B	; 11
    316a:	64 9f       	mul	r22, r20
    316c:	c0 01       	movw	r24, r0
    316e:	65 9f       	mul	r22, r21
    3170:	90 0d       	add	r25, r0
    3172:	11 24       	eor	r1, r1
    3174:	82 0f       	add	r24, r18
    3176:	93 1f       	adc	r25, r19
    3178:	0e 96       	adiw	r24, 0x0e	; 14
    317a:	fc 01       	movw	r30, r24
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	9e 87       	std	Y+14, r25	; 0x0e
    3182:	8d 87       	std	Y+13, r24	; 0x0d
				lcd->gotoxy(line,col);
    3184:	3d 85       	ldd	r19, Y+13	; 0x0d
    3186:	2b 85       	ldd	r18, Y+11	; 0x0b
    3188:	8d a5       	ldd	r24, Y+45	; 0x2d
    318a:	9e a5       	ldd	r25, Y+46	; 0x2e
    318c:	43 2f       	mov	r20, r19
    318e:	62 2f       	mov	r22, r18
    3190:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fg_red);
    3194:	8f a1       	ldd	r24, Y+39	; 0x27
    3196:	98 a5       	ldd	r25, Y+40	; 0x28
    3198:	83 5b       	subi	r24, 0xB3	; 179
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	fc 01       	movw	r30, r24
    319e:	80 81       	ld	r24, Z
    31a0:	48 2f       	mov	r20, r24
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	2f a1       	ldd	r18, Y+39	; 0x27
    31a6:	38 a5       	ldd	r19, Y+40	; 0x28
    31a8:	6b e0       	ldi	r22, 0x0B	; 11
    31aa:	64 9f       	mul	r22, r20
    31ac:	c0 01       	movw	r24, r0
    31ae:	65 9f       	mul	r22, r21
    31b0:	90 0d       	add	r25, r0
    31b2:	11 24       	eor	r1, r1
    31b4:	82 0f       	add	r24, r18
    31b6:	93 1f       	adc	r25, r19
    31b8:	40 96       	adiw	r24, 0x10	; 16
    31ba:	fc 01       	movw	r30, r24
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <fg_red>
    31c4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <fg_red+0x1>
    31c8:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <fg_red+0x2>
    31cc:	ed a5       	ldd	r30, Y+45	; 0x2d
    31ce:	fe a5       	ldd	r31, Y+46	; 0x2e
    31d0:	9c 01       	movw	r18, r24
    31d2:	4a 2f       	mov	r20, r26
    31d4:	cf 01       	movw	r24, r30
    31d6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
		}
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
    31da:	89 a5       	ldd	r24, Y+41	; 0x29
    31dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31de:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Encoder8hasEventEv>
    31e2:	88 23       	and	r24, r24
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3a8>
    31e6:	3e c2       	rjmp	.+1148   	; 0x3664 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x824>
		switch(curParam) {
    31e8:	8f a1       	ldd	r24, Y+39	; 0x27
    31ea:	98 a5       	ldd	r25, Y+40	; 0x28
    31ec:	83 5b       	subi	r24, 0xB3	; 179
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	fc 01       	movw	r30, r24
    31f2:	80 81       	ld	r24, Z
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	82 30       	cpi	r24, 0x02	; 2
    31fa:	91 05       	cpc	r25, r1
    31fc:	09 f4       	brne	.+2      	; 0x3200 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3c0>
    31fe:	b7 c0       	rjmp	.+366    	; 0x336e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x52e>
    3200:	83 30       	cpi	r24, 0x03	; 3
    3202:	91 05       	cpc	r25, r1
    3204:	34 f4       	brge	.+12     	; 0x3212 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d2>
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	81 f0       	breq	.+32     	; 0x322a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3ea>
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	09 f4       	brne	.+2      	; 0x3210 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d0>
    320e:	5e c0       	rjmp	.+188    	; 0x32cc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x48c>
				}
				valp =  vfoact_strings[activeVfo];
				break;

			default:
				break;
    3210:	de c1       	rjmp	.+956    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
		switch(curParam) {
    3212:	84 30       	cpi	r24, 0x04	; 4
    3214:	91 05       	cpc	r25, r1
    3216:	09 f4       	brne	.+2      	; 0x321a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3da>
    3218:	4c c1       	rjmp	.+664    	; 0x34b2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x672>
    321a:	84 30       	cpi	r24, 0x04	; 4
    321c:	91 05       	cpc	r25, r1
    321e:	0c f4       	brge	.+2      	; 0x3222 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3e2>
    3220:	f7 c0       	rjmp	.+494    	; 0x3410 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5d0>
    3222:	05 97       	sbiw	r24, 0x05	; 5
    3224:	09 f4       	brne	.+2      	; 0x3228 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3e8>
    3226:	a8 c1       	rjmp	.+848    	; 0x3578 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x738>
				}
				valp =  vfoact_strings[activeVfo];
				break;

			default:
				break;
    3228:	d2 c1       	rjmp	.+932    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
		switch(curParam) {
			case PARAM_STEP:
				if (enc->getEvent() == ENC_CW_EVENT) {
    322a:	89 a5       	ldd	r24, Y+41	; 0x29
    322c:	9a a5       	ldd	r25, Y+42	; 0x2a
    322e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3232:	98 2f       	mov	r25, r24
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	91 30       	cpi	r25, 0x01	; 1
    3238:	09 f0       	breq	.+2      	; 0x323c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3fc>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	88 23       	and	r24, r24
    323e:	a9 f0       	breq	.+42     	; 0x326a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x42a>
					step = (step_t)((int)step + 1);
    3240:	8f a1       	ldd	r24, Y+39	; 0x27
    3242:	98 a5       	ldd	r25, Y+40	; 0x28
    3244:	fc 01       	movw	r30, r24
    3246:	80 81       	ld	r24, Z
    3248:	21 e0       	ldi	r18, 0x01	; 1
    324a:	28 0f       	add	r18, r24
    324c:	8f a1       	ldd	r24, Y+39	; 0x27
    324e:	98 a5       	ldd	r25, Y+40	; 0x28
    3250:	fc 01       	movw	r30, r24
    3252:	20 83       	st	Z, r18
					if (step == END_OF_STEP) {
    3254:	8f a1       	ldd	r24, Y+39	; 0x27
    3256:	98 a5       	ldd	r25, Y+40	; 0x28
    3258:	fc 01       	movw	r30, r24
    325a:	80 81       	ld	r24, Z
    325c:	85 30       	cpi	r24, 0x05	; 5
    325e:	31 f5       	brne	.+76     	; 0x32ac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x46c>
						step = STEP_10HZ;
    3260:	8f a1       	ldd	r24, Y+39	; 0x27
    3262:	98 a5       	ldd	r25, Y+40	; 0x28
    3264:	fc 01       	movw	r30, r24
    3266:	10 82       	st	Z, r1
    3268:	21 c0       	rjmp	.+66     	; 0x32ac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x46c>
					}

				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    326a:	89 a5       	ldd	r24, Y+41	; 0x29
    326c:	9a a5       	ldd	r25, Y+42	; 0x2a
    326e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3272:	98 2f       	mov	r25, r24
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	92 30       	cpi	r25, 0x02	; 2
    3278:	09 f0       	breq	.+2      	; 0x327c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x43c>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	88 23       	and	r24, r24
    327e:	b1 f0       	breq	.+44     	; 0x32ac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x46c>
					if (step == STEP_10HZ) {
    3280:	8f a1       	ldd	r24, Y+39	; 0x27
    3282:	98 a5       	ldd	r25, Y+40	; 0x28
    3284:	fc 01       	movw	r30, r24
    3286:	80 81       	ld	r24, Z
    3288:	88 23       	and	r24, r24
    328a:	31 f4       	brne	.+12     	; 0x3298 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x458>
						step = STEP_1MHZ;
    328c:	8f a1       	ldd	r24, Y+39	; 0x27
    328e:	98 a5       	ldd	r25, Y+40	; 0x28
    3290:	24 e0       	ldi	r18, 0x04	; 4
    3292:	fc 01       	movw	r30, r24
    3294:	20 83       	st	Z, r18
    3296:	0a c0       	rjmp	.+20     	; 0x32ac <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x46c>
					} else {
						step = (step_t)((int)step - 1);
    3298:	8f a1       	ldd	r24, Y+39	; 0x27
    329a:	98 a5       	ldd	r25, Y+40	; 0x28
    329c:	fc 01       	movw	r30, r24
    329e:	80 81       	ld	r24, Z
    32a0:	2f ef       	ldi	r18, 0xFF	; 255
    32a2:	28 0f       	add	r18, r24
    32a4:	8f a1       	ldd	r24, Y+39	; 0x27
    32a6:	98 a5       	ldd	r25, Y+40	; 0x28
    32a8:	fc 01       	movw	r30, r24
    32aa:	20 83       	st	Z, r18
					}
				}
				valp = step_strings[step];
    32ac:	8f a1       	ldd	r24, Y+39	; 0x27
    32ae:	98 a5       	ldd	r25, Y+40	; 0x28
    32b0:	fc 01       	movw	r30, r24
    32b2:	80 81       	ld	r24, Z
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	8a 5c       	subi	r24, 0xCA	; 202
    32be:	9e 4f       	sbci	r25, 0xFE	; 254
    32c0:	fc 01       	movw	r30, r24
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
				break;
    32ca:	81 c1       	rjmp	.+770    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>

			case PARAM_BAND:
				if (enc->getEvent() == ENC_CW_EVENT) {
    32cc:	89 a5       	ldd	r24, Y+41	; 0x29
    32ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    32d4:	98 2f       	mov	r25, r24
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	91 30       	cpi	r25, 0x01	; 1
    32da:	09 f0       	breq	.+2      	; 0x32de <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x49e>
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	88 23       	and	r24, r24
    32e0:	a9 f0       	breq	.+42     	; 0x330c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4cc>
					band = (band_t)((int)band + 1);
    32e2:	8f a1       	ldd	r24, Y+39	; 0x27
    32e4:	98 a5       	ldd	r25, Y+40	; 0x28
    32e6:	fc 01       	movw	r30, r24
    32e8:	81 81       	ldd	r24, Z+1	; 0x01
    32ea:	21 e0       	ldi	r18, 0x01	; 1
    32ec:	28 0f       	add	r18, r24
    32ee:	8f a1       	ldd	r24, Y+39	; 0x27
    32f0:	98 a5       	ldd	r25, Y+40	; 0x28
    32f2:	fc 01       	movw	r30, r24
    32f4:	21 83       	std	Z+1, r18	; 0x01
					if (band == END_OF_BAND) {
    32f6:	8f a1       	ldd	r24, Y+39	; 0x27
    32f8:	98 a5       	ldd	r25, Y+40	; 0x28
    32fa:	fc 01       	movw	r30, r24
    32fc:	81 81       	ldd	r24, Z+1	; 0x01
    32fe:	89 30       	cpi	r24, 0x09	; 9
    3300:	31 f5       	brne	.+76     	; 0x334e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x50e>
						band = BAND_160;
    3302:	8f a1       	ldd	r24, Y+39	; 0x27
    3304:	98 a5       	ldd	r25, Y+40	; 0x28
    3306:	fc 01       	movw	r30, r24
    3308:	11 82       	std	Z+1, r1	; 0x01
    330a:	21 c0       	rjmp	.+66     	; 0x334e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x50e>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    330c:	89 a5       	ldd	r24, Y+41	; 0x29
    330e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3310:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3314:	98 2f       	mov	r25, r24
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	92 30       	cpi	r25, 0x02	; 2
    331a:	09 f0       	breq	.+2      	; 0x331e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4de>
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	88 23       	and	r24, r24
    3320:	b1 f0       	breq	.+44     	; 0x334e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x50e>
					if (band == BAND_160) {
    3322:	8f a1       	ldd	r24, Y+39	; 0x27
    3324:	98 a5       	ldd	r25, Y+40	; 0x28
    3326:	fc 01       	movw	r30, r24
    3328:	81 81       	ldd	r24, Z+1	; 0x01
    332a:	88 23       	and	r24, r24
    332c:	31 f4       	brne	.+12     	; 0x333a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4fa>
						band = BAND_10;
    332e:	8f a1       	ldd	r24, Y+39	; 0x27
    3330:	98 a5       	ldd	r25, Y+40	; 0x28
    3332:	28 e0       	ldi	r18, 0x08	; 8
    3334:	fc 01       	movw	r30, r24
    3336:	21 83       	std	Z+1, r18	; 0x01
    3338:	0a c0       	rjmp	.+20     	; 0x334e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x50e>
					} else {
						band = (band_t)((int)band - 1);
    333a:	8f a1       	ldd	r24, Y+39	; 0x27
    333c:	98 a5       	ldd	r25, Y+40	; 0x28
    333e:	fc 01       	movw	r30, r24
    3340:	81 81       	ldd	r24, Z+1	; 0x01
    3342:	2f ef       	ldi	r18, 0xFF	; 255
    3344:	28 0f       	add	r18, r24
    3346:	8f a1       	ldd	r24, Y+39	; 0x27
    3348:	98 a5       	ldd	r25, Y+40	; 0x28
    334a:	fc 01       	movw	r30, r24
    334c:	21 83       	std	Z+1, r18	; 0x01
					}
				}
				valp = band_strings[band];
    334e:	8f a1       	ldd	r24, Y+39	; 0x27
    3350:	98 a5       	ldd	r25, Y+40	; 0x28
    3352:	fc 01       	movw	r30, r24
    3354:	81 81       	ldd	r24, Z+1	; 0x01
    3356:	88 2f       	mov	r24, r24
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	8c 5d       	subi	r24, 0xDC	; 220
    3360:	9e 4f       	sbci	r25, 0xFE	; 254
    3362:	fc 01       	movw	r30, r24
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
				break;
    336c:	30 c1       	rjmp	.+608    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>

			case PARAM_VFO:
				if (enc->getEvent() == ENC_CW_EVENT) {
    336e:	89 a5       	ldd	r24, Y+41	; 0x29
    3370:	9a a5       	ldd	r25, Y+42	; 0x2a
    3372:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3376:	98 2f       	mov	r25, r24
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	91 30       	cpi	r25, 0x01	; 1
    337c:	09 f0       	breq	.+2      	; 0x3380 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x540>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	88 23       	and	r24, r24
    3382:	a9 f0       	breq	.+42     	; 0x33ae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x56e>
					vfo = (vfo_select_t)((int)vfo + 1);
    3384:	8f a1       	ldd	r24, Y+39	; 0x27
    3386:	98 a5       	ldd	r25, Y+40	; 0x28
    3388:	fc 01       	movw	r30, r24
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	21 e0       	ldi	r18, 0x01	; 1
    338e:	28 0f       	add	r18, r24
    3390:	8f a1       	ldd	r24, Y+39	; 0x27
    3392:	98 a5       	ldd	r25, Y+40	; 0x28
    3394:	fc 01       	movw	r30, r24
    3396:	22 83       	std	Z+2, r18	; 0x02
					if (vfo == END_OF_VFO) {
    3398:	8f a1       	ldd	r24, Y+39	; 0x27
    339a:	98 a5       	ldd	r25, Y+40	; 0x28
    339c:	fc 01       	movw	r30, r24
    339e:	82 81       	ldd	r24, Z+2	; 0x02
    33a0:	83 30       	cpi	r24, 0x03	; 3
    33a2:	31 f5       	brne	.+76     	; 0x33f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5b0>
						vfo = VFOA;
    33a4:	8f a1       	ldd	r24, Y+39	; 0x27
    33a6:	98 a5       	ldd	r25, Y+40	; 0x28
    33a8:	fc 01       	movw	r30, r24
    33aa:	12 82       	std	Z+2, r1	; 0x02
    33ac:	21 c0       	rjmp	.+66     	; 0x33f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5b0>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    33ae:	89 a5       	ldd	r24, Y+41	; 0x29
    33b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    33b6:	98 2f       	mov	r25, r24
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	92 30       	cpi	r25, 0x02	; 2
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x580>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	88 23       	and	r24, r24
    33c2:	b1 f0       	breq	.+44     	; 0x33f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5b0>
					if (vfo == VFOA) {
    33c4:	8f a1       	ldd	r24, Y+39	; 0x27
    33c6:	98 a5       	ldd	r25, Y+40	; 0x28
    33c8:	fc 01       	movw	r30, r24
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	88 23       	and	r24, r24
    33ce:	31 f4       	brne	.+12     	; 0x33dc <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x59c>
						vfo = SPLIT;
    33d0:	8f a1       	ldd	r24, Y+39	; 0x27
    33d2:	98 a5       	ldd	r25, Y+40	; 0x28
    33d4:	22 e0       	ldi	r18, 0x02	; 2
    33d6:	fc 01       	movw	r30, r24
    33d8:	22 83       	std	Z+2, r18	; 0x02
    33da:	0a c0       	rjmp	.+20     	; 0x33f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5b0>
					} else {
						vfo = (vfo_select_t)((int)vfo - 1);
    33dc:	8f a1       	ldd	r24, Y+39	; 0x27
    33de:	98 a5       	ldd	r25, Y+40	; 0x28
    33e0:	fc 01       	movw	r30, r24
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	2f ef       	ldi	r18, 0xFF	; 255
    33e6:	28 0f       	add	r18, r24
    33e8:	8f a1       	ldd	r24, Y+39	; 0x27
    33ea:	98 a5       	ldd	r25, Y+40	; 0x28
    33ec:	fc 01       	movw	r30, r24
    33ee:	22 83       	std	Z+2, r18	; 0x02
					}
				}
				valp = vfo_strings[vfo];
    33f0:	8f a1       	ldd	r24, Y+39	; 0x27
    33f2:	98 a5       	ldd	r25, Y+40	; 0x28
    33f4:	fc 01       	movw	r30, r24
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	88 2f       	mov	r24, r24
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	80 5c       	subi	r24, 0xC0	; 192
    3402:	9e 4f       	sbci	r25, 0xFE	; 254
    3404:	fc 01       	movw	r30, r24
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
				break;
    340e:	df c0       	rjmp	.+446    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>

			case PARAM_KEY:
				if (enc->getEvent() == ENC_CW_EVENT) {
    3410:	89 a5       	ldd	r24, Y+41	; 0x29
    3412:	9a a5       	ldd	r25, Y+42	; 0x2a
    3414:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3418:	98 2f       	mov	r25, r24
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	91 30       	cpi	r25, 0x01	; 1
    341e:	09 f0       	breq	.+2      	; 0x3422 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5e2>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	88 23       	and	r24, r24
    3424:	a9 f0       	breq	.+42     	; 0x3450 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x610>
					key = (key_t)((int)key + 1);
    3426:	8f a1       	ldd	r24, Y+39	; 0x27
    3428:	98 a5       	ldd	r25, Y+40	; 0x28
    342a:	fc 01       	movw	r30, r24
    342c:	85 81       	ldd	r24, Z+5	; 0x05
    342e:	21 e0       	ldi	r18, 0x01	; 1
    3430:	28 0f       	add	r18, r24
    3432:	8f a1       	ldd	r24, Y+39	; 0x27
    3434:	98 a5       	ldd	r25, Y+40	; 0x28
    3436:	fc 01       	movw	r30, r24
    3438:	25 83       	std	Z+5, r18	; 0x05
					if (key == END_OF_KEY) {
    343a:	8f a1       	ldd	r24, Y+39	; 0x27
    343c:	98 a5       	ldd	r25, Y+40	; 0x28
    343e:	fc 01       	movw	r30, r24
    3440:	85 81       	ldd	r24, Z+5	; 0x05
    3442:	83 30       	cpi	r24, 0x03	; 3
    3444:	31 f5       	brne	.+76     	; 0x3492 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x652>
						key = KEY_ST;
    3446:	8f a1       	ldd	r24, Y+39	; 0x27
    3448:	98 a5       	ldd	r25, Y+40	; 0x28
    344a:	fc 01       	movw	r30, r24
    344c:	15 82       	std	Z+5, r1	; 0x05
    344e:	21 c0       	rjmp	.+66     	; 0x3492 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x652>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    3450:	89 a5       	ldd	r24, Y+41	; 0x29
    3452:	9a a5       	ldd	r25, Y+42	; 0x2a
    3454:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3458:	98 2f       	mov	r25, r24
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	92 30       	cpi	r25, 0x02	; 2
    345e:	09 f0       	breq	.+2      	; 0x3462 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x622>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	88 23       	and	r24, r24
    3464:	b1 f0       	breq	.+44     	; 0x3492 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x652>
					if (key == KEY_ST) {
    3466:	8f a1       	ldd	r24, Y+39	; 0x27
    3468:	98 a5       	ldd	r25, Y+40	; 0x28
    346a:	fc 01       	movw	r30, r24
    346c:	85 81       	ldd	r24, Z+5	; 0x05
    346e:	88 23       	and	r24, r24
    3470:	31 f4       	brne	.+12     	; 0x347e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x63e>
						key = KEY_PDLS;
    3472:	8f a1       	ldd	r24, Y+39	; 0x27
    3474:	98 a5       	ldd	r25, Y+40	; 0x28
    3476:	22 e0       	ldi	r18, 0x02	; 2
    3478:	fc 01       	movw	r30, r24
    347a:	25 83       	std	Z+5, r18	; 0x05
    347c:	0a c0       	rjmp	.+20     	; 0x3492 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x652>
					} else {
						key = (key_t)((int)key - 1);
    347e:	8f a1       	ldd	r24, Y+39	; 0x27
    3480:	98 a5       	ldd	r25, Y+40	; 0x28
    3482:	fc 01       	movw	r30, r24
    3484:	85 81       	ldd	r24, Z+5	; 0x05
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	28 0f       	add	r18, r24
    348a:	8f a1       	ldd	r24, Y+39	; 0x27
    348c:	98 a5       	ldd	r25, Y+40	; 0x28
    348e:	fc 01       	movw	r30, r24
    3490:	25 83       	std	Z+5, r18	; 0x05
					}
				}
				valp = key_strings[key];
    3492:	8f a1       	ldd	r24, Y+39	; 0x27
    3494:	98 a5       	ldd	r25, Y+40	; 0x28
    3496:	fc 01       	movw	r30, r24
    3498:	85 81       	ldd	r24, Z+5	; 0x05
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	86 5b       	subi	r24, 0xB6	; 182
    34a4:	9e 4f       	sbci	r25, 0xFE	; 254
    34a6:	fc 01       	movw	r30, r24
    34a8:	80 81       	ld	r24, Z
    34aa:	91 81       	ldd	r25, Z+1	; 0x01
    34ac:	9a 83       	std	Y+2, r25	; 0x02
    34ae:	89 83       	std	Y+1, r24	; 0x01
				break;
    34b0:	8e c0       	rjmp	.+284    	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>

			case PARAM_KEY_SPEED:
				if (enc->getEvent() == ENC_CW_EVENT) {
    34b2:	89 a5       	ldd	r24, Y+41	; 0x29
    34b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    34ba:	98 2f       	mov	r25, r24
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	91 30       	cpi	r25, 0x01	; 1
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x684>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	88 23       	and	r24, r24
    34c6:	b1 f0       	breq	.+44     	; 0x34f4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6b4>
					speed++;
    34c8:	8f a1       	ldd	r24, Y+39	; 0x27
    34ca:	98 a5       	ldd	r25, Y+40	; 0x28
    34cc:	fc 01       	movw	r30, r24
    34ce:	86 81       	ldd	r24, Z+6	; 0x06
    34d0:	21 e0       	ldi	r18, 0x01	; 1
    34d2:	28 0f       	add	r18, r24
    34d4:	8f a1       	ldd	r24, Y+39	; 0x27
    34d6:	98 a5       	ldd	r25, Y+40	; 0x28
    34d8:	fc 01       	movw	r30, r24
    34da:	26 83       	std	Z+6, r18	; 0x06
					if (speed > 25) {
    34dc:	8f a1       	ldd	r24, Y+39	; 0x27
    34de:	98 a5       	ldd	r25, Y+40	; 0x28
    34e0:	fc 01       	movw	r30, r24
    34e2:	86 81       	ldd	r24, Z+6	; 0x06
    34e4:	8a 31       	cpi	r24, 0x1A	; 26
    34e6:	30 f1       	brcs	.+76     	; 0x3534 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6f4>
						speed = 25;
    34e8:	8f a1       	ldd	r24, Y+39	; 0x27
    34ea:	98 a5       	ldd	r25, Y+40	; 0x28
    34ec:	29 e1       	ldi	r18, 0x19	; 25
    34ee:	fc 01       	movw	r30, r24
    34f0:	26 83       	std	Z+6, r18	; 0x06
    34f2:	20 c0       	rjmp	.+64     	; 0x3534 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6f4>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    34f4:	89 a5       	ldd	r24, Y+41	; 0x29
    34f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    34fc:	98 2f       	mov	r25, r24
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	92 30       	cpi	r25, 0x02	; 2
    3502:	09 f0       	breq	.+2      	; 0x3506 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6c6>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	88 23       	and	r24, r24
    3508:	a9 f0       	breq	.+42     	; 0x3534 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6f4>
					speed--;
    350a:	8f a1       	ldd	r24, Y+39	; 0x27
    350c:	98 a5       	ldd	r25, Y+40	; 0x28
    350e:	fc 01       	movw	r30, r24
    3510:	86 81       	ldd	r24, Z+6	; 0x06
    3512:	2f ef       	ldi	r18, 0xFF	; 255
    3514:	28 0f       	add	r18, r24
    3516:	8f a1       	ldd	r24, Y+39	; 0x27
    3518:	98 a5       	ldd	r25, Y+40	; 0x28
    351a:	fc 01       	movw	r30, r24
    351c:	26 83       	std	Z+6, r18	; 0x06
					if (speed < 5) {
    351e:	8f a1       	ldd	r24, Y+39	; 0x27
    3520:	98 a5       	ldd	r25, Y+40	; 0x28
    3522:	fc 01       	movw	r30, r24
    3524:	86 81       	ldd	r24, Z+6	; 0x06
    3526:	85 30       	cpi	r24, 0x05	; 5
    3528:	28 f4       	brcc	.+10     	; 0x3534 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6f4>
						speed = 5;
    352a:	8f a1       	ldd	r24, Y+39	; 0x27
    352c:	98 a5       	ldd	r25, Y+40	; 0x28
    352e:	25 e0       	ldi	r18, 0x05	; 5
    3530:	fc 01       	movw	r30, r24
    3532:	26 83       	std	Z+6, r18	; 0x06
					}
				}
				sprintf(buf,"%2i", speed);
    3534:	8f a1       	ldd	r24, Y+39	; 0x27
    3536:	98 a5       	ldd	r25, Y+40	; 0x28
    3538:	fc 01       	movw	r30, r24
    353a:	86 81       	ldd	r24, Z+6	; 0x06
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	29 2f       	mov	r18, r25
    3542:	2f 93       	push	r18
    3544:	8f 93       	push	r24
    3546:	81 ee       	ldi	r24, 0xE1	; 225
    3548:	92 e0       	ldi	r25, 0x02	; 2
    354a:	89 2f       	mov	r24, r25
    354c:	8f 93       	push	r24
    354e:	81 ee       	ldi	r24, 0xE1	; 225
    3550:	92 e0       	ldi	r25, 0x02	; 2
    3552:	8f 93       	push	r24
    3554:	ce 01       	movw	r24, r28
    3556:	47 96       	adiw	r24, 0x17	; 23
    3558:	29 2f       	mov	r18, r25
    355a:	2f 93       	push	r18
    355c:	8f 93       	push	r24
    355e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <sprintf>
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
				valp = buf;
    356e:	ce 01       	movw	r24, r28
    3570:	47 96       	adiw	r24, 0x17	; 23
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
				break;
    3576:	2b c0       	rjmp	.+86     	; 0x35ce <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x78e>

			case PARAM_ACT_VFO:
				if (enc->getEvent() != ENC_NO_EVENT) {
    3578:	89 a5       	ldd	r24, Y+41	; 0x29
    357a:	9a a5       	ldd	r25, Y+42	; 0x2a
    357c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3580:	98 2f       	mov	r25, r24
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	99 23       	and	r25, r25
    3586:	09 f4       	brne	.+2      	; 0x358a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x74a>
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	88 23       	and	r24, r24
    358c:	81 f0       	breq	.+32     	; 0x35ae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x76e>
					if (activeVfo == RX) {
    358e:	8f a1       	ldd	r24, Y+39	; 0x27
    3590:	98 a5       	ldd	r25, Y+40	; 0x28
    3592:	fc 01       	movw	r30, r24
    3594:	83 81       	ldd	r24, Z+3	; 0x03
    3596:	88 23       	and	r24, r24
    3598:	31 f4       	brne	.+12     	; 0x35a6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x766>
						activeVfo = TX;
    359a:	8f a1       	ldd	r24, Y+39	; 0x27
    359c:	98 a5       	ldd	r25, Y+40	; 0x28
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	fc 01       	movw	r30, r24
    35a2:	23 83       	std	Z+3, r18	; 0x03
    35a4:	04 c0       	rjmp	.+8      	; 0x35ae <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x76e>
					} else {
						activeVfo = RX;
    35a6:	8f a1       	ldd	r24, Y+39	; 0x27
    35a8:	98 a5       	ldd	r25, Y+40	; 0x28
    35aa:	fc 01       	movw	r30, r24
    35ac:	13 82       	std	Z+3, r1	; 0x03
					}
				}
				valp =  vfoact_strings[activeVfo];
    35ae:	8f a1       	ldd	r24, Y+39	; 0x27
    35b0:	98 a5       	ldd	r25, Y+40	; 0x28
    35b2:	fc 01       	movw	r30, r24
    35b4:	83 81       	ldd	r24, Z+3	; 0x03
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	8a 5b       	subi	r24, 0xBA	; 186
    35c0:	9e 4f       	sbci	r25, 0xFE	; 254
    35c2:	fc 01       	movw	r30, r24
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
				break;
    35cc:	00 00       	nop

			default:
				break;
		}
		enc->clearEvent();
    35ce:	89 a5       	ldd	r24, Y+41	; 0x29
    35d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    35d2:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN7Encoder10clearEventEv>
		line = param_display[curParam].val_psn.line;
    35d6:	8f a1       	ldd	r24, Y+39	; 0x27
    35d8:	98 a5       	ldd	r25, Y+40	; 0x28
    35da:	83 5b       	subi	r24, 0xB3	; 179
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	fc 01       	movw	r30, r24
    35e0:	80 81       	ld	r24, Z
    35e2:	48 2f       	mov	r20, r24
    35e4:	50 e0       	ldi	r21, 0x00	; 0
    35e6:	2f a1       	ldd	r18, Y+39	; 0x27
    35e8:	38 a5       	ldd	r19, Y+40	; 0x28
    35ea:	6b e0       	ldi	r22, 0x0B	; 11
    35ec:	64 9f       	mul	r22, r20
    35ee:	c0 01       	movw	r24, r0
    35f0:	65 9f       	mul	r22, r21
    35f2:	90 0d       	add	r25, r0
    35f4:	11 24       	eor	r1, r1
    35f6:	82 0f       	add	r24, r18
    35f8:	93 1f       	adc	r25, r19
    35fa:	42 96       	adiw	r24, 0x12	; 18
    35fc:	fc 01       	movw	r30, r24
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	9c 8b       	std	Y+20, r25	; 0x14
    3604:	8b 8b       	std	Y+19, r24	; 0x13
		col =  param_display[curParam].val_psn.col;
    3606:	8f a1       	ldd	r24, Y+39	; 0x27
    3608:	98 a5       	ldd	r25, Y+40	; 0x28
    360a:	83 5b       	subi	r24, 0xB3	; 179
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	fc 01       	movw	r30, r24
    3610:	80 81       	ld	r24, Z
    3612:	48 2f       	mov	r20, r24
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	2f a1       	ldd	r18, Y+39	; 0x27
    3618:	38 a5       	ldd	r19, Y+40	; 0x28
    361a:	6b e0       	ldi	r22, 0x0B	; 11
    361c:	64 9f       	mul	r22, r20
    361e:	c0 01       	movw	r24, r0
    3620:	65 9f       	mul	r22, r21
    3622:	90 0d       	add	r25, r0
    3624:	11 24       	eor	r1, r1
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	44 96       	adiw	r24, 0x14	; 20
    362c:	fc 01       	movw	r30, r24
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	9e 8b       	std	Y+22, r25	; 0x16
    3634:	8d 8b       	std	Y+21, r24	; 0x15
		lcd->gotoxy(line,col);
    3636:	3d 89       	ldd	r19, Y+21	; 0x15
    3638:	2b 89       	ldd	r18, Y+19	; 0x13
    363a:	8d a5       	ldd	r24, Y+45	; 0x2d
    363c:	9e a5       	ldd	r25, Y+46	; 0x2e
    363e:	43 2f       	mov	r20, r19
    3640:	62 2f       	mov	r22, r18
    3642:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN3Lcd6gotoxyEhh>
		lcd->puts(valp, fg_white);
    3646:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <fg_white>
    364a:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <fg_white+0x1>
    364e:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <fg_white+0x2>
    3652:	69 81       	ldd	r22, Y+1	; 0x01
    3654:	7a 81       	ldd	r23, Y+2	; 0x02
    3656:	ed a5       	ldd	r30, Y+45	; 0x2d
    3658:	fe a5       	ldd	r31, Y+46	; 0x2e
    365a:	9c 01       	movw	r18, r24
    365c:	4a 2f       	mov	r20, r26
    365e:	cf 01       	movw	r24, r30
    3660:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN3Lcd4putsEPKc9_pixColor>
	}


}
    3664:	ae 96       	adiw	r28, 0x2e	; 46
    3666:	0f b6       	in	r0, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	de bf       	out	0x3e, r29	; 62
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	08 95       	ret

0000367e <_ZN2SwC1Ehh>:


//
// initialize switches
//
Sw::Sw(uint8_t s, volatile uint8_t p) {
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	00 d0       	rcall	.+0      	; 0x3684 <_ZN2SwC1Ehh+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <_ZN2SwC1Ehh+0x8>
    3686:	00 d0       	rcall	.+0      	; 0x3688 <_ZN2SwC1Ehh+0xa>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9c 83       	std	Y+4, r25	; 0x04
    368e:	8b 83       	std	Y+3, r24	; 0x03
    3690:	6d 83       	std	Y+5, r22	; 0x05
    3692:	4e 83       	std	Y+6, r20	; 0x06
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN8CallbackC1Ev>
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	9c 81       	ldd	r25, Y+4	; 0x04
    36a0:	21 e0       	ldi	r18, 0x01	; 1
    36a2:	33 e0       	ldi	r19, 0x03	; 3
    36a4:	fc 01       	movw	r30, r24
    36a6:	31 83       	std	Z+1, r19	; 0x01
    36a8:	20 83       	st	Z, r18
	uint8_t temp;
	uint8_t msk = (1 << s);
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	02 c0       	rjmp	.+4      	; 0x36ba <_ZN2SwC1Ehh+0x3c>
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	2a 95       	dec	r18
    36bc:	e2 f7       	brpl	.-8      	; 0x36b6 <_ZN2SwC1Ehh+0x38>
    36be:	89 83       	std	Y+1, r24	; 0x01

	port = (volatile uint8_t *)p;
    36c0:	8e 81       	ldd	r24, Y+6	; 0x06
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	9c 01       	movw	r18, r24
    36c8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ca:	9c 81       	ldd	r25, Y+4	; 0x04
    36cc:	fc 01       	movw	r30, r24
    36ce:	34 83       	std	Z+4, r19	; 0x04
    36d0:	23 83       	std	Z+3, r18	; 0x03
	pin = (volatile uint8_t *)(p-2);
    36d2:	8e 81       	ldd	r24, Y+6	; 0x06
    36d4:	88 2f       	mov	r24, r24
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	02 97       	sbiw	r24, 0x02	; 2
    36da:	9c 01       	movw	r18, r24
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	9c 81       	ldd	r25, Y+4	; 0x04
    36e0:	fc 01       	movw	r30, r24
    36e2:	36 83       	std	Z+6, r19	; 0x06
    36e4:	25 83       	std	Z+5, r18	; 0x05
	ddr = (volatile uint8_t *)(p-1);
    36e6:	8e 81       	ldd	r24, Y+6	; 0x06
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	9c 01       	movw	r18, r24
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	fc 01       	movw	r30, r24
    36f6:	30 87       	std	Z+8, r19	; 0x08
    36f8:	27 83       	std	Z+7, r18	; 0x07
	swNum = s;
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	9c 81       	ldd	r25, Y+4	; 0x04
    36fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3700:	fc 01       	movw	r30, r24
    3702:	22 83       	std	Z+2, r18	; 0x02

	// set bit as input
	temp = *ddr;
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	9c 81       	ldd	r25, Y+4	; 0x04
    3708:	fc 01       	movw	r30, r24
    370a:	87 81       	ldd	r24, Z+7	; 0x07
    370c:	90 85       	ldd	r25, Z+8	; 0x08
    370e:	fc 01       	movw	r30, r24
    3710:	80 81       	ld	r24, Z
    3712:	8a 83       	std	Y+2, r24	; 0x02
	temp &= ~msk;
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	98 2f       	mov	r25, r24
    3718:	90 95       	com	r25
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	89 23       	and	r24, r25
    371e:	8a 83       	std	Y+2, r24	; 0x02
	*ddr = temp;
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	fc 01       	movw	r30, r24
    3726:	87 81       	ldd	r24, Z+7	; 0x07
    3728:	90 85       	ldd	r25, Z+8	; 0x08
    372a:	2a 81       	ldd	r18, Y+2	; 0x02
    372c:	fc 01       	movw	r30, r24
    372e:	20 83       	st	Z, r18

	// enable input pullup
	temp = *port;
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	9c 81       	ldd	r25, Y+4	; 0x04
    3734:	fc 01       	movw	r30, r24
    3736:	83 81       	ldd	r24, Z+3	; 0x03
    3738:	94 81       	ldd	r25, Z+4	; 0x04
    373a:	fc 01       	movw	r30, r24
    373c:	80 81       	ld	r24, Z
    373e:	8a 83       	std	Y+2, r24	; 0x02
	temp |= msk;
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	89 2b       	or	r24, r25
    3746:	8a 83       	std	Y+2, r24	; 0x02
	*port = temp;
    3748:	8b 81       	ldd	r24, Y+3	; 0x03
    374a:	9c 81       	ldd	r25, Y+4	; 0x04
    374c:	fc 01       	movw	r30, r24
    374e:	83 81       	ldd	r24, Z+3	; 0x03
    3750:	94 81       	ldd	r25, Z+4	; 0x04
    3752:	2a 81       	ldd	r18, Y+2	; 0x02
    3754:	fc 01       	movw	r30, r24
    3756:	20 83       	st	Z, r18

	// get the current state of the switch
	temp = *pin & msk;
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	9c 81       	ldd	r25, Y+4	; 0x04
    375c:	fc 01       	movw	r30, r24
    375e:	85 81       	ldd	r24, Z+5	; 0x05
    3760:	96 81       	ldd	r25, Z+6	; 0x06
    3762:	fc 01       	movw	r30, r24
    3764:	90 81       	ld	r25, Z
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	89 23       	and	r24, r25
    376a:	8a 83       	std	Y+2, r24	; 0x02
	if (temp) {
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	88 23       	and	r24, r24
    3770:	29 f0       	breq	.+10     	; 0x377c <_ZN2SwC1Ehh+0xfe>
		state = PB_OPEN;
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	fc 01       	movw	r30, r24
    3778:	11 86       	std	Z+9, r1	; 0x09
    377a:	05 c0       	rjmp	.+10     	; 0x3786 <_ZN2SwC1Ehh+0x108>
	}	else {
		state = PB_CLOSE;
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	22 e0       	ldi	r18, 0x02	; 2
    3782:	fc 01       	movw	r30, r24
    3784:	21 87       	std	Z+9, r18	; 0x09
	}
	lastEvent = EV_NONE;
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	9c 81       	ldd	r25, Y+4	; 0x04
    378a:	fc 01       	movw	r30, r24
    378c:	12 86       	std	Z+10, r1	; 0x0a
	Clock::registerPeriodic(this);
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN5Clock16registerPeriodicEP8Callback>
}
    3796:	26 96       	adiw	r28, 0x06	; 6
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	08 95       	ret

000037a8 <_ZN2Sw6updateEv>:


void Sw::update(void) {
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <_ZN2Sw6updateEv+0x6>
    37ae:	1f 92       	push	r1
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	9b 83       	std	Y+3, r25	; 0x03
    37b6:	8a 83       	std	Y+2, r24	; 0x02

uint8_t temp = *pin & (1 << swNum);
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	9b 81       	ldd	r25, Y+3	; 0x03
    37bc:	fc 01       	movw	r30, r24
    37be:	85 81       	ldd	r24, Z+5	; 0x05
    37c0:	96 81       	ldd	r25, Z+6	; 0x06
    37c2:	fc 01       	movw	r30, r24
    37c4:	80 81       	ld	r24, Z
    37c6:	48 2f       	mov	r20, r24
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	9b 81       	ldd	r25, Y+3	; 0x03
    37cc:	fc 01       	movw	r30, r24
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	02 2e       	mov	r0, r18
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <_ZN2Sw6updateEv+0x38>
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	0a 94       	dec	r0
    37e2:	e2 f7       	brpl	.-8      	; 0x37dc <_ZN2Sw6updateEv+0x34>
    37e4:	84 23       	and	r24, r20
    37e6:	89 83       	std	Y+1, r24	; 0x01

	switch (state) {
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	9b 81       	ldd	r25, Y+3	; 0x03
    37ec:	fc 01       	movw	r30, r24
    37ee:	81 85       	ldd	r24, Z+9	; 0x09
    37f0:	88 2f       	mov	r24, r24
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	91 05       	cpc	r25, r1
    37f8:	b1 f0       	breq	.+44     	; 0x3826 <_ZN2Sw6updateEv+0x7e>
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	91 05       	cpc	r25, r1
    37fe:	1c f4       	brge	.+6      	; 0x3806 <_ZN2Sw6updateEv+0x5e>
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	41 f0       	breq	.+16     	; 0x3814 <_ZN2Sw6updateEv+0x6c>
    3804:	34 c0       	rjmp	.+104    	; 0x386e <_ZN2Sw6updateEv+0xc6>
    3806:	82 30       	cpi	r24, 0x02	; 2
    3808:	91 05       	cpc	r25, r1
    380a:	d9 f0       	breq	.+54     	; 0x3842 <_ZN2Sw6updateEv+0x9a>
    380c:	83 30       	cpi	r24, 0x03	; 3
    380e:	91 05       	cpc	r25, r1
    3810:	09 f1       	breq	.+66     	; 0x3854 <_ZN2Sw6updateEv+0xac>
    3812:	2d c0       	rjmp	.+90     	; 0x386e <_ZN2Sw6updateEv+0xc6>
	
		case PB_OPEN:
			if (!temp) {
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	88 23       	and	r24, r24
    3818:	29 f4       	brne	.+10     	; 0x3824 <_ZN2Sw6updateEv+0x7c>
				state = PB_CLOSE_DLY;
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	9b 81       	ldd	r25, Y+3	; 0x03
    381e:	21 e0       	ldi	r18, 0x01	; 1
    3820:	fc 01       	movw	r30, r24
    3822:	21 87       	std	Z+9, r18	; 0x09
			}
			break;
    3824:	24 c0       	rjmp	.+72     	; 0x386e <_ZN2Sw6updateEv+0xc6>

		case PB_CLOSE_DLY:
			if (!temp) {
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	88 23       	and	r24, r24
    382a:	51 f4       	brne	.+20     	; 0x3840 <_ZN2Sw6updateEv+0x98>
				state = PB_CLOSE;
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	22 e0       	ldi	r18, 0x02	; 2
    3832:	fc 01       	movw	r30, r24
    3834:	21 87       	std	Z+9, r18	; 0x09
				lastEvent = EV_CLOSE;
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	9b 81       	ldd	r25, Y+3	; 0x03
    383a:	22 e0       	ldi	r18, 0x02	; 2
    383c:	fc 01       	movw	r30, r24
    383e:	22 87       	std	Z+10, r18	; 0x0a
			}
			break;	
    3840:	16 c0       	rjmp	.+44     	; 0x386e <_ZN2Sw6updateEv+0xc6>
	
		case PB_CLOSE:
			if (temp) {
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	88 23       	and	r24, r24
    3846:	29 f0       	breq	.+10     	; 0x3852 <_ZN2Sw6updateEv+0xaa>
				state = PB_OPEN_DLY;
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	23 e0       	ldi	r18, 0x03	; 3
    384e:	fc 01       	movw	r30, r24
    3850:	21 87       	std	Z+9, r18	; 0x09
			}	
			break;
    3852:	0d c0       	rjmp	.+26     	; 0x386e <_ZN2Sw6updateEv+0xc6>

		case PB_OPEN_DLY:
			if (temp) {
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	88 23       	and	r24, r24
    3858:	49 f0       	breq	.+18     	; 0x386c <_ZN2Sw6updateEv+0xc4>
				state = PB_OPEN;
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	9b 81       	ldd	r25, Y+3	; 0x03
    385e:	fc 01       	movw	r30, r24
    3860:	11 86       	std	Z+9, r1	; 0x09
				lastEvent = EV_OPEN;
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	9b 81       	ldd	r25, Y+3	; 0x03
    3866:	21 e0       	ldi	r18, 0x01	; 1
    3868:	fc 01       	movw	r30, r24
    386a:	22 87       	std	Z+10, r18	; 0x0a
			}
			break;
    386c:	00 00       	nop
	}				
	
}
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	08 95       	ret

0000387a <_ZN2Sw8hasEventEv>:


bool	Sw::hasEvent(void) {
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	00 d0       	rcall	.+0      	; 0x3880 <_ZN2Sw8hasEventEv+0x6>
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	9a 83       	std	Y+2, r25	; 0x02
    3886:	89 83       	std	Y+1, r24	; 0x01
	if (lastEvent != EV_NONE) {
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	9a 81       	ldd	r25, Y+2	; 0x02
    388c:	fc 01       	movw	r30, r24
    388e:	82 85       	ldd	r24, Z+10	; 0x0a
    3890:	88 23       	and	r24, r24
    3892:	11 f0       	breq	.+4      	; 0x3898 <_ZN2Sw8hasEventEv+0x1e>
		return true;
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	01 c0       	rjmp	.+2      	; 0x389a <_ZN2Sw8hasEventEv+0x20>
	}
	return false;
    3898:	80 e0       	ldi	r24, 0x00	; 0
}
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	08 95       	ret

000038a4 <_ZN2Sw8getEventEv>:


event Sw::getEvent(void) {
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <_ZN2Sw8getEventEv+0x6>
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
	return lastEvent;
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	fc 01       	movw	r30, r24
    38b8:	82 85       	ldd	r24, Z+10	; 0x0a
}
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	08 95       	ret

000038c4 <_ZN2Sw10clearEventEv>:

void Sw::clearEvent(void) {
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <_ZN2Sw10clearEventEv+0x6>
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
	lastEvent = EV_NONE;
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	fc 01       	movw	r30, r24
    38d8:	12 86       	std	Z+10, r1	; 0x0a
}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	df 91       	pop	r29
    38e0:	cf 91       	pop	r28
    38e2:	08 95       	ret

000038e4 <_ZN2Sw8callbackEv>:


void Sw::callback(void) {
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <_ZN2Sw8callbackEv+0x6>
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	89 83       	std	Y+1, r24	; 0x01
	update();
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	58 df       	rcall	.-336    	; 0x37a8 <_ZN2Sw6updateEv>
    38f8:	0f 90       	pop	r0
}
    38fa:	0f 90       	pop	r0
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret

00003902 <_ZN2Sw8isClosedEv>:


bool Sw::isClosed(void) {
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	00 d0       	rcall	.+0      	; 0x3908 <_ZN2Sw8isClosedEv+0x6>
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    390c:	9a 83       	std	Y+2, r25	; 0x02
    390e:	89 83       	std	Y+1, r24	; 0x01

	return ((state == PB_CLOSE) || (state == PB_OPEN_DLY));
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	fc 01       	movw	r30, r24
    3916:	81 85       	ldd	r24, Z+9	; 0x09
    3918:	82 30       	cpi	r24, 0x02	; 2
    391a:	31 f0       	breq	.+12     	; 0x3928 <_ZN2Sw8isClosedEv+0x26>
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	fc 01       	movw	r30, r24
    3922:	81 85       	ldd	r24, Z+9	; 0x09
    3924:	83 30       	cpi	r24, 0x03	; 3
    3926:	11 f4       	brne	.+4      	; 0x392c <_ZN2Sw8isClosedEv+0x2a>
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	01 c0       	rjmp	.+2      	; 0x392e <_ZN2Sw8isClosedEv+0x2c>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	08 95       	ret

00003938 <uart_init>:
 #include "uart.h"



 void uart_init( void)
 {
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
 
 //  Set baud rate for 115200 
 	 UBRR0H = (uint8_t)( UBRR_115200 >> 8);
    3940:	85 ec       	ldi	r24, 0xC5	; 197
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	fc 01       	movw	r30, r24
    3946:	10 82       	st	Z, r1
	 UBRR0L = (uint8_t) UBRR_115200	;
    3948:	84 ec       	ldi	r24, 0xC4	; 196
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	28 e0       	ldi	r18, 0x08	; 8
    394e:	fc 01       	movw	r30, r24
    3950:	20 83       	st	Z, r18

//	 Enable receiver and transmitter
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    3952:	81 ec       	ldi	r24, 0xC1	; 193
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	28 e1       	ldi	r18, 0x18	; 24
    3958:	fc 01       	movw	r30, r24
    395a:	20 83       	st	Z, r18

//	8data, 2 stop bits
	 UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    395c:	82 ec       	ldi	r24, 0xC2	; 194
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	2e e0       	ldi	r18, 0x0E	; 14
    3962:	fc 01       	movw	r30, r24
    3964:	20 83       	st	Z, r18
}
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	08 95       	ret

0000396c <uart_getc>:

int uart_getc(FILE *f) {
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	00 d0       	rcall	.+0      	; 0x3972 <uart_getc+0x6>
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << RXC0)));
    397a:	00 00       	nop
    397c:	80 ec       	ldi	r24, 0xC0	; 192
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	fc 01       	movw	r30, r24
    3982:	80 81       	ld	r24, Z
    3984:	80 95       	com	r24
    3986:	88 1f       	adc	r24, r24
    3988:	88 27       	eor	r24, r24
    398a:	88 1f       	adc	r24, r24
    398c:	88 23       	and	r24, r24
    398e:	b1 f7       	brne	.-20     	; 0x397c <uart_getc+0x10>
	return UDR0;
    3990:	86 ec       	ldi	r24, 0xC6	; 198
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	fc 01       	movw	r30, r24
    3996:	80 81       	ld	r24, Z
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
}
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	08 95       	ret

000039a6 <uart_putc>:


int  uart_putc(char c, FILE *f) {
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <uart_putc+0x6>
    39ac:	1f 92       	push	r1
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	7b 83       	std	Y+3, r23	; 0x03
    39b6:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') {
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	8a 30       	cpi	r24, 0x0A	; 10
    39bc:	29 f4       	brne	.+10     	; 0x39c8 <uart_putc+0x22>
		uart_putc('\r', f);
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	9b 81       	ldd	r25, Y+3	; 0x03
    39c2:	bc 01       	movw	r22, r24
    39c4:	8d e0       	ldi	r24, 0x0D	; 13
    39c6:	ef df       	rcall	.-34     	; 0x39a6 <uart_putc>
    39c8:	00 00       	nop
	}
	while (!(UCSR0A & (1 << UDRE0)));
    39ca:	80 ec       	ldi	r24, 0xC0	; 192
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	fc 01       	movw	r30, r24
    39d0:	80 81       	ld	r24, Z
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	80 72       	andi	r24, 0x20	; 32
    39d8:	99 27       	eor	r25, r25
    39da:	21 e0       	ldi	r18, 0x01	; 1
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	09 f0       	breq	.+2      	; 0x39e2 <uart_putc+0x3c>
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	22 23       	and	r18, r18
    39e4:	91 f7       	brne	.-28     	; 0x39ca <uart_putc+0x24>
    39e6:	86 ec       	ldi	r24, 0xC6	; 198
	UDR0 = c;
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	29 81       	ldd	r18, Y+1	; 0x01
    39ec:	fc 01       	movw	r30, r24
    39ee:	20 83       	st	Z, r18
    39f0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	0f 90       	pop	r0
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <_ZN3vfoC1EP7EncoderP13vfoParametersj>:
	1000000
};



vfo::vfo(Encoder *enc, vfoParameters *vf, uint16_t l) {
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	2a 97       	sbiw	r28, 0x0a	; 10
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	9c 83       	std	Y+4, r25	; 0x04
    3a16:	8b 83       	std	Y+3, r24	; 0x03
    3a18:	7e 83       	std	Y+6, r23	; 0x06
    3a1a:	6d 83       	std	Y+5, r22	; 0x05
    3a1c:	58 87       	std	Y+8, r21	; 0x08
    3a1e:	4f 83       	std	Y+7, r20	; 0x07
    3a20:	3a 87       	std	Y+10, r19	; 0x0a
    3a22:	29 87       	std	Y+9, r18	; 0x09

	for (int i=0; i< END_OF_BAND; i++) {
    3a24:	1a 82       	std	Y+2, r1	; 0x02
    3a26:	19 82       	std	Y+1, r1	; 0x01
    3a28:	06 c1       	rjmp	.+524    	; 0x3c36 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x236>
		vfoData[i].rxFreq = vf[i].rxFreq;
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	9c 01       	movw	r18, r24
    3a34:	22 0f       	add	r18, r18
    3a36:	33 1f       	adc	r19, r19
    3a38:	22 0f       	add	r18, r18
    3a3a:	33 1f       	adc	r19, r19
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	82 0f       	add	r24, r18
    3a42:	93 1f       	adc	r25, r19
    3a44:	2f 81       	ldd	r18, Y+7	; 0x07
    3a46:	38 85       	ldd	r19, Y+8	; 0x08
    3a48:	82 0f       	add	r24, r18
    3a4a:	93 1f       	adc	r25, r19
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	20 81       	ld	r18, Z
    3a50:	31 81       	ldd	r19, Z+1	; 0x01
    3a52:	42 81       	ldd	r20, Z+2	; 0x02
    3a54:	53 81       	ldd	r21, Z+3	; 0x03
    3a56:	6b 81       	ldd	r22, Y+3	; 0x03
    3a58:	7c 81       	ldd	r23, Y+4	; 0x04
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	fc 01       	movw	r30, r24
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	ee 0f       	add	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	8e 0f       	add	r24, r30
    3a72:	9f 1f       	adc	r25, r31
    3a74:	86 0f       	add	r24, r22
    3a76:	97 1f       	adc	r25, r23
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 83       	st	Z, r18
    3a7c:	31 83       	std	Z+1, r19	; 0x01
    3a7e:	42 83       	std	Z+2, r20	; 0x02
    3a80:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].rxOffset = vf[i].rxOffset;
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	9a 81       	ldd	r25, Y+2	; 0x02
    3a86:	88 0f       	add	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	9c 01       	movw	r18, r24
    3a8c:	22 0f       	add	r18, r18
    3a8e:	33 1f       	adc	r19, r19
    3a90:	22 0f       	add	r18, r18
    3a92:	33 1f       	adc	r19, r19
    3a94:	22 0f       	add	r18, r18
    3a96:	33 1f       	adc	r19, r19
    3a98:	82 0f       	add	r24, r18
    3a9a:	93 1f       	adc	r25, r19
    3a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a9e:	38 85       	ldd	r19, Y+8	; 0x08
    3aa0:	82 0f       	add	r24, r18
    3aa2:	93 1f       	adc	r25, r19
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	24 81       	ldd	r18, Z+4	; 0x04
    3aa8:	35 81       	ldd	r19, Z+5	; 0x05
    3aaa:	46 81       	ldd	r20, Z+6	; 0x06
    3aac:	57 81       	ldd	r21, Z+7	; 0x07
    3aae:	6b 81       	ldd	r22, Y+3	; 0x03
    3ab0:	7c 81       	ldd	r23, Y+4	; 0x04
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	fc 01       	movw	r30, r24
    3abc:	ee 0f       	add	r30, r30
    3abe:	ff 1f       	adc	r31, r31
    3ac0:	ee 0f       	add	r30, r30
    3ac2:	ff 1f       	adc	r31, r31
    3ac4:	ee 0f       	add	r30, r30
    3ac6:	ff 1f       	adc	r31, r31
    3ac8:	8e 0f       	add	r24, r30
    3aca:	9f 1f       	adc	r25, r31
    3acc:	86 0f       	add	r24, r22
    3ace:	97 1f       	adc	r25, r23
    3ad0:	04 96       	adiw	r24, 0x04	; 4
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	20 83       	st	Z, r18
    3ad6:	31 83       	std	Z+1, r19	; 0x01
    3ad8:	42 83       	std	Z+2, r20	; 0x02
    3ada:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].rxMult = vf[i].rxMult;
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	9c 01       	movw	r18, r24
    3ae6:	22 0f       	add	r18, r18
    3ae8:	33 1f       	adc	r19, r19
    3aea:	22 0f       	add	r18, r18
    3aec:	33 1f       	adc	r19, r19
    3aee:	22 0f       	add	r18, r18
    3af0:	33 1f       	adc	r19, r19
    3af2:	82 0f       	add	r24, r18
    3af4:	93 1f       	adc	r25, r19
    3af6:	2f 81       	ldd	r18, Y+7	; 0x07
    3af8:	38 85       	ldd	r19, Y+8	; 0x08
    3afa:	82 0f       	add	r24, r18
    3afc:	93 1f       	adc	r25, r19
    3afe:	fc 01       	movw	r30, r24
    3b00:	60 85       	ldd	r22, Z+8	; 0x08
    3b02:	2b 81       	ldd	r18, Y+3	; 0x03
    3b04:	3c 81       	ldd	r19, Y+4	; 0x04
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0a:	88 0f       	add	r24, r24
    3b0c:	99 1f       	adc	r25, r25
    3b0e:	ac 01       	movw	r20, r24
    3b10:	44 0f       	add	r20, r20
    3b12:	55 1f       	adc	r21, r21
    3b14:	44 0f       	add	r20, r20
    3b16:	55 1f       	adc	r21, r21
    3b18:	44 0f       	add	r20, r20
    3b1a:	55 1f       	adc	r21, r21
    3b1c:	84 0f       	add	r24, r20
    3b1e:	95 1f       	adc	r25, r21
    3b20:	82 0f       	add	r24, r18
    3b22:	93 1f       	adc	r25, r19
    3b24:	08 96       	adiw	r24, 0x08	; 8
    3b26:	fc 01       	movw	r30, r24
    3b28:	60 83       	st	Z, r22
		vfoData[i].txFreq = vf[i].txFreq;
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	9c 01       	movw	r18, r24
    3b34:	22 0f       	add	r18, r18
    3b36:	33 1f       	adc	r19, r19
    3b38:	22 0f       	add	r18, r18
    3b3a:	33 1f       	adc	r19, r19
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	82 0f       	add	r24, r18
    3b42:	93 1f       	adc	r25, r19
    3b44:	2f 81       	ldd	r18, Y+7	; 0x07
    3b46:	38 85       	ldd	r19, Y+8	; 0x08
    3b48:	82 0f       	add	r24, r18
    3b4a:	93 1f       	adc	r25, r19
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	21 85       	ldd	r18, Z+9	; 0x09
    3b50:	32 85       	ldd	r19, Z+10	; 0x0a
    3b52:	43 85       	ldd	r20, Z+11	; 0x0b
    3b54:	54 85       	ldd	r21, Z+12	; 0x0c
    3b56:	6b 81       	ldd	r22, Y+3	; 0x03
    3b58:	7c 81       	ldd	r23, Y+4	; 0x04
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	fc 01       	movw	r30, r24
    3b64:	ee 0f       	add	r30, r30
    3b66:	ff 1f       	adc	r31, r31
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	ee 0f       	add	r30, r30
    3b6e:	ff 1f       	adc	r31, r31
    3b70:	8e 0f       	add	r24, r30
    3b72:	9f 1f       	adc	r25, r31
    3b74:	86 0f       	add	r24, r22
    3b76:	97 1f       	adc	r25, r23
    3b78:	09 96       	adiw	r24, 0x09	; 9
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	20 83       	st	Z, r18
    3b7e:	31 83       	std	Z+1, r19	; 0x01
    3b80:	42 83       	std	Z+2, r20	; 0x02
    3b82:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].txOffset = vf[i].txOffset;
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	88 0f       	add	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	22 0f       	add	r18, r18
    3b90:	33 1f       	adc	r19, r19
    3b92:	22 0f       	add	r18, r18
    3b94:	33 1f       	adc	r19, r19
    3b96:	22 0f       	add	r18, r18
    3b98:	33 1f       	adc	r19, r19
    3b9a:	82 0f       	add	r24, r18
    3b9c:	93 1f       	adc	r25, r19
    3b9e:	2f 81       	ldd	r18, Y+7	; 0x07
    3ba0:	38 85       	ldd	r19, Y+8	; 0x08
    3ba2:	82 0f       	add	r24, r18
    3ba4:	93 1f       	adc	r25, r19
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	25 85       	ldd	r18, Z+13	; 0x0d
    3baa:	36 85       	ldd	r19, Z+14	; 0x0e
    3bac:	47 85       	ldd	r20, Z+15	; 0x0f
    3bae:	50 89       	ldd	r21, Z+16	; 0x10
    3bb0:	6b 81       	ldd	r22, Y+3	; 0x03
    3bb2:	7c 81       	ldd	r23, Y+4	; 0x04
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	ee 0f       	add	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	ee 0f       	add	r30, r30
    3bc4:	ff 1f       	adc	r31, r31
    3bc6:	ee 0f       	add	r30, r30
    3bc8:	ff 1f       	adc	r31, r31
    3bca:	8e 0f       	add	r24, r30
    3bcc:	9f 1f       	adc	r25, r31
    3bce:	86 0f       	add	r24, r22
    3bd0:	97 1f       	adc	r25, r23
    3bd2:	0d 96       	adiw	r24, 0x0d	; 13
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	20 83       	st	Z, r18
    3bd8:	31 83       	std	Z+1, r19	; 0x01
    3bda:	42 83       	std	Z+2, r20	; 0x02
    3bdc:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].txMult = vf[i].txMult;
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	9c 01       	movw	r18, r24
    3be8:	22 0f       	add	r18, r18
    3bea:	33 1f       	adc	r19, r19
    3bec:	22 0f       	add	r18, r18
    3bee:	33 1f       	adc	r19, r19
    3bf0:	22 0f       	add	r18, r18
    3bf2:	33 1f       	adc	r19, r19
    3bf4:	82 0f       	add	r24, r18
    3bf6:	93 1f       	adc	r25, r19
    3bf8:	2f 81       	ldd	r18, Y+7	; 0x07
    3bfa:	38 85       	ldd	r19, Y+8	; 0x08
    3bfc:	82 0f       	add	r24, r18
    3bfe:	93 1f       	adc	r25, r19
    3c00:	fc 01       	movw	r30, r24
    3c02:	61 89       	ldd	r22, Z+17	; 0x11
    3c04:	2b 81       	ldd	r18, Y+3	; 0x03
    3c06:	3c 81       	ldd	r19, Y+4	; 0x04
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	ac 01       	movw	r20, r24
    3c12:	44 0f       	add	r20, r20
    3c14:	55 1f       	adc	r21, r21
    3c16:	44 0f       	add	r20, r20
    3c18:	55 1f       	adc	r21, r21
    3c1a:	44 0f       	add	r20, r20
    3c1c:	55 1f       	adc	r21, r21
    3c1e:	84 0f       	add	r24, r20
    3c20:	95 1f       	adc	r25, r21
    3c22:	82 0f       	add	r24, r18
    3c24:	93 1f       	adc	r25, r19
    3c26:	41 96       	adiw	r24, 0x11	; 17
    3c28:	fc 01       	movw	r30, r24
    3c2a:	60 83       	st	Z, r22



vfo::vfo(Encoder *enc, vfoParameters *vf, uint16_t l) {

	for (int i=0; i< END_OF_BAND; i++) {
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	9a 83       	std	Y+2, r25	; 0x02
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	09 97       	sbiw	r24, 0x09	; 9
    3c3c:	0c f4       	brge	.+2      	; 0x3c40 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x240>
    3c3e:	f5 ce       	rjmp	.-534    	; 0x3a2a <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x2a>
		vfoData[i].rxMult = vf[i].rxMult;
		vfoData[i].txFreq = vf[i].txFreq;
		vfoData[i].txOffset = vf[i].txOffset;
		vfoData[i].txMult = vf[i].txMult;
	}
	this->enc = enc;
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	89 55       	subi	r24, 0x59	; 89
    3c46:	9f 4f       	sbci	r25, 0xFF	; 255
    3c48:	2d 81       	ldd	r18, Y+5	; 0x05
    3c4a:	3e 81       	ldd	r19, Y+6	; 0x06
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	31 83       	std	Z+1, r19	; 0x01
    3c50:	20 83       	st	Z, r18
	fstep = 100;
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	9c 81       	ldd	r25, Y+4	; 0x04
    3c56:	9c 01       	movw	r18, r24
    3c58:	2e 55       	subi	r18, 0x5E	; 94
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5c:	84 e6       	ldi	r24, 0x64	; 100
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	a0 e0       	ldi	r26, 0x00	; 0
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	f9 01       	movw	r30, r18
    3c66:	80 83       	st	Z, r24
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	a2 83       	std	Z+2, r26	; 0x02
    3c6c:	b3 83       	std	Z+3, r27	; 0x03
	step = STEP_100HZ;
    3c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c70:	9c 81       	ldd	r25, Y+4	; 0x04
    3c72:	8a 55       	subi	r24, 0x5A	; 90
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	21 e0       	ldi	r18, 0x01	; 1
    3c78:	fc 01       	movw	r30, r24
    3c7a:	20 83       	st	Z, r18
	line = l;
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	87 55       	subi	r24, 0x57	; 87
    3c82:	9f 4f       	sbci	r25, 0xFF	; 255
    3c84:	29 85       	ldd	r18, Y+9	; 0x09
    3c86:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c88:	fc 01       	movw	r30, r24
    3c8a:	31 83       	std	Z+1, r19	; 0x01
    3c8c:	20 83       	st	Z, r18
}
    3c8e:	2a 96       	adiw	r28, 0x0a	; 10
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret

00003ca0 <_ZN3vfo6updateEh>:

//
// Process events sent to the vfo page
//

void vfo::update(uint8_t band) {
    3ca0:	cf 92       	push	r12
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	28 97       	sbiw	r28, 0x08	; 8
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	9f 83       	std	Y+7, r25	; 0x07
    3cbe:	8e 83       	std	Y+6, r24	; 0x06
    3cc0:	68 87       	std	Y+8, r22	; 0x08

	if (enc->hasEvent()) {
    3cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cc6:	89 55       	subi	r24, 0x59	; 89
    3cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cca:	dc 01       	movw	r26, r24
    3ccc:	8d 91       	ld	r24, X+
    3cce:	9c 91       	ld	r25, X
    3cd0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Encoder8hasEventEv>
    3cd4:	88 23       	and	r24, r24
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <_ZN3vfo6updateEh+0x3a>
    3cd8:	37 c1       	rjmp	.+622    	; 0x3f48 <_ZN3vfo6updateEh+0x2a8>
	
		encEvent event = enc->getEvent();
    3cda:	8e 81       	ldd	r24, Y+6	; 0x06
    3cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cde:	89 55       	subi	r24, 0x59	; 89
    3ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	80 81       	ld	r24, Z
    3ce6:	91 81       	ldd	r25, Z+1	; 0x01
    3ce8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Encoder8getEventEv>
    3cec:	89 83       	std	Y+1, r24	; 0x01
		uint32_t cnts;

		if (event == ENC_CCW_EVENT) {
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	82 30       	cpi	r24, 0x02	; 2
    3cf2:	09 f0       	breq	.+2      	; 0x3cf6 <_ZN3vfo6updateEh+0x56>
    3cf4:	93 c0       	rjmp	.+294    	; 0x3e1c <_ZN3vfo6updateEh+0x17c>
      
			cnts = fstep * (1 + enc->getMissedCcwCount());
    3cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cfa:	8e 55       	subi	r24, 0x5E	; 94
    3cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cd 90       	ld	r12, X+
    3d02:	dd 90       	ld	r13, X+
    3d04:	ed 90       	ld	r14, X+
    3d06:	fc 90       	ld	r15, X
    3d08:	8e 81       	ldd	r24, Y+6	; 0x06
    3d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d0c:	89 55       	subi	r24, 0x59	; 89
    3d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d10:	fc 01       	movw	r30, r24
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN7Encoder17getMissedCcwCountEv>
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	09 2e       	mov	r0, r25
    3d1e:	00 0c       	add	r0, r0
    3d20:	aa 0b       	sbc	r26, r26
    3d22:	bb 0b       	sbc	r27, r27
    3d24:	a7 01       	movw	r20, r14
    3d26:	96 01       	movw	r18, r12
    3d28:	bc 01       	movw	r22, r24
    3d2a:	cd 01       	movw	r24, r26
    3d2c:	26 d5       	rcall	.+2636   	; 0x477a <__mulsi3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8a 83       	std	Y+2, r24	; 0x02
    3d34:	9b 83       	std	Y+3, r25	; 0x03
    3d36:	ac 83       	std	Y+4, r26	; 0x04
    3d38:	bd 83       	std	Y+5, r27	; 0x05
			vfoData[band].rxFreq -= cnts;
    3d3a:	88 85       	ldd	r24, Y+8	; 0x08
    3d3c:	e8 2f       	mov	r30, r24
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	88 85       	ldd	r24, Y+8	; 0x08
    3d42:	88 2f       	mov	r24, r24
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	2e 81       	ldd	r18, Y+6	; 0x06
    3d48:	3f 81       	ldd	r19, Y+7	; 0x07
    3d4a:	88 0f       	add	r24, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	ac 01       	movw	r20, r24
    3d50:	44 0f       	add	r20, r20
    3d52:	55 1f       	adc	r21, r21
    3d54:	44 0f       	add	r20, r20
    3d56:	55 1f       	adc	r21, r21
    3d58:	44 0f       	add	r20, r20
    3d5a:	55 1f       	adc	r21, r21
    3d5c:	84 0f       	add	r24, r20
    3d5e:	95 1f       	adc	r25, r21
    3d60:	82 0f       	add	r24, r18
    3d62:	93 1f       	adc	r25, r19
    3d64:	dc 01       	movw	r26, r24
    3d66:	2d 91       	ld	r18, X+
    3d68:	3d 91       	ld	r19, X+
    3d6a:	4d 91       	ld	r20, X+
    3d6c:	5c 91       	ld	r21, X
    3d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d70:	9b 81       	ldd	r25, Y+3	; 0x03
    3d72:	ac 81       	ldd	r26, Y+4	; 0x04
    3d74:	bd 81       	ldd	r27, Y+5	; 0x05
    3d76:	28 1b       	sub	r18, r24
    3d78:	39 0b       	sbc	r19, r25
    3d7a:	4a 0b       	sbc	r20, r26
    3d7c:	5b 0b       	sbc	r21, r27
    3d7e:	6e 81       	ldd	r22, Y+6	; 0x06
    3d80:	7f 81       	ldd	r23, Y+7	; 0x07
    3d82:	cf 01       	movw	r24, r30
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	fc 01       	movw	r30, r24
    3d8a:	ee 0f       	add	r30, r30
    3d8c:	ff 1f       	adc	r31, r31
    3d8e:	ee 0f       	add	r30, r30
    3d90:	ff 1f       	adc	r31, r31
    3d92:	ee 0f       	add	r30, r30
    3d94:	ff 1f       	adc	r31, r31
    3d96:	8e 0f       	add	r24, r30
    3d98:	9f 1f       	adc	r25, r31
    3d9a:	86 0f       	add	r24, r22
    3d9c:	97 1f       	adc	r25, r23
    3d9e:	fc 01       	movw	r30, r24
    3da0:	20 83       	st	Z, r18
    3da2:	31 83       	std	Z+1, r19	; 0x01
    3da4:	42 83       	std	Z+2, r20	; 0x02
    3da6:	53 83       	std	Z+3, r21	; 0x03
			vfoData[band].txFreq -= cnts;
    3da8:	88 85       	ldd	r24, Y+8	; 0x08
    3daa:	e8 2f       	mov	r30, r24
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	88 85       	ldd	r24, Y+8	; 0x08
    3db0:	88 2f       	mov	r24, r24
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	2e 81       	ldd	r18, Y+6	; 0x06
    3db6:	3f 81       	ldd	r19, Y+7	; 0x07
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	ac 01       	movw	r20, r24
    3dbe:	44 0f       	add	r20, r20
    3dc0:	55 1f       	adc	r21, r21
    3dc2:	44 0f       	add	r20, r20
    3dc4:	55 1f       	adc	r21, r21
    3dc6:	44 0f       	add	r20, r20
    3dc8:	55 1f       	adc	r21, r21
    3dca:	84 0f       	add	r24, r20
    3dcc:	95 1f       	adc	r25, r21
    3dce:	82 0f       	add	r24, r18
    3dd0:	93 1f       	adc	r25, r19
    3dd2:	09 96       	adiw	r24, 0x09	; 9
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	2d 91       	ld	r18, X+
    3dd8:	3d 91       	ld	r19, X+
    3dda:	4d 91       	ld	r20, X+
    3ddc:	5c 91       	ld	r21, X
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	9b 81       	ldd	r25, Y+3	; 0x03
    3de2:	ac 81       	ldd	r26, Y+4	; 0x04
    3de4:	bd 81       	ldd	r27, Y+5	; 0x05
    3de6:	28 1b       	sub	r18, r24
    3de8:	39 0b       	sbc	r19, r25
    3dea:	4a 0b       	sbc	r20, r26
    3dec:	5b 0b       	sbc	r21, r27
    3dee:	6e 81       	ldd	r22, Y+6	; 0x06
    3df0:	7f 81       	ldd	r23, Y+7	; 0x07
    3df2:	cf 01       	movw	r24, r30
    3df4:	88 0f       	add	r24, r24
    3df6:	99 1f       	adc	r25, r25
    3df8:	fc 01       	movw	r30, r24
    3dfa:	ee 0f       	add	r30, r30
    3dfc:	ff 1f       	adc	r31, r31
    3dfe:	ee 0f       	add	r30, r30
    3e00:	ff 1f       	adc	r31, r31
    3e02:	ee 0f       	add	r30, r30
    3e04:	ff 1f       	adc	r31, r31
    3e06:	8e 0f       	add	r24, r30
    3e08:	9f 1f       	adc	r25, r31
    3e0a:	86 0f       	add	r24, r22
    3e0c:	97 1f       	adc	r25, r23
    3e0e:	09 96       	adiw	r24, 0x09	; 9
    3e10:	fc 01       	movw	r30, r24
    3e12:	20 83       	st	Z, r18
    3e14:	31 83       	std	Z+1, r19	; 0x01
    3e16:	42 83       	std	Z+2, r20	; 0x02
    3e18:	53 83       	std	Z+3, r21	; 0x03
    3e1a:	96 c0       	rjmp	.+300    	; 0x3f48 <_ZN3vfo6updateEh+0x2a8>

		} else if (event == ENC_CW_EVENT) {
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	81 30       	cpi	r24, 0x01	; 1
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <_ZN3vfo6updateEh+0x184>
    3e22:	92 c0       	rjmp	.+292    	; 0x3f48 <_ZN3vfo6updateEh+0x2a8>
			cnts = fstep * (1 + enc->getMissedCwCount());
    3e24:	8e 81       	ldd	r24, Y+6	; 0x06
    3e26:	9f 81       	ldd	r25, Y+7	; 0x07
    3e28:	8e 55       	subi	r24, 0x5E	; 94
    3e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cd 90       	ld	r12, X+
    3e30:	dd 90       	ld	r13, X+
    3e32:	ed 90       	ld	r14, X+
    3e34:	fc 90       	ld	r15, X
    3e36:	8e 81       	ldd	r24, Y+6	; 0x06
    3e38:	9f 81       	ldd	r25, Y+7	; 0x07
    3e3a:	89 55       	subi	r24, 0x59	; 89
    3e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3e:	fc 01       	movw	r30, r24
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN7Encoder16getMissedCwCountEv>
    3e48:	01 96       	adiw	r24, 0x01	; 1
    3e4a:	09 2e       	mov	r0, r25
    3e4c:	00 0c       	add	r0, r0
    3e4e:	aa 0b       	sbc	r26, r26
    3e50:	bb 0b       	sbc	r27, r27
    3e52:	a7 01       	movw	r20, r14
    3e54:	96 01       	movw	r18, r12
    3e56:	bc 01       	movw	r22, r24
    3e58:	cd 01       	movw	r24, r26
    3e5a:	8f d4       	rcall	.+2334   	; 0x477a <__mulsi3>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	8a 83       	std	Y+2, r24	; 0x02
    3e62:	9b 83       	std	Y+3, r25	; 0x03
    3e64:	ac 83       	std	Y+4, r26	; 0x04
    3e66:	bd 83       	std	Y+5, r27	; 0x05
			vfoData[band].rxFreq += cnts;
    3e68:	88 85       	ldd	r24, Y+8	; 0x08
    3e6a:	e8 2f       	mov	r30, r24
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	88 85       	ldd	r24, Y+8	; 0x08
    3e70:	88 2f       	mov	r24, r24
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	2e 81       	ldd	r18, Y+6	; 0x06
    3e76:	3f 81       	ldd	r19, Y+7	; 0x07
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	ac 01       	movw	r20, r24
    3e7e:	44 0f       	add	r20, r20
    3e80:	55 1f       	adc	r21, r21
    3e82:	44 0f       	add	r20, r20
    3e84:	55 1f       	adc	r21, r21
    3e86:	44 0f       	add	r20, r20
    3e88:	55 1f       	adc	r21, r21
    3e8a:	84 0f       	add	r24, r20
    3e8c:	95 1f       	adc	r25, r21
    3e8e:	82 0f       	add	r24, r18
    3e90:	93 1f       	adc	r25, r19
    3e92:	dc 01       	movw	r26, r24
    3e94:	2d 91       	ld	r18, X+
    3e96:	3d 91       	ld	r19, X+
    3e98:	4d 91       	ld	r20, X+
    3e9a:	5c 91       	ld	r21, X
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ea2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ea4:	28 0f       	add	r18, r24
    3ea6:	39 1f       	adc	r19, r25
    3ea8:	4a 1f       	adc	r20, r26
    3eaa:	5b 1f       	adc	r21, r27
    3eac:	6e 81       	ldd	r22, Y+6	; 0x06
    3eae:	7f 81       	ldd	r23, Y+7	; 0x07
    3eb0:	cf 01       	movw	r24, r30
    3eb2:	88 0f       	add	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	ee 0f       	add	r30, r30
    3eba:	ff 1f       	adc	r31, r31
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	ee 0f       	add	r30, r30
    3ec2:	ff 1f       	adc	r31, r31
    3ec4:	8e 0f       	add	r24, r30
    3ec6:	9f 1f       	adc	r25, r31
    3ec8:	86 0f       	add	r24, r22
    3eca:	97 1f       	adc	r25, r23
    3ecc:	fc 01       	movw	r30, r24
    3ece:	20 83       	st	Z, r18
    3ed0:	31 83       	std	Z+1, r19	; 0x01
    3ed2:	42 83       	std	Z+2, r20	; 0x02
    3ed4:	53 83       	std	Z+3, r21	; 0x03
			vfoData[band].txFreq += cnts;
    3ed6:	88 85       	ldd	r24, Y+8	; 0x08
    3ed8:	e8 2f       	mov	r30, r24
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	88 85       	ldd	r24, Y+8	; 0x08
    3ede:	88 2f       	mov	r24, r24
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ee4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	ac 01       	movw	r20, r24
    3eec:	44 0f       	add	r20, r20
    3eee:	55 1f       	adc	r21, r21
    3ef0:	44 0f       	add	r20, r20
    3ef2:	55 1f       	adc	r21, r21
    3ef4:	44 0f       	add	r20, r20
    3ef6:	55 1f       	adc	r21, r21
    3ef8:	84 0f       	add	r24, r20
    3efa:	95 1f       	adc	r25, r21
    3efc:	82 0f       	add	r24, r18
    3efe:	93 1f       	adc	r25, r19
    3f00:	09 96       	adiw	r24, 0x09	; 9
    3f02:	dc 01       	movw	r26, r24
    3f04:	2d 91       	ld	r18, X+
    3f06:	3d 91       	ld	r19, X+
    3f08:	4d 91       	ld	r20, X+
    3f0a:	5c 91       	ld	r21, X
    3f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f10:	ac 81       	ldd	r26, Y+4	; 0x04
    3f12:	bd 81       	ldd	r27, Y+5	; 0x05
    3f14:	28 0f       	add	r18, r24
    3f16:	39 1f       	adc	r19, r25
    3f18:	4a 1f       	adc	r20, r26
    3f1a:	5b 1f       	adc	r21, r27
    3f1c:	6e 81       	ldd	r22, Y+6	; 0x06
    3f1e:	7f 81       	ldd	r23, Y+7	; 0x07
    3f20:	cf 01       	movw	r24, r30
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	fc 01       	movw	r30, r24
    3f28:	ee 0f       	add	r30, r30
    3f2a:	ff 1f       	adc	r31, r31
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	ee 0f       	add	r30, r30
    3f32:	ff 1f       	adc	r31, r31
    3f34:	8e 0f       	add	r24, r30
    3f36:	9f 1f       	adc	r25, r31
    3f38:	86 0f       	add	r24, r22
    3f3a:	97 1f       	adc	r25, r23
    3f3c:	09 96       	adiw	r24, 0x09	; 9
    3f3e:	fc 01       	movw	r30, r24
    3f40:	20 83       	st	Z, r18
    3f42:	31 83       	std	Z+1, r19	; 0x01
    3f44:	42 83       	std	Z+2, r20	; 0x02
    3f46:	53 83       	std	Z+3, r21	; 0x03
		}
	}
}
    3f48:	28 96       	adiw	r28, 0x08	; 8
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	ff 90       	pop	r15
    3f5a:	ef 90       	pop	r14
    3f5c:	df 90       	pop	r13
    3f5e:	cf 90       	pop	r12
    3f60:	08 95       	ret

00003f62 <_ZN3vfo9getRxFreqE5_band>:


float vfo::getRxFreq(band_t band) {
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	60 97       	sbiw	r28, 0x10	; 16
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	9b 87       	std	Y+11, r25	; 0x0b
    3f78:	8a 87       	std	Y+10, r24	; 0x0a
    3f7a:	6c 87       	std	Y+12, r22	; 0x0c

uint32_t vfo_freq;
uint32_t vfo_offset;
uint8_t	vfo_mult;

	vfo_freq = vfoData[band].rxFreq;
    3f7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f7e:	88 2f       	mov	r24, r24
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f84:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	44 0f       	add	r20, r20
    3f8e:	55 1f       	adc	r21, r21
    3f90:	44 0f       	add	r20, r20
    3f92:	55 1f       	adc	r21, r21
    3f94:	44 0f       	add	r20, r20
    3f96:	55 1f       	adc	r21, r21
    3f98:	84 0f       	add	r24, r20
    3f9a:	95 1f       	adc	r25, r21
    3f9c:	82 0f       	add	r24, r18
    3f9e:	93 1f       	adc	r25, r19
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	a2 81       	ldd	r26, Z+2	; 0x02
    3fa8:	b3 81       	ldd	r27, Z+3	; 0x03
    3faa:	89 83       	std	Y+1, r24	; 0x01
    3fac:	9a 83       	std	Y+2, r25	; 0x02
    3fae:	ab 83       	std	Y+3, r26	; 0x03
    3fb0:	bc 83       	std	Y+4, r27	; 0x04
	vfo_offset = vfoData[band].rxOffset;
    3fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fb4:	88 2f       	mov	r24, r24
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fba:	3b 85       	ldd	r19, Y+11	; 0x0b
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	ac 01       	movw	r20, r24
    3fc2:	44 0f       	add	r20, r20
    3fc4:	55 1f       	adc	r21, r21
    3fc6:	44 0f       	add	r20, r20
    3fc8:	55 1f       	adc	r21, r21
    3fca:	44 0f       	add	r20, r20
    3fcc:	55 1f       	adc	r21, r21
    3fce:	84 0f       	add	r24, r20
    3fd0:	95 1f       	adc	r25, r21
    3fd2:	82 0f       	add	r24, r18
    3fd4:	93 1f       	adc	r25, r19
    3fd6:	04 96       	adiw	r24, 0x04	; 4
    3fd8:	fc 01       	movw	r30, r24
    3fda:	80 81       	ld	r24, Z
    3fdc:	91 81       	ldd	r25, Z+1	; 0x01
    3fde:	a2 81       	ldd	r26, Z+2	; 0x02
    3fe0:	b3 81       	ldd	r27, Z+3	; 0x03
    3fe2:	8d 83       	std	Y+5, r24	; 0x05
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	af 83       	std	Y+7, r26	; 0x07
    3fe8:	b8 87       	std	Y+8, r27	; 0x08
	vfo_mult = vfoData[band].rxMult;
    3fea:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fec:	88 2f       	mov	r24, r24
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ff2:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ff4:	88 0f       	add	r24, r24
    3ff6:	99 1f       	adc	r25, r25
    3ff8:	ac 01       	movw	r20, r24
    3ffa:	44 0f       	add	r20, r20
    3ffc:	55 1f       	adc	r21, r21
    3ffe:	44 0f       	add	r20, r20
    4000:	55 1f       	adc	r21, r21
    4002:	44 0f       	add	r20, r20
    4004:	55 1f       	adc	r21, r21
    4006:	84 0f       	add	r24, r20
    4008:	95 1f       	adc	r25, r21
    400a:	82 0f       	add	r24, r18
    400c:	93 1f       	adc	r25, r19
    400e:	08 96       	adiw	r24, 0x08	; 8
    4010:	fc 01       	movw	r30, r24
    4012:	80 81       	ld	r24, Z
    4014:	89 87       	std	Y+9, r24	; 0x09
	vfo_freq += vfo_offset;
    4016:	29 81       	ldd	r18, Y+1	; 0x01
    4018:	3a 81       	ldd	r19, Y+2	; 0x02
    401a:	4b 81       	ldd	r20, Y+3	; 0x03
    401c:	5c 81       	ldd	r21, Y+4	; 0x04
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	af 81       	ldd	r26, Y+7	; 0x07
    4024:	b8 85       	ldd	r27, Y+8	; 0x08
    4026:	82 0f       	add	r24, r18
    4028:	93 1f       	adc	r25, r19
    402a:	a4 1f       	adc	r26, r20
    402c:	b5 1f       	adc	r27, r21
    402e:	89 83       	std	Y+1, r24	; 0x01
    4030:	9a 83       	std	Y+2, r25	; 0x02
    4032:	ab 83       	std	Y+3, r26	; 0x03
    4034:	bc 83       	std	Y+4, r27	; 0x04
	vfo_freq = vfo_freq / vfo_mult;
    4036:	89 85       	ldd	r24, Y+9	; 0x09
    4038:	28 2f       	mov	r18, r24
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	ab 81       	ldd	r26, Y+3	; 0x03
    4046:	bc 81       	ldd	r27, Y+4	; 0x04
    4048:	bc 01       	movw	r22, r24
    404a:	cd 01       	movw	r24, r26
    404c:	a5 d3       	rcall	.+1866   	; 0x4798 <__udivmodsi4>
    404e:	da 01       	movw	r26, r20
    4050:	c9 01       	movw	r24, r18
    4052:	89 83       	std	Y+1, r24	; 0x01
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	ab 83       	std	Y+3, r26	; 0x03
    4058:	bc 83       	std	Y+4, r27	; 0x04
	return (float)vfo_freq;
    405a:	69 81       	ldd	r22, Y+1	; 0x01
    405c:	7a 81       	ldd	r23, Y+2	; 0x02
    405e:	8b 81       	ldd	r24, Y+3	; 0x03
    4060:	9c 81       	ldd	r25, Y+4	; 0x04
    4062:	01 d4       	rcall	.+2050   	; 0x4866 <__floatunsisf>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
}
    4068:	bc 01       	movw	r22, r24
    406a:	cd 01       	movw	r24, r26
    406c:	60 96       	adiw	r28, 0x10	; 16
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	08 95       	ret

0000407e <_ZN3vfo9getTxFreqE5_band>:


float vfo::getTxFreq(band_t band) {
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	60 97       	sbiw	r28, 0x10	; 16
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	f8 94       	cli
    408c:	de bf       	out	0x3e, r29	; 62
    408e:	0f be       	out	0x3f, r0	; 63
    4090:	cd bf       	out	0x3d, r28	; 61
    4092:	9b 87       	std	Y+11, r25	; 0x0b
    4094:	8a 87       	std	Y+10, r24	; 0x0a
    4096:	6c 87       	std	Y+12, r22	; 0x0c

	uint32_t vfo_freq;
	uint32_t vfo_offset;
	uint8_t	vfo_mult;

	vfo_freq = vfoData[band].txFreq;
    4098:	8c 85       	ldd	r24, Y+12	; 0x0c
    409a:	88 2f       	mov	r24, r24
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	2a 85       	ldd	r18, Y+10	; 0x0a
    40a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    40a2:	88 0f       	add	r24, r24
    40a4:	99 1f       	adc	r25, r25
    40a6:	ac 01       	movw	r20, r24
    40a8:	44 0f       	add	r20, r20
    40aa:	55 1f       	adc	r21, r21
    40ac:	44 0f       	add	r20, r20
    40ae:	55 1f       	adc	r21, r21
    40b0:	44 0f       	add	r20, r20
    40b2:	55 1f       	adc	r21, r21
    40b4:	84 0f       	add	r24, r20
    40b6:	95 1f       	adc	r25, r21
    40b8:	82 0f       	add	r24, r18
    40ba:	93 1f       	adc	r25, r19
    40bc:	09 96       	adiw	r24, 0x09	; 9
    40be:	fc 01       	movw	r30, r24
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	a2 81       	ldd	r26, Z+2	; 0x02
    40c6:	b3 81       	ldd	r27, Z+3	; 0x03
    40c8:	89 83       	std	Y+1, r24	; 0x01
    40ca:	9a 83       	std	Y+2, r25	; 0x02
    40cc:	ab 83       	std	Y+3, r26	; 0x03
    40ce:	bc 83       	std	Y+4, r27	; 0x04
	vfo_offset = vfoData[band].txOffset;
    40d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d2:	88 2f       	mov	r24, r24
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    40d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    40da:	88 0f       	add	r24, r24
    40dc:	99 1f       	adc	r25, r25
    40de:	ac 01       	movw	r20, r24
    40e0:	44 0f       	add	r20, r20
    40e2:	55 1f       	adc	r21, r21
    40e4:	44 0f       	add	r20, r20
    40e6:	55 1f       	adc	r21, r21
    40e8:	44 0f       	add	r20, r20
    40ea:	55 1f       	adc	r21, r21
    40ec:	84 0f       	add	r24, r20
    40ee:	95 1f       	adc	r25, r21
    40f0:	82 0f       	add	r24, r18
    40f2:	93 1f       	adc	r25, r19
    40f4:	0d 96       	adiw	r24, 0x0d	; 13
    40f6:	fc 01       	movw	r30, r24
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	a2 81       	ldd	r26, Z+2	; 0x02
    40fe:	b3 81       	ldd	r27, Z+3	; 0x03
    4100:	8d 83       	std	Y+5, r24	; 0x05
    4102:	9e 83       	std	Y+6, r25	; 0x06
    4104:	af 83       	std	Y+7, r26	; 0x07
    4106:	b8 87       	std	Y+8, r27	; 0x08
	vfo_mult = vfoData[band].txMult;
    4108:	8c 85       	ldd	r24, Y+12	; 0x0c
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4110:	3b 85       	ldd	r19, Y+11	; 0x0b
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	ac 01       	movw	r20, r24
    4118:	44 0f       	add	r20, r20
    411a:	55 1f       	adc	r21, r21
    411c:	44 0f       	add	r20, r20
    411e:	55 1f       	adc	r21, r21
    4120:	44 0f       	add	r20, r20
    4122:	55 1f       	adc	r21, r21
    4124:	84 0f       	add	r24, r20
    4126:	95 1f       	adc	r25, r21
    4128:	82 0f       	add	r24, r18
    412a:	93 1f       	adc	r25, r19
    412c:	41 96       	adiw	r24, 0x11	; 17
    412e:	fc 01       	movw	r30, r24
    4130:	80 81       	ld	r24, Z
    4132:	89 87       	std	Y+9, r24	; 0x09
	vfo_freq += vfo_offset;
    4134:	29 81       	ldd	r18, Y+1	; 0x01
    4136:	3a 81       	ldd	r19, Y+2	; 0x02
    4138:	4b 81       	ldd	r20, Y+3	; 0x03
    413a:	5c 81       	ldd	r21, Y+4	; 0x04
    413c:	8d 81       	ldd	r24, Y+5	; 0x05
    413e:	9e 81       	ldd	r25, Y+6	; 0x06
    4140:	af 81       	ldd	r26, Y+7	; 0x07
    4142:	b8 85       	ldd	r27, Y+8	; 0x08
    4144:	82 0f       	add	r24, r18
    4146:	93 1f       	adc	r25, r19
    4148:	a4 1f       	adc	r26, r20
    414a:	b5 1f       	adc	r27, r21
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	9a 83       	std	Y+2, r25	; 0x02
    4150:	ab 83       	std	Y+3, r26	; 0x03
    4152:	bc 83       	std	Y+4, r27	; 0x04
	vfo_freq = vfo_freq / vfo_mult;
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	28 2f       	mov	r18, r24
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e0       	ldi	r20, 0x00	; 0
    415c:	50 e0       	ldi	r21, 0x00	; 0
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	ab 81       	ldd	r26, Y+3	; 0x03
    4164:	bc 81       	ldd	r27, Y+4	; 0x04
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	16 d3       	rcall	.+1580   	; 0x4798 <__udivmodsi4>
    416c:	da 01       	movw	r26, r20
    416e:	c9 01       	movw	r24, r18
    4170:	89 83       	std	Y+1, r24	; 0x01
    4172:	9a 83       	std	Y+2, r25	; 0x02
    4174:	ab 83       	std	Y+3, r26	; 0x03
    4176:	bc 83       	std	Y+4, r27	; 0x04
	return (float)vfo_freq;
    4178:	69 81       	ldd	r22, Y+1	; 0x01
    417a:	7a 81       	ldd	r23, Y+2	; 0x02
    417c:	8b 81       	ldd	r24, Y+3	; 0x03
    417e:	9c 81       	ldd	r25, Y+4	; 0x04
    4180:	72 d3       	rcall	.+1764   	; 0x4866 <__floatunsisf>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
}
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	60 96       	adiw	r28, 0x10	; 16
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	f8 94       	cli
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	0f be       	out	0x3f, r0	; 63
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <_ZN3vfo7setStepE6step_t>:


void vfo::setStep(step_t step) {
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <_ZN3vfo7setStepE6step_t+0x6>
    41a2:	1f 92       	push	r1
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	9a 83       	std	Y+2, r25	; 0x02
    41aa:	89 83       	std	Y+1, r24	; 0x01
    41ac:	6b 83       	std	Y+3, r22	; 0x03
	this->step = step;
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	9a 81       	ldd	r25, Y+2	; 0x02
    41b2:	8a 55       	subi	r24, 0x5A	; 90
    41b4:	9f 4f       	sbci	r25, 0xFF	; 255
    41b6:	2b 81       	ldd	r18, Y+3	; 0x03
    41b8:	fc 01       	movw	r30, r24
    41ba:	20 83       	st	Z, r18
	fstep = step_values[step];
    41bc:	8b 81       	ldd	r24, Y+3	; 0x03
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	8d 5f       	subi	r24, 0xFD	; 253
    41cc:	9c 4f       	sbci	r25, 0xFC	; 252
    41ce:	fc 01       	movw	r30, r24
    41d0:	80 81       	ld	r24, Z
    41d2:	91 81       	ldd	r25, Z+1	; 0x01
    41d4:	a2 81       	ldd	r26, Z+2	; 0x02
    41d6:	b3 81       	ldd	r27, Z+3	; 0x03
    41d8:	29 81       	ldd	r18, Y+1	; 0x01
    41da:	3a 81       	ldd	r19, Y+2	; 0x02
    41dc:	2e 55       	subi	r18, 0x5E	; 94
    41de:	3f 4f       	sbci	r19, 0xFF	; 255
    41e0:	f9 01       	movw	r30, r18
    41e2:	80 83       	st	Z, r24
    41e4:	91 83       	std	Z+1, r25	; 0x01
    41e6:	a2 83       	std	Z+2, r26	; 0x02
    41e8:	b3 83       	std	Z+3, r27	; 0x03
}
    41ea:	0f 90       	pop	r0
    41ec:	0f 90       	pop	r0
    41ee:	0f 90       	pop	r0
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	08 95       	ret

000041f6 <_ZN3vfo13intToString32EmPc>:
	return step;
}



void vfo::intToString32(uint32_t c, char *buf) {
    41f6:	ef 92       	push	r14
    41f8:	ff 92       	push	r15
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	cf 93       	push	r28
    4200:	df 93       	push	r29
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
    4206:	ac 97       	sbiw	r28, 0x2c	; 44
    4208:	0f b6       	in	r0, 0x3f	; 63
    420a:	f8 94       	cli
    420c:	de bf       	out	0x3e, r29	; 62
    420e:	0f be       	out	0x3f, r0	; 63
    4210:	cd bf       	out	0x3d, r28	; 61
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
    4216:	4f 83       	std	Y+7, r20	; 0x07
    4218:	58 87       	std	Y+8, r21	; 0x08
    421a:	69 87       	std	Y+9, r22	; 0x09
    421c:	7a 87       	std	Y+10, r23	; 0x0a
    421e:	3c 87       	std	Y+12, r19	; 0x0c
    4220:	2b 87       	std	Y+11, r18	; 0x0b

	uint32_t digit;

	digit = c / 100000000;
    4222:	8f 81       	ldd	r24, Y+7	; 0x07
    4224:	98 85       	ldd	r25, Y+8	; 0x08
    4226:	a9 85       	ldd	r26, Y+9	; 0x09
    4228:	ba 85       	ldd	r27, Y+10	; 0x0a
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	31 ee       	ldi	r19, 0xE1	; 225
    422e:	45 ef       	ldi	r20, 0xF5	; 245
    4230:	55 e0       	ldi	r21, 0x05	; 5
    4232:	bc 01       	movw	r22, r24
    4234:	cd 01       	movw	r24, r26
    4236:	b0 d2       	rcall	.+1376   	; 0x4798 <__udivmodsi4>
    4238:	da 01       	movw	r26, r20
    423a:	c9 01       	movw	r24, r18
    423c:	89 83       	std	Y+1, r24	; 0x01
    423e:	9a 83       	std	Y+2, r25	; 0x02
    4240:	ab 83       	std	Y+3, r26	; 0x03
    4242:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4244:	8b 85       	ldd	r24, Y+11	; 0x0b
    4246:	9c 85       	ldd	r25, Y+12	; 0x0c
    4248:	9c 01       	movw	r18, r24
    424a:	2f 5f       	subi	r18, 0xFF	; 255
    424c:	3f 4f       	sbci	r19, 0xFF	; 255
    424e:	3c 87       	std	Y+12, r19	; 0x0c
    4250:	2b 87       	std	Y+11, r18	; 0x0b
    4252:	29 81       	ldd	r18, Y+1	; 0x01
    4254:	20 5d       	subi	r18, 0xD0	; 208
    4256:	fc 01       	movw	r30, r24
    4258:	20 83       	st	Z, r18
	c = c - (digit*100000000);
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	ab 81       	ldd	r26, Y+3	; 0x03
    4260:	bc 81       	ldd	r27, Y+4	; 0x04
    4262:	9c 01       	movw	r18, r24
    4264:	ad 01       	movw	r20, r26
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	71 ee       	ldi	r23, 0xE1	; 225
    426a:	85 ef       	ldi	r24, 0xF5	; 245
    426c:	95 e0       	ldi	r25, 0x05	; 5
    426e:	85 d2       	rcall	.+1290   	; 0x477a <__mulsi3>
    4270:	9b 01       	movw	r18, r22
    4272:	ac 01       	movw	r20, r24
    4274:	8f 81       	ldd	r24, Y+7	; 0x07
    4276:	98 85       	ldd	r25, Y+8	; 0x08
    4278:	a9 85       	ldd	r26, Y+9	; 0x09
    427a:	ba 85       	ldd	r27, Y+10	; 0x0a
    427c:	82 1b       	sub	r24, r18
    427e:	93 0b       	sbc	r25, r19
    4280:	a4 0b       	sbc	r26, r20
    4282:	b5 0b       	sbc	r27, r21
    4284:	8f 83       	std	Y+7, r24	; 0x07
    4286:	98 87       	std	Y+8, r25	; 0x08
    4288:	a9 87       	std	Y+9, r26	; 0x09
    428a:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10000000;
    428c:	8f 81       	ldd	r24, Y+7	; 0x07
    428e:	98 85       	ldd	r25, Y+8	; 0x08
    4290:	a9 85       	ldd	r26, Y+9	; 0x09
    4292:	ba 85       	ldd	r27, Y+10	; 0x0a
    4294:	20 e8       	ldi	r18, 0x80	; 128
    4296:	36 e9       	ldi	r19, 0x96	; 150
    4298:	48 e9       	ldi	r20, 0x98	; 152
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	7b d2       	rcall	.+1270   	; 0x4798 <__udivmodsi4>
    42a2:	da 01       	movw	r26, r20
    42a4:	c9 01       	movw	r24, r18
    42a6:	89 83       	std	Y+1, r24	; 0x01
    42a8:	9a 83       	std	Y+2, r25	; 0x02
    42aa:	ab 83       	std	Y+3, r26	; 0x03
    42ac:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    42ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    42b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    42b2:	9c 01       	movw	r18, r24
    42b4:	2f 5f       	subi	r18, 0xFF	; 255
    42b6:	3f 4f       	sbci	r19, 0xFF	; 255
    42b8:	3c 87       	std	Y+12, r19	; 0x0c
    42ba:	2b 87       	std	Y+11, r18	; 0x0b
    42bc:	29 81       	ldd	r18, Y+1	; 0x01
    42be:	20 5d       	subi	r18, 0xD0	; 208
    42c0:	fc 01       	movw	r30, r24
    42c2:	20 83       	st	Z, r18
	c = c - (digit*10000000);
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	9a 81       	ldd	r25, Y+2	; 0x02
    42c8:	ab 81       	ldd	r26, Y+3	; 0x03
    42ca:	bc 81       	ldd	r27, Y+4	; 0x04
    42cc:	9c 01       	movw	r18, r24
    42ce:	ad 01       	movw	r20, r26
    42d0:	60 e8       	ldi	r22, 0x80	; 128
    42d2:	76 e9       	ldi	r23, 0x96	; 150
    42d4:	88 e9       	ldi	r24, 0x98	; 152
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	50 d2       	rcall	.+1184   	; 0x477a <__mulsi3>
    42da:	9b 01       	movw	r18, r22
    42dc:	ac 01       	movw	r20, r24
    42de:	8f 81       	ldd	r24, Y+7	; 0x07
    42e0:	98 85       	ldd	r25, Y+8	; 0x08
    42e2:	a9 85       	ldd	r26, Y+9	; 0x09
    42e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    42e6:	82 1b       	sub	r24, r18
    42e8:	93 0b       	sbc	r25, r19
    42ea:	a4 0b       	sbc	r26, r20
    42ec:	b5 0b       	sbc	r27, r21
    42ee:	8f 83       	std	Y+7, r24	; 0x07
    42f0:	98 87       	std	Y+8, r25	; 0x08
    42f2:	a9 87       	std	Y+9, r26	; 0x09
    42f4:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 1000000;
    42f6:	8f 81       	ldd	r24, Y+7	; 0x07
    42f8:	98 85       	ldd	r25, Y+8	; 0x08
    42fa:	a9 85       	ldd	r26, Y+9	; 0x09
    42fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    42fe:	20 e4       	ldi	r18, 0x40	; 64
    4300:	32 e4       	ldi	r19, 0x42	; 66
    4302:	4f e0       	ldi	r20, 0x0F	; 15
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	46 d2       	rcall	.+1164   	; 0x4798 <__udivmodsi4>
    430c:	da 01       	movw	r26, r20
    430e:	c9 01       	movw	r24, r18
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	9a 83       	std	Y+2, r25	; 0x02
    4314:	ab 83       	std	Y+3, r26	; 0x03
    4316:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4318:	8b 85       	ldd	r24, Y+11	; 0x0b
    431a:	9c 85       	ldd	r25, Y+12	; 0x0c
    431c:	9c 01       	movw	r18, r24
    431e:	2f 5f       	subi	r18, 0xFF	; 255
    4320:	3f 4f       	sbci	r19, 0xFF	; 255
    4322:	3c 87       	std	Y+12, r19	; 0x0c
    4324:	2b 87       	std	Y+11, r18	; 0x0b
    4326:	29 81       	ldd	r18, Y+1	; 0x01
    4328:	20 5d       	subi	r18, 0xD0	; 208
    432a:	fc 01       	movw	r30, r24
    432c:	20 83       	st	Z, r18
	c = c - (digit*1000000);
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	9a 81       	ldd	r25, Y+2	; 0x02
    4332:	ab 81       	ldd	r26, Y+3	; 0x03
    4334:	bc 81       	ldd	r27, Y+4	; 0x04
    4336:	9c 01       	movw	r18, r24
    4338:	ad 01       	movw	r20, r26
    433a:	60 e4       	ldi	r22, 0x40	; 64
    433c:	72 e4       	ldi	r23, 0x42	; 66
    433e:	8f e0       	ldi	r24, 0x0F	; 15
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	1b d2       	rcall	.+1078   	; 0x477a <__mulsi3>
    4344:	9b 01       	movw	r18, r22
    4346:	ac 01       	movw	r20, r24
    4348:	8f 81       	ldd	r24, Y+7	; 0x07
    434a:	98 85       	ldd	r25, Y+8	; 0x08
    434c:	a9 85       	ldd	r26, Y+9	; 0x09
    434e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4350:	82 1b       	sub	r24, r18
    4352:	93 0b       	sbc	r25, r19
    4354:	a4 0b       	sbc	r26, r20
    4356:	b5 0b       	sbc	r27, r21
    4358:	8f 83       	std	Y+7, r24	; 0x07
    435a:	98 87       	std	Y+8, r25	; 0x08
    435c:	a9 87       	std	Y+9, r26	; 0x09
    435e:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 100000;
    4360:	8f 81       	ldd	r24, Y+7	; 0x07
    4362:	98 85       	ldd	r25, Y+8	; 0x08
    4364:	a9 85       	ldd	r26, Y+9	; 0x09
    4366:	ba 85       	ldd	r27, Y+10	; 0x0a
    4368:	20 ea       	ldi	r18, 0xA0	; 160
    436a:	36 e8       	ldi	r19, 0x86	; 134
    436c:	41 e0       	ldi	r20, 0x01	; 1
    436e:	50 e0       	ldi	r21, 0x00	; 0
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	11 d2       	rcall	.+1058   	; 0x4798 <__udivmodsi4>
    4376:	da 01       	movw	r26, r20
    4378:	c9 01       	movw	r24, r18
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	9a 83       	std	Y+2, r25	; 0x02
    437e:	ab 83       	std	Y+3, r26	; 0x03
    4380:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4382:	8b 85       	ldd	r24, Y+11	; 0x0b
    4384:	9c 85       	ldd	r25, Y+12	; 0x0c
    4386:	9c 01       	movw	r18, r24
    4388:	2f 5f       	subi	r18, 0xFF	; 255
    438a:	3f 4f       	sbci	r19, 0xFF	; 255
    438c:	3c 87       	std	Y+12, r19	; 0x0c
    438e:	2b 87       	std	Y+11, r18	; 0x0b
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	20 5d       	subi	r18, 0xD0	; 208
    4394:	fc 01       	movw	r30, r24
    4396:	20 83       	st	Z, r18
	c = c - (digit*100000);
    4398:	89 81       	ldd	r24, Y+1	; 0x01
    439a:	9a 81       	ldd	r25, Y+2	; 0x02
    439c:	ab 81       	ldd	r26, Y+3	; 0x03
    439e:	bc 81       	ldd	r27, Y+4	; 0x04
    43a0:	9c 01       	movw	r18, r24
    43a2:	ad 01       	movw	r20, r26
    43a4:	60 ea       	ldi	r22, 0xA0	; 160
    43a6:	76 e8       	ldi	r23, 0x86	; 134
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	e6 d1       	rcall	.+972    	; 0x477a <__mulsi3>
    43ae:	9b 01       	movw	r18, r22
    43b0:	ac 01       	movw	r20, r24
    43b2:	8f 81       	ldd	r24, Y+7	; 0x07
    43b4:	98 85       	ldd	r25, Y+8	; 0x08
    43b6:	a9 85       	ldd	r26, Y+9	; 0x09
    43b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    43ba:	82 1b       	sub	r24, r18
    43bc:	93 0b       	sbc	r25, r19
    43be:	a4 0b       	sbc	r26, r20
    43c0:	b5 0b       	sbc	r27, r21
    43c2:	8f 83       	std	Y+7, r24	; 0x07
    43c4:	98 87       	std	Y+8, r25	; 0x08
    43c6:	a9 87       	std	Y+9, r26	; 0x09
    43c8:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10000;
    43ca:	8f 81       	ldd	r24, Y+7	; 0x07
    43cc:	98 85       	ldd	r25, Y+8	; 0x08
    43ce:	a9 85       	ldd	r26, Y+9	; 0x09
    43d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    43d2:	20 e1       	ldi	r18, 0x10	; 16
    43d4:	37 e2       	ldi	r19, 0x27	; 39
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	dc d1       	rcall	.+952    	; 0x4798 <__udivmodsi4>
    43e0:	da 01       	movw	r26, r20
    43e2:	c9 01       	movw	r24, r18
    43e4:	89 83       	std	Y+1, r24	; 0x01
    43e6:	9a 83       	std	Y+2, r25	; 0x02
    43e8:	ab 83       	std	Y+3, r26	; 0x03
    43ea:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    43ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    43ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    43f0:	9c 01       	movw	r18, r24
    43f2:	2f 5f       	subi	r18, 0xFF	; 255
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	3c 87       	std	Y+12, r19	; 0x0c
    43f8:	2b 87       	std	Y+11, r18	; 0x0b
    43fa:	29 81       	ldd	r18, Y+1	; 0x01
    43fc:	20 5d       	subi	r18, 0xD0	; 208
    43fe:	fc 01       	movw	r30, r24
    4400:	20 83       	st	Z, r18
	c = c - (digit*10000);
    4402:	29 81       	ldd	r18, Y+1	; 0x01
    4404:	3a 81       	ldd	r19, Y+2	; 0x02
    4406:	4b 81       	ldd	r20, Y+3	; 0x03
    4408:	5c 81       	ldd	r21, Y+4	; 0x04
    440a:	80 e1       	ldi	r24, 0x10	; 16
    440c:	97 e2       	ldi	r25, 0x27	; 39
    440e:	dc 01       	movw	r26, r24
    4410:	e5 d1       	rcall	.+970    	; 0x47dc <__muluhisi3>
    4412:	9b 01       	movw	r18, r22
    4414:	ac 01       	movw	r20, r24
    4416:	8f 81       	ldd	r24, Y+7	; 0x07
    4418:	98 85       	ldd	r25, Y+8	; 0x08
    441a:	a9 85       	ldd	r26, Y+9	; 0x09
    441c:	ba 85       	ldd	r27, Y+10	; 0x0a
    441e:	82 1b       	sub	r24, r18
    4420:	93 0b       	sbc	r25, r19
    4422:	a4 0b       	sbc	r26, r20
    4424:	b5 0b       	sbc	r27, r21
    4426:	8f 83       	std	Y+7, r24	; 0x07
    4428:	98 87       	std	Y+8, r25	; 0x08
    442a:	a9 87       	std	Y+9, r26	; 0x09
    442c:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 1000;
    442e:	8f 81       	ldd	r24, Y+7	; 0x07
    4430:	98 85       	ldd	r25, Y+8	; 0x08
    4432:	a9 85       	ldd	r26, Y+9	; 0x09
    4434:	ba 85       	ldd	r27, Y+10	; 0x0a
    4436:	28 ee       	ldi	r18, 0xE8	; 232
    4438:	33 e0       	ldi	r19, 0x03	; 3
    443a:	40 e0       	ldi	r20, 0x00	; 0
    443c:	50 e0       	ldi	r21, 0x00	; 0
    443e:	bc 01       	movw	r22, r24
    4440:	cd 01       	movw	r24, r26
    4442:	aa d1       	rcall	.+852    	; 0x4798 <__udivmodsi4>
    4444:	da 01       	movw	r26, r20
    4446:	c9 01       	movw	r24, r18
    4448:	89 83       	std	Y+1, r24	; 0x01
    444a:	9a 83       	std	Y+2, r25	; 0x02
    444c:	ab 83       	std	Y+3, r26	; 0x03
    444e:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4450:	8b 85       	ldd	r24, Y+11	; 0x0b
    4452:	9c 85       	ldd	r25, Y+12	; 0x0c
    4454:	9c 01       	movw	r18, r24
    4456:	2f 5f       	subi	r18, 0xFF	; 255
    4458:	3f 4f       	sbci	r19, 0xFF	; 255
    445a:	3c 87       	std	Y+12, r19	; 0x0c
    445c:	2b 87       	std	Y+11, r18	; 0x0b
    445e:	29 81       	ldd	r18, Y+1	; 0x01
    4460:	20 5d       	subi	r18, 0xD0	; 208
    4462:	fc 01       	movw	r30, r24
    4464:	20 83       	st	Z, r18
	c = c - (digit*1000);
    4466:	29 81       	ldd	r18, Y+1	; 0x01
    4468:	3a 81       	ldd	r19, Y+2	; 0x02
    446a:	4b 81       	ldd	r20, Y+3	; 0x03
    446c:	5c 81       	ldd	r21, Y+4	; 0x04
    446e:	88 ee       	ldi	r24, 0xE8	; 232
    4470:	93 e0       	ldi	r25, 0x03	; 3
    4472:	dc 01       	movw	r26, r24
    4474:	b3 d1       	rcall	.+870    	; 0x47dc <__muluhisi3>
    4476:	9b 01       	movw	r18, r22
    4478:	ac 01       	movw	r20, r24
    447a:	8f 81       	ldd	r24, Y+7	; 0x07
    447c:	98 85       	ldd	r25, Y+8	; 0x08
    447e:	a9 85       	ldd	r26, Y+9	; 0x09
    4480:	ba 85       	ldd	r27, Y+10	; 0x0a
    4482:	82 1b       	sub	r24, r18
    4484:	93 0b       	sbc	r25, r19
    4486:	a4 0b       	sbc	r26, r20
    4488:	b5 0b       	sbc	r27, r21
    448a:	8f 83       	std	Y+7, r24	; 0x07
    448c:	98 87       	std	Y+8, r25	; 0x08
    448e:	a9 87       	std	Y+9, r26	; 0x09
    4490:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 100;
    4492:	8f 81       	ldd	r24, Y+7	; 0x07
    4494:	98 85       	ldd	r25, Y+8	; 0x08
    4496:	a9 85       	ldd	r26, Y+9	; 0x09
    4498:	ba 85       	ldd	r27, Y+10	; 0x0a
    449a:	24 e6       	ldi	r18, 0x64	; 100
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	78 d1       	rcall	.+752    	; 0x4798 <__udivmodsi4>
    44a8:	da 01       	movw	r26, r20
    44aa:	c9 01       	movw	r24, r18
    44ac:	89 83       	std	Y+1, r24	; 0x01
    44ae:	9a 83       	std	Y+2, r25	; 0x02
    44b0:	ab 83       	std	Y+3, r26	; 0x03
    44b2:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    44b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    44b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    44b8:	9c 01       	movw	r18, r24
    44ba:	2f 5f       	subi	r18, 0xFF	; 255
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	3c 87       	std	Y+12, r19	; 0x0c
    44c0:	2b 87       	std	Y+11, r18	; 0x0b
    44c2:	29 81       	ldd	r18, Y+1	; 0x01
    44c4:	20 5d       	subi	r18, 0xD0	; 208
    44c6:	fc 01       	movw	r30, r24
    44c8:	20 83       	st	Z, r18
	c = c - (digit*100);
    44ca:	29 81       	ldd	r18, Y+1	; 0x01
    44cc:	3a 81       	ldd	r19, Y+2	; 0x02
    44ce:	4b 81       	ldd	r20, Y+3	; 0x03
    44d0:	5c 81       	ldd	r21, Y+4	; 0x04
    44d2:	84 e6       	ldi	r24, 0x64	; 100
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	dc 01       	movw	r26, r24
    44d8:	81 d1       	rcall	.+770    	; 0x47dc <__muluhisi3>
    44da:	9b 01       	movw	r18, r22
    44dc:	ac 01       	movw	r20, r24
    44de:	8f 81       	ldd	r24, Y+7	; 0x07
    44e0:	98 85       	ldd	r25, Y+8	; 0x08
    44e2:	a9 85       	ldd	r26, Y+9	; 0x09
    44e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    44e6:	82 1b       	sub	r24, r18
    44e8:	93 0b       	sbc	r25, r19
    44ea:	a4 0b       	sbc	r26, r20
    44ec:	b5 0b       	sbc	r27, r21
    44ee:	8f 83       	std	Y+7, r24	; 0x07
    44f0:	98 87       	std	Y+8, r25	; 0x08
    44f2:	a9 87       	std	Y+9, r26	; 0x09
    44f4:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10;
    44f6:	8f 81       	ldd	r24, Y+7	; 0x07
    44f8:	98 85       	ldd	r25, Y+8	; 0x08
    44fa:	a9 85       	ldd	r26, Y+9	; 0x09
    44fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    44fe:	2a e0       	ldi	r18, 0x0A	; 10
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	46 d1       	rcall	.+652    	; 0x4798 <__udivmodsi4>
    450c:	da 01       	movw	r26, r20
    450e:	c9 01       	movw	r24, r18
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	ab 83       	std	Y+3, r26	; 0x03
    4516:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4518:	8b 85       	ldd	r24, Y+11	; 0x0b
    451a:	9c 85       	ldd	r25, Y+12	; 0x0c
    451c:	9c 01       	movw	r18, r24
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	3c 87       	std	Y+12, r19	; 0x0c
    4524:	2b 87       	std	Y+11, r18	; 0x0b
    4526:	29 81       	ldd	r18, Y+1	; 0x01
    4528:	20 5d       	subi	r18, 0xD0	; 208
    452a:	fc 01       	movw	r30, r24
    452c:	20 83       	st	Z, r18
	digit = c - (digit*10);
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	9a 81       	ldd	r25, Y+2	; 0x02
    4532:	ab 81       	ldd	r26, Y+3	; 0x03
    4534:	bc 81       	ldd	r27, Y+4	; 0x04
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	aa 1f       	adc	r26, r26
    453c:	bb 1f       	adc	r27, r27
    453e:	9c 01       	movw	r18, r24
    4540:	ad 01       	movw	r20, r26
    4542:	22 0f       	add	r18, r18
    4544:	33 1f       	adc	r19, r19
    4546:	44 1f       	adc	r20, r20
    4548:	55 1f       	adc	r21, r21
    454a:	22 0f       	add	r18, r18
    454c:	33 1f       	adc	r19, r19
    454e:	44 1f       	adc	r20, r20
    4550:	55 1f       	adc	r21, r21
    4552:	82 0f       	add	r24, r18
    4554:	93 1f       	adc	r25, r19
    4556:	a4 1f       	adc	r26, r20
    4558:	b5 1f       	adc	r27, r21
    455a:	2f 81       	ldd	r18, Y+7	; 0x07
    455c:	38 85       	ldd	r19, Y+8	; 0x08
    455e:	49 85       	ldd	r20, Y+9	; 0x09
    4560:	5a 85       	ldd	r21, Y+10	; 0x0a
    4562:	79 01       	movw	r14, r18
    4564:	8a 01       	movw	r16, r20
    4566:	e8 1a       	sub	r14, r24
    4568:	f9 0a       	sbc	r15, r25
    456a:	0a 0b       	sbc	r16, r26
    456c:	1b 0b       	sbc	r17, r27
    456e:	d8 01       	movw	r26, r16
    4570:	c7 01       	movw	r24, r14
    4572:	89 83       	std	Y+1, r24	; 0x01
    4574:	9a 83       	std	Y+2, r25	; 0x02
    4576:	ab 83       	std	Y+3, r26	; 0x03
    4578:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    457a:	8b 85       	ldd	r24, Y+11	; 0x0b
    457c:	9c 85       	ldd	r25, Y+12	; 0x0c
    457e:	9c 01       	movw	r18, r24
    4580:	2f 5f       	subi	r18, 0xFF	; 255
    4582:	3f 4f       	sbci	r19, 0xFF	; 255
    4584:	3c 87       	std	Y+12, r19	; 0x0c
    4586:	2b 87       	std	Y+11, r18	; 0x0b
    4588:	29 81       	ldd	r18, Y+1	; 0x01
    458a:	20 5d       	subi	r18, 0xD0	; 208
    458c:	fc 01       	movw	r30, r24
    458e:	20 83       	st	Z, r18
	*buf = '\0';
    4590:	8b 85       	ldd	r24, Y+11	; 0x0b
    4592:	9c 85       	ldd	r25, Y+12	; 0x0c
    4594:	fc 01       	movw	r30, r24
    4596:	10 82       	st	Z, r1
}
    4598:	ac 96       	adiw	r28, 0x2c	; 44
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	ff 90       	pop	r15
    45ae:	ef 90       	pop	r14
    45b0:	08 95       	ret

000045b2 <_ZN3vfo17formatDisplayFreqEPcS0_>:
	intToString32(freq,tbuf);
	formatDisplayFreq(tbuf,buf);
}


void vfo::formatDisplayFreq(char *ibuf, char *obuf) {
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	2c 97       	sbiw	r28, 0x0c	; 12
    45bc:	0f b6       	in	r0, 0x3f	; 63
    45be:	f8 94       	cli
    45c0:	de bf       	out	0x3e, r29	; 62
    45c2:	0f be       	out	0x3f, r0	; 63
    45c4:	cd bf       	out	0x3d, r28	; 61
    45c6:	98 87       	std	Y+8, r25	; 0x08
    45c8:	8f 83       	std	Y+7, r24	; 0x07
    45ca:	7a 87       	std	Y+10, r23	; 0x0a
    45cc:	69 87       	std	Y+9, r22	; 0x09
    45ce:	5c 87       	std	Y+12, r21	; 0x0c
    45d0:	4b 87       	std	Y+11, r20	; 0x0b

	char *dstptr = obuf;
    45d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    45d6:	9a 83       	std	Y+2, r25	; 0x02
    45d8:	89 83       	std	Y+1, r24	; 0x01
	int found = 0;
    45da:	1c 82       	std	Y+4, r1	; 0x04
    45dc:	1b 82       	std	Y+3, r1	; 0x03

	//
	// strip leading zeros and insert decimal point
	//
	for (int i=0; i< 9; i++) {
    45de:	1e 82       	std	Y+6, r1	; 0x06
    45e0:	1d 82       	std	Y+5, r1	; 0x05
    45e2:	55 c0       	rjmp	.+170    	; 0x468e <_ZN3vfo17formatDisplayFreqEPcS0_+0xdc>
		
		if (found) {
    45e4:	8b 81       	ldd	r24, Y+3	; 0x03
    45e6:	9c 81       	ldd	r25, Y+4	; 0x04
    45e8:	89 2b       	or	r24, r25
    45ea:	61 f1       	breq	.+88     	; 0x4644 <_ZN3vfo17formatDisplayFreqEPcS0_+0x92>
			if ( (i == 3) | (i == 6)) {
    45ec:	31 e0       	ldi	r19, 0x01	; 1
    45ee:	8d 81       	ldd	r24, Y+5	; 0x05
    45f0:	9e 81       	ldd	r25, Y+6	; 0x06
    45f2:	03 97       	sbiw	r24, 0x03	; 3
    45f4:	09 f0       	breq	.+2      	; 0x45f8 <_ZN3vfo17formatDisplayFreqEPcS0_+0x46>
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	21 e0       	ldi	r18, 0x01	; 1
    45fa:	8d 81       	ldd	r24, Y+5	; 0x05
    45fc:	9e 81       	ldd	r25, Y+6	; 0x06
    45fe:	06 97       	sbiw	r24, 0x06	; 6
    4600:	09 f0       	breq	.+2      	; 0x4604 <_ZN3vfo17formatDisplayFreqEPcS0_+0x52>
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	83 2f       	mov	r24, r19
    4606:	82 2b       	or	r24, r18
    4608:	88 23       	and	r24, r24
    460a:	51 f0       	breq	.+20     	; 0x4620 <_ZN3vfo17formatDisplayFreqEPcS0_+0x6e>
				*dstptr++ = '.';	
    460c:	89 81       	ldd	r24, Y+1	; 0x01
    460e:	9a 81       	ldd	r25, Y+2	; 0x02
    4610:	9c 01       	movw	r18, r24
    4612:	2f 5f       	subi	r18, 0xFF	; 255
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	3a 83       	std	Y+2, r19	; 0x02
    4618:	29 83       	std	Y+1, r18	; 0x01
    461a:	2e e2       	ldi	r18, 0x2E	; 46
    461c:	fc 01       	movw	r30, r24
    461e:	20 83       	st	Z, r18
			}
			*dstptr++ = ibuf[i];
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	9a 81       	ldd	r25, Y+2	; 0x02
    4624:	9c 01       	movw	r18, r24
    4626:	2f 5f       	subi	r18, 0xFF	; 255
    4628:	3f 4f       	sbci	r19, 0xFF	; 255
    462a:	3a 83       	std	Y+2, r19	; 0x02
    462c:	29 83       	std	Y+1, r18	; 0x01
    462e:	2d 81       	ldd	r18, Y+5	; 0x05
    4630:	3e 81       	ldd	r19, Y+6	; 0x06
    4632:	49 85       	ldd	r20, Y+9	; 0x09
    4634:	5a 85       	ldd	r21, Y+10	; 0x0a
    4636:	24 0f       	add	r18, r20
    4638:	35 1f       	adc	r19, r21
    463a:	f9 01       	movw	r30, r18
    463c:	20 81       	ld	r18, Z
    463e:	fc 01       	movw	r30, r24
    4640:	20 83       	st	Z, r18
    4642:	20 c0       	rjmp	.+64     	; 0x4684 <_ZN3vfo17formatDisplayFreqEPcS0_+0xd2>
		
		} else {
			if ( ibuf[i] == '0') {
    4644:	8d 81       	ldd	r24, Y+5	; 0x05
    4646:	9e 81       	ldd	r25, Y+6	; 0x06
    4648:	29 85       	ldd	r18, Y+9	; 0x09
    464a:	3a 85       	ldd	r19, Y+10	; 0x0a
    464c:	82 0f       	add	r24, r18
    464e:	93 1f       	adc	r25, r19
    4650:	fc 01       	movw	r30, r24
    4652:	80 81       	ld	r24, Z
    4654:	80 33       	cpi	r24, 0x30	; 48
    4656:	09 f4       	brne	.+2      	; 0x465a <_ZN3vfo17formatDisplayFreqEPcS0_+0xa8>
				continue;
    4658:	15 c0       	rjmp	.+42     	; 0x4684 <_ZN3vfo17formatDisplayFreqEPcS0_+0xd2>
			} else {
				found = 1;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9c 83       	std	Y+4, r25	; 0x04
    4660:	8b 83       	std	Y+3, r24	; 0x03
				*dstptr++ = ibuf[i];
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	9c 01       	movw	r18, r24
    4668:	2f 5f       	subi	r18, 0xFF	; 255
    466a:	3f 4f       	sbci	r19, 0xFF	; 255
    466c:	3a 83       	std	Y+2, r19	; 0x02
    466e:	29 83       	std	Y+1, r18	; 0x01
    4670:	2d 81       	ldd	r18, Y+5	; 0x05
    4672:	3e 81       	ldd	r19, Y+6	; 0x06
    4674:	49 85       	ldd	r20, Y+9	; 0x09
    4676:	5a 85       	ldd	r21, Y+10	; 0x0a
    4678:	24 0f       	add	r18, r20
    467a:	35 1f       	adc	r19, r21
    467c:	f9 01       	movw	r30, r18
    467e:	20 81       	ld	r18, Z
    4680:	fc 01       	movw	r30, r24
    4682:	20 83       	st	Z, r18
	int found = 0;

	//
	// strip leading zeros and insert decimal point
	//
	for (int i=0; i< 9; i++) {
    4684:	8d 81       	ldd	r24, Y+5	; 0x05
    4686:	9e 81       	ldd	r25, Y+6	; 0x06
    4688:	01 96       	adiw	r24, 0x01	; 1
    468a:	9e 83       	std	Y+6, r25	; 0x06
    468c:	8d 83       	std	Y+5, r24	; 0x05
    468e:	8d 81       	ldd	r24, Y+5	; 0x05
    4690:	9e 81       	ldd	r25, Y+6	; 0x06
    4692:	09 97       	sbiw	r24, 0x09	; 9
    4694:	0c f4       	brge	.+2      	; 0x4698 <_ZN3vfo17formatDisplayFreqEPcS0_+0xe6>
    4696:	a6 cf       	rjmp	.-180    	; 0x45e4 <_ZN3vfo17formatDisplayFreqEPcS0_+0x32>
				found = 1;
				*dstptr++ = ibuf[i];
			}
		}
	}
	*dstptr = '\0';
    4698:	89 81       	ldd	r24, Y+1	; 0x01
    469a:	9a 81       	ldd	r25, Y+2	; 0x02
    469c:	fc 01       	movw	r30, r24
    469e:	10 82       	st	Z, r1
}
    46a0:	2c 96       	adiw	r28, 0x0c	; 12
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	08 95       	ret

000046b2 <_ZN3vfo16getTxDisplayFreqEPc5_band>:



void vfo::getTxDisplayFreq(char *buf, band_t band) {
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	cd b7       	in	r28, 0x3d	; 61
    46b8:	de b7       	in	r29, 0x3e	; 62
    46ba:	69 97       	sbiw	r28, 0x19	; 25
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	9e 8b       	std	Y+22, r25	; 0x16
    46c8:	8d 8b       	std	Y+21, r24	; 0x15
    46ca:	78 8f       	std	Y+24, r23	; 0x18
    46cc:	6f 8b       	std	Y+23, r22	; 0x17
    46ce:	49 8f       	std	Y+25, r20	; 0x19

uint32_t freq = vfoData[band].txFreq;
    46d0:	89 8d       	ldd	r24, Y+25	; 0x19
    46d2:	88 2f       	mov	r24, r24
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	2d 89       	ldd	r18, Y+21	; 0x15
    46d8:	3e 89       	ldd	r19, Y+22	; 0x16
    46da:	88 0f       	add	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	ac 01       	movw	r20, r24
    46e0:	44 0f       	add	r20, r20
    46e2:	55 1f       	adc	r21, r21
    46e4:	44 0f       	add	r20, r20
    46e6:	55 1f       	adc	r21, r21
    46e8:	44 0f       	add	r20, r20
    46ea:	55 1f       	adc	r21, r21
    46ec:	84 0f       	add	r24, r20
    46ee:	95 1f       	adc	r25, r21
    46f0:	82 0f       	add	r24, r18
    46f2:	93 1f       	adc	r25, r19
    46f4:	09 96       	adiw	r24, 0x09	; 9
    46f6:	fc 01       	movw	r30, r24
    46f8:	80 81       	ld	r24, Z
    46fa:	91 81       	ldd	r25, Z+1	; 0x01
    46fc:	a2 81       	ldd	r26, Z+2	; 0x02
    46fe:	b3 81       	ldd	r27, Z+3	; 0x03
    4700:	89 83       	std	Y+1, r24	; 0x01
    4702:	9a 83       	std	Y+2, r25	; 0x02
    4704:	ab 83       	std	Y+3, r26	; 0x03
    4706:	bc 83       	std	Y+4, r27	; 0x04
char tbuf[16];

	intToString32(freq,tbuf);
    4708:	9e 01       	movw	r18, r28
    470a:	2b 5f       	subi	r18, 0xFB	; 251
    470c:	3f 4f       	sbci	r19, 0xFF	; 255
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	9a 81       	ldd	r25, Y+2	; 0x02
    4712:	ab 81       	ldd	r26, Y+3	; 0x03
    4714:	bc 81       	ldd	r27, Y+4	; 0x04
    4716:	ed 89       	ldd	r30, Y+21	; 0x15
    4718:	fe 89       	ldd	r31, Y+22	; 0x16
    471a:	ac 01       	movw	r20, r24
    471c:	bd 01       	movw	r22, r26
    471e:	cf 01       	movw	r24, r30
    4720:	6a dd       	rcall	.-1324   	; 0x41f6 <_ZN3vfo13intToString32EmPc>
	formatDisplayFreq(tbuf,buf);
    4722:	4f 89       	ldd	r20, Y+23	; 0x17
    4724:	58 8d       	ldd	r21, Y+24	; 0x18
    4726:	9e 01       	movw	r18, r28
    4728:	2b 5f       	subi	r18, 0xFB	; 251
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
    472c:	8d 89       	ldd	r24, Y+21	; 0x15
    472e:	9e 89       	ldd	r25, Y+22	; 0x16
    4730:	b9 01       	movw	r22, r18
    4732:	3f df       	rcall	.-386    	; 0x45b2 <_ZN3vfo17formatDisplayFreqEPcS0_>
}
    4734:	69 96       	adiw	r28, 0x19	; 25
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	df 91       	pop	r29
    4742:	cf 91       	pop	r28
    4744:	08 95       	ret

00004746 <_ZN3vfo7getLineEv>:


uint16_t vfo::getLine(void) {
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	00 d0       	rcall	.+0      	; 0x474c <_ZN3vfo7getLineEv+0x6>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
	return line;
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	87 55       	subi	r24, 0x57	; 87
    475a:	9f 4f       	sbci	r25, 0xFF	; 255
    475c:	fc 01       	movw	r30, r24
    475e:	80 81       	ld	r24, Z
    4760:	91 81       	ldd	r25, Z+1	; 0x01
}
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	08 95       	ret

0000476c <__cxa_pure_virtual>:


int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {};
void __cxa_pure_virtual(void) {};
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	08 95       	ret

0000477a <__mulsi3>:
    477a:	db 01       	movw	r26, r22
    477c:	8f 93       	push	r24
    477e:	9f 93       	push	r25
    4780:	2d d0       	rcall	.+90     	; 0x47dc <__muluhisi3>
    4782:	bf 91       	pop	r27
    4784:	af 91       	pop	r26
    4786:	a2 9f       	mul	r26, r18
    4788:	80 0d       	add	r24, r0
    478a:	91 1d       	adc	r25, r1
    478c:	a3 9f       	mul	r26, r19
    478e:	90 0d       	add	r25, r0
    4790:	b2 9f       	mul	r27, r18
    4792:	90 0d       	add	r25, r0
    4794:	11 24       	eor	r1, r1
    4796:	08 95       	ret

00004798 <__udivmodsi4>:
    4798:	a1 e2       	ldi	r26, 0x21	; 33
    479a:	1a 2e       	mov	r1, r26
    479c:	aa 1b       	sub	r26, r26
    479e:	bb 1b       	sub	r27, r27
    47a0:	fd 01       	movw	r30, r26
    47a2:	0d c0       	rjmp	.+26     	; 0x47be <__udivmodsi4_ep>

000047a4 <__udivmodsi4_loop>:
    47a4:	aa 1f       	adc	r26, r26
    47a6:	bb 1f       	adc	r27, r27
    47a8:	ee 1f       	adc	r30, r30
    47aa:	ff 1f       	adc	r31, r31
    47ac:	a2 17       	cp	r26, r18
    47ae:	b3 07       	cpc	r27, r19
    47b0:	e4 07       	cpc	r30, r20
    47b2:	f5 07       	cpc	r31, r21
    47b4:	20 f0       	brcs	.+8      	; 0x47be <__udivmodsi4_ep>
    47b6:	a2 1b       	sub	r26, r18
    47b8:	b3 0b       	sbc	r27, r19
    47ba:	e4 0b       	sbc	r30, r20
    47bc:	f5 0b       	sbc	r31, r21

000047be <__udivmodsi4_ep>:
    47be:	66 1f       	adc	r22, r22
    47c0:	77 1f       	adc	r23, r23
    47c2:	88 1f       	adc	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	1a 94       	dec	r1
    47c8:	69 f7       	brne	.-38     	; 0x47a4 <__udivmodsi4_loop>
    47ca:	60 95       	com	r22
    47cc:	70 95       	com	r23
    47ce:	80 95       	com	r24
    47d0:	90 95       	com	r25
    47d2:	9b 01       	movw	r18, r22
    47d4:	ac 01       	movw	r20, r24
    47d6:	bd 01       	movw	r22, r26
    47d8:	cf 01       	movw	r24, r30
    47da:	08 95       	ret

000047dc <__muluhisi3>:
    47dc:	09 d0       	rcall	.+18     	; 0x47f0 <__umulhisi3>
    47de:	a5 9f       	mul	r26, r21
    47e0:	90 0d       	add	r25, r0
    47e2:	b4 9f       	mul	r27, r20
    47e4:	90 0d       	add	r25, r0
    47e6:	a4 9f       	mul	r26, r20
    47e8:	80 0d       	add	r24, r0
    47ea:	91 1d       	adc	r25, r1
    47ec:	11 24       	eor	r1, r1
    47ee:	08 95       	ret

000047f0 <__umulhisi3>:
    47f0:	a2 9f       	mul	r26, r18
    47f2:	b0 01       	movw	r22, r0
    47f4:	b3 9f       	mul	r27, r19
    47f6:	c0 01       	movw	r24, r0
    47f8:	a3 9f       	mul	r26, r19
    47fa:	70 0d       	add	r23, r0
    47fc:	81 1d       	adc	r24, r1
    47fe:	11 24       	eor	r1, r1
    4800:	91 1d       	adc	r25, r1
    4802:	b2 9f       	mul	r27, r18
    4804:	70 0d       	add	r23, r0
    4806:	81 1d       	adc	r24, r1
    4808:	11 24       	eor	r1, r1
    480a:	91 1d       	adc	r25, r1
    480c:	08 95       	ret

0000480e <__fixunssfsi>:
    480e:	70 d0       	rcall	.+224    	; 0x48f0 <__fp_splitA>
    4810:	88 f0       	brcs	.+34     	; 0x4834 <__fixunssfsi+0x26>
    4812:	9f 57       	subi	r25, 0x7F	; 127
    4814:	90 f0       	brcs	.+36     	; 0x483a <__fixunssfsi+0x2c>
    4816:	b9 2f       	mov	r27, r25
    4818:	99 27       	eor	r25, r25
    481a:	b7 51       	subi	r27, 0x17	; 23
    481c:	a0 f0       	brcs	.+40     	; 0x4846 <__fixunssfsi+0x38>
    481e:	d1 f0       	breq	.+52     	; 0x4854 <__fixunssfsi+0x46>
    4820:	66 0f       	add	r22, r22
    4822:	77 1f       	adc	r23, r23
    4824:	88 1f       	adc	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	1a f0       	brmi	.+6      	; 0x4830 <__fixunssfsi+0x22>
    482a:	ba 95       	dec	r27
    482c:	c9 f7       	brne	.-14     	; 0x4820 <__fixunssfsi+0x12>
    482e:	12 c0       	rjmp	.+36     	; 0x4854 <__fixunssfsi+0x46>
    4830:	b1 30       	cpi	r27, 0x01	; 1
    4832:	81 f0       	breq	.+32     	; 0x4854 <__fixunssfsi+0x46>
    4834:	77 d0       	rcall	.+238    	; 0x4924 <__fp_zero>
    4836:	b1 e0       	ldi	r27, 0x01	; 1
    4838:	08 95       	ret
    483a:	74 c0       	rjmp	.+232    	; 0x4924 <__fp_zero>
    483c:	67 2f       	mov	r22, r23
    483e:	78 2f       	mov	r23, r24
    4840:	88 27       	eor	r24, r24
    4842:	b8 5f       	subi	r27, 0xF8	; 248
    4844:	39 f0       	breq	.+14     	; 0x4854 <__fixunssfsi+0x46>
    4846:	b9 3f       	cpi	r27, 0xF9	; 249
    4848:	cc f3       	brlt	.-14     	; 0x483c <__fixunssfsi+0x2e>
    484a:	86 95       	lsr	r24
    484c:	77 95       	ror	r23
    484e:	67 95       	ror	r22
    4850:	b3 95       	inc	r27
    4852:	d9 f7       	brne	.-10     	; 0x484a <__fixunssfsi+0x3c>
    4854:	3e f4       	brtc	.+14     	; 0x4864 <__fixunssfsi+0x56>
    4856:	90 95       	com	r25
    4858:	80 95       	com	r24
    485a:	70 95       	com	r23
    485c:	61 95       	neg	r22
    485e:	7f 4f       	sbci	r23, 0xFF	; 255
    4860:	8f 4f       	sbci	r24, 0xFF	; 255
    4862:	9f 4f       	sbci	r25, 0xFF	; 255
    4864:	08 95       	ret

00004866 <__floatunsisf>:
    4866:	e8 94       	clt
    4868:	09 c0       	rjmp	.+18     	; 0x487c <__floatsisf+0x12>

0000486a <__floatsisf>:
    486a:	97 fb       	bst	r25, 7
    486c:	3e f4       	brtc	.+14     	; 0x487c <__floatsisf+0x12>
    486e:	90 95       	com	r25
    4870:	80 95       	com	r24
    4872:	70 95       	com	r23
    4874:	61 95       	neg	r22
    4876:	7f 4f       	sbci	r23, 0xFF	; 255
    4878:	8f 4f       	sbci	r24, 0xFF	; 255
    487a:	9f 4f       	sbci	r25, 0xFF	; 255
    487c:	99 23       	and	r25, r25
    487e:	a9 f0       	breq	.+42     	; 0x48aa <__floatsisf+0x40>
    4880:	f9 2f       	mov	r31, r25
    4882:	96 e9       	ldi	r25, 0x96	; 150
    4884:	bb 27       	eor	r27, r27
    4886:	93 95       	inc	r25
    4888:	f6 95       	lsr	r31
    488a:	87 95       	ror	r24
    488c:	77 95       	ror	r23
    488e:	67 95       	ror	r22
    4890:	b7 95       	ror	r27
    4892:	f1 11       	cpse	r31, r1
    4894:	f8 cf       	rjmp	.-16     	; 0x4886 <__floatsisf+0x1c>
    4896:	fa f4       	brpl	.+62     	; 0x48d6 <__floatsisf+0x6c>
    4898:	bb 0f       	add	r27, r27
    489a:	11 f4       	brne	.+4      	; 0x48a0 <__floatsisf+0x36>
    489c:	60 ff       	sbrs	r22, 0
    489e:	1b c0       	rjmp	.+54     	; 0x48d6 <__floatsisf+0x6c>
    48a0:	6f 5f       	subi	r22, 0xFF	; 255
    48a2:	7f 4f       	sbci	r23, 0xFF	; 255
    48a4:	8f 4f       	sbci	r24, 0xFF	; 255
    48a6:	9f 4f       	sbci	r25, 0xFF	; 255
    48a8:	16 c0       	rjmp	.+44     	; 0x48d6 <__floatsisf+0x6c>
    48aa:	88 23       	and	r24, r24
    48ac:	11 f0       	breq	.+4      	; 0x48b2 <__floatsisf+0x48>
    48ae:	96 e9       	ldi	r25, 0x96	; 150
    48b0:	11 c0       	rjmp	.+34     	; 0x48d4 <__floatsisf+0x6a>
    48b2:	77 23       	and	r23, r23
    48b4:	21 f0       	breq	.+8      	; 0x48be <__floatsisf+0x54>
    48b6:	9e e8       	ldi	r25, 0x8E	; 142
    48b8:	87 2f       	mov	r24, r23
    48ba:	76 2f       	mov	r23, r22
    48bc:	05 c0       	rjmp	.+10     	; 0x48c8 <__floatsisf+0x5e>
    48be:	66 23       	and	r22, r22
    48c0:	71 f0       	breq	.+28     	; 0x48de <__floatsisf+0x74>
    48c2:	96 e8       	ldi	r25, 0x86	; 134
    48c4:	86 2f       	mov	r24, r22
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	2a f0       	brmi	.+10     	; 0x48d6 <__floatsisf+0x6c>
    48cc:	9a 95       	dec	r25
    48ce:	66 0f       	add	r22, r22
    48d0:	77 1f       	adc	r23, r23
    48d2:	88 1f       	adc	r24, r24
    48d4:	da f7       	brpl	.-10     	; 0x48cc <__floatsisf+0x62>
    48d6:	88 0f       	add	r24, r24
    48d8:	96 95       	lsr	r25
    48da:	87 95       	ror	r24
    48dc:	97 f9       	bld	r25, 7
    48de:	08 95       	ret

000048e0 <__fp_split3>:
    48e0:	57 fd       	sbrc	r21, 7
    48e2:	90 58       	subi	r25, 0x80	; 128
    48e4:	44 0f       	add	r20, r20
    48e6:	55 1f       	adc	r21, r21
    48e8:	59 f0       	breq	.+22     	; 0x4900 <__fp_splitA+0x10>
    48ea:	5f 3f       	cpi	r21, 0xFF	; 255
    48ec:	71 f0       	breq	.+28     	; 0x490a <__fp_splitA+0x1a>
    48ee:	47 95       	ror	r20

000048f0 <__fp_splitA>:
    48f0:	88 0f       	add	r24, r24
    48f2:	97 fb       	bst	r25, 7
    48f4:	99 1f       	adc	r25, r25
    48f6:	61 f0       	breq	.+24     	; 0x4910 <__fp_splitA+0x20>
    48f8:	9f 3f       	cpi	r25, 0xFF	; 255
    48fa:	79 f0       	breq	.+30     	; 0x491a <__fp_splitA+0x2a>
    48fc:	87 95       	ror	r24
    48fe:	08 95       	ret
    4900:	12 16       	cp	r1, r18
    4902:	13 06       	cpc	r1, r19
    4904:	14 06       	cpc	r1, r20
    4906:	55 1f       	adc	r21, r21
    4908:	f2 cf       	rjmp	.-28     	; 0x48ee <__fp_split3+0xe>
    490a:	46 95       	lsr	r20
    490c:	f1 df       	rcall	.-30     	; 0x48f0 <__fp_splitA>
    490e:	08 c0       	rjmp	.+16     	; 0x4920 <__fp_splitA+0x30>
    4910:	16 16       	cp	r1, r22
    4912:	17 06       	cpc	r1, r23
    4914:	18 06       	cpc	r1, r24
    4916:	99 1f       	adc	r25, r25
    4918:	f1 cf       	rjmp	.-30     	; 0x48fc <__fp_splitA+0xc>
    491a:	86 95       	lsr	r24
    491c:	71 05       	cpc	r23, r1
    491e:	61 05       	cpc	r22, r1
    4920:	08 94       	sec
    4922:	08 95       	ret

00004924 <__fp_zero>:
    4924:	e8 94       	clt

00004926 <__fp_szero>:
    4926:	bb 27       	eor	r27, r27
    4928:	66 27       	eor	r22, r22
    492a:	77 27       	eor	r23, r23
    492c:	cb 01       	movw	r24, r22
    492e:	97 f9       	bld	r25, 7
    4930:	08 95       	ret

00004932 <__mulsf3>:
    4932:	0b d0       	rcall	.+22     	; 0x494a <__mulsf3x>
    4934:	78 c0       	rjmp	.+240    	; 0x4a26 <__fp_round>
    4936:	69 d0       	rcall	.+210    	; 0x4a0a <__fp_pscA>
    4938:	28 f0       	brcs	.+10     	; 0x4944 <__mulsf3+0x12>
    493a:	6e d0       	rcall	.+220    	; 0x4a18 <__fp_pscB>
    493c:	18 f0       	brcs	.+6      	; 0x4944 <__mulsf3+0x12>
    493e:	95 23       	and	r25, r21
    4940:	09 f0       	breq	.+2      	; 0x4944 <__mulsf3+0x12>
    4942:	5a c0       	rjmp	.+180    	; 0x49f8 <__fp_inf>
    4944:	5f c0       	rjmp	.+190    	; 0x4a04 <__fp_nan>
    4946:	11 24       	eor	r1, r1
    4948:	ee cf       	rjmp	.-36     	; 0x4926 <__fp_szero>

0000494a <__mulsf3x>:
    494a:	ca df       	rcall	.-108    	; 0x48e0 <__fp_split3>
    494c:	a0 f3       	brcs	.-24     	; 0x4936 <__mulsf3+0x4>

0000494e <__mulsf3_pse>:
    494e:	95 9f       	mul	r25, r21
    4950:	d1 f3       	breq	.-12     	; 0x4946 <__mulsf3+0x14>
    4952:	95 0f       	add	r25, r21
    4954:	50 e0       	ldi	r21, 0x00	; 0
    4956:	55 1f       	adc	r21, r21
    4958:	62 9f       	mul	r22, r18
    495a:	f0 01       	movw	r30, r0
    495c:	72 9f       	mul	r23, r18
    495e:	bb 27       	eor	r27, r27
    4960:	f0 0d       	add	r31, r0
    4962:	b1 1d       	adc	r27, r1
    4964:	63 9f       	mul	r22, r19
    4966:	aa 27       	eor	r26, r26
    4968:	f0 0d       	add	r31, r0
    496a:	b1 1d       	adc	r27, r1
    496c:	aa 1f       	adc	r26, r26
    496e:	64 9f       	mul	r22, r20
    4970:	66 27       	eor	r22, r22
    4972:	b0 0d       	add	r27, r0
    4974:	a1 1d       	adc	r26, r1
    4976:	66 1f       	adc	r22, r22
    4978:	82 9f       	mul	r24, r18
    497a:	22 27       	eor	r18, r18
    497c:	b0 0d       	add	r27, r0
    497e:	a1 1d       	adc	r26, r1
    4980:	62 1f       	adc	r22, r18
    4982:	73 9f       	mul	r23, r19
    4984:	b0 0d       	add	r27, r0
    4986:	a1 1d       	adc	r26, r1
    4988:	62 1f       	adc	r22, r18
    498a:	83 9f       	mul	r24, r19
    498c:	a0 0d       	add	r26, r0
    498e:	61 1d       	adc	r22, r1
    4990:	22 1f       	adc	r18, r18
    4992:	74 9f       	mul	r23, r20
    4994:	33 27       	eor	r19, r19
    4996:	a0 0d       	add	r26, r0
    4998:	61 1d       	adc	r22, r1
    499a:	23 1f       	adc	r18, r19
    499c:	84 9f       	mul	r24, r20
    499e:	60 0d       	add	r22, r0
    49a0:	21 1d       	adc	r18, r1
    49a2:	82 2f       	mov	r24, r18
    49a4:	76 2f       	mov	r23, r22
    49a6:	6a 2f       	mov	r22, r26
    49a8:	11 24       	eor	r1, r1
    49aa:	9f 57       	subi	r25, 0x7F	; 127
    49ac:	50 40       	sbci	r21, 0x00	; 0
    49ae:	8a f0       	brmi	.+34     	; 0x49d2 <__mulsf3_pse+0x84>
    49b0:	e1 f0       	breq	.+56     	; 0x49ea <__mulsf3_pse+0x9c>
    49b2:	88 23       	and	r24, r24
    49b4:	4a f0       	brmi	.+18     	; 0x49c8 <__mulsf3_pse+0x7a>
    49b6:	ee 0f       	add	r30, r30
    49b8:	ff 1f       	adc	r31, r31
    49ba:	bb 1f       	adc	r27, r27
    49bc:	66 1f       	adc	r22, r22
    49be:	77 1f       	adc	r23, r23
    49c0:	88 1f       	adc	r24, r24
    49c2:	91 50       	subi	r25, 0x01	; 1
    49c4:	50 40       	sbci	r21, 0x00	; 0
    49c6:	a9 f7       	brne	.-22     	; 0x49b2 <__mulsf3_pse+0x64>
    49c8:	9e 3f       	cpi	r25, 0xFE	; 254
    49ca:	51 05       	cpc	r21, r1
    49cc:	70 f0       	brcs	.+28     	; 0x49ea <__mulsf3_pse+0x9c>
    49ce:	14 c0       	rjmp	.+40     	; 0x49f8 <__fp_inf>
    49d0:	aa cf       	rjmp	.-172    	; 0x4926 <__fp_szero>
    49d2:	5f 3f       	cpi	r21, 0xFF	; 255
    49d4:	ec f3       	brlt	.-6      	; 0x49d0 <__mulsf3_pse+0x82>
    49d6:	98 3e       	cpi	r25, 0xE8	; 232
    49d8:	dc f3       	brlt	.-10     	; 0x49d0 <__mulsf3_pse+0x82>
    49da:	86 95       	lsr	r24
    49dc:	77 95       	ror	r23
    49de:	67 95       	ror	r22
    49e0:	b7 95       	ror	r27
    49e2:	f7 95       	ror	r31
    49e4:	e7 95       	ror	r30
    49e6:	9f 5f       	subi	r25, 0xFF	; 255
    49e8:	c1 f7       	brne	.-16     	; 0x49da <__mulsf3_pse+0x8c>
    49ea:	fe 2b       	or	r31, r30
    49ec:	88 0f       	add	r24, r24
    49ee:	91 1d       	adc	r25, r1
    49f0:	96 95       	lsr	r25
    49f2:	87 95       	ror	r24
    49f4:	97 f9       	bld	r25, 7
    49f6:	08 95       	ret

000049f8 <__fp_inf>:
    49f8:	97 f9       	bld	r25, 7
    49fa:	9f 67       	ori	r25, 0x7F	; 127
    49fc:	80 e8       	ldi	r24, 0x80	; 128
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	60 e0       	ldi	r22, 0x00	; 0
    4a02:	08 95       	ret

00004a04 <__fp_nan>:
    4a04:	9f ef       	ldi	r25, 0xFF	; 255
    4a06:	80 ec       	ldi	r24, 0xC0	; 192
    4a08:	08 95       	ret

00004a0a <__fp_pscA>:
    4a0a:	00 24       	eor	r0, r0
    4a0c:	0a 94       	dec	r0
    4a0e:	16 16       	cp	r1, r22
    4a10:	17 06       	cpc	r1, r23
    4a12:	18 06       	cpc	r1, r24
    4a14:	09 06       	cpc	r0, r25
    4a16:	08 95       	ret

00004a18 <__fp_pscB>:
    4a18:	00 24       	eor	r0, r0
    4a1a:	0a 94       	dec	r0
    4a1c:	12 16       	cp	r1, r18
    4a1e:	13 06       	cpc	r1, r19
    4a20:	14 06       	cpc	r1, r20
    4a22:	05 06       	cpc	r0, r21
    4a24:	08 95       	ret

00004a26 <__fp_round>:
    4a26:	09 2e       	mov	r0, r25
    4a28:	03 94       	inc	r0
    4a2a:	00 0c       	add	r0, r0
    4a2c:	11 f4       	brne	.+4      	; 0x4a32 <__fp_round+0xc>
    4a2e:	88 23       	and	r24, r24
    4a30:	52 f0       	brmi	.+20     	; 0x4a46 <__fp_round+0x20>
    4a32:	bb 0f       	add	r27, r27
    4a34:	40 f4       	brcc	.+16     	; 0x4a46 <__fp_round+0x20>
    4a36:	bf 2b       	or	r27, r31
    4a38:	11 f4       	brne	.+4      	; 0x4a3e <__fp_round+0x18>
    4a3a:	60 ff       	sbrs	r22, 0
    4a3c:	04 c0       	rjmp	.+8      	; 0x4a46 <__fp_round+0x20>
    4a3e:	6f 5f       	subi	r22, 0xFF	; 255
    4a40:	7f 4f       	sbci	r23, 0xFF	; 255
    4a42:	8f 4f       	sbci	r24, 0xFF	; 255
    4a44:	9f 4f       	sbci	r25, 0xFF	; 255
    4a46:	08 95       	ret

00004a48 <malloc>:
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	82 30       	cpi	r24, 0x02	; 2
    4a4e:	91 05       	cpc	r25, r1
    4a50:	10 f4       	brcc	.+4      	; 0x4a56 <malloc+0xe>
    4a52:	82 e0       	ldi	r24, 0x02	; 2
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <__flp>
    4a5a:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <__flp+0x1>
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	c0 e0       	ldi	r28, 0x00	; 0
    4a64:	d0 e0       	ldi	r29, 0x00	; 0
    4a66:	30 97       	sbiw	r30, 0x00	; 0
    4a68:	11 f1       	breq	.+68     	; 0x4aae <malloc+0x66>
    4a6a:	40 81       	ld	r20, Z
    4a6c:	51 81       	ldd	r21, Z+1	; 0x01
    4a6e:	48 17       	cp	r20, r24
    4a70:	59 07       	cpc	r21, r25
    4a72:	c0 f0       	brcs	.+48     	; 0x4aa4 <malloc+0x5c>
    4a74:	48 17       	cp	r20, r24
    4a76:	59 07       	cpc	r21, r25
    4a78:	61 f4       	brne	.+24     	; 0x4a92 <malloc+0x4a>
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	20 97       	sbiw	r28, 0x00	; 0
    4a80:	19 f0       	breq	.+6      	; 0x4a88 <malloc+0x40>
    4a82:	9b 83       	std	Y+3, r25	; 0x03
    4a84:	8a 83       	std	Y+2, r24	; 0x02
    4a86:	2b c0       	rjmp	.+86     	; 0x4ade <malloc+0x96>
    4a88:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <__flp+0x1>
    4a8c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__flp>
    4a90:	26 c0       	rjmp	.+76     	; 0x4ade <malloc+0x96>
    4a92:	21 15       	cp	r18, r1
    4a94:	31 05       	cpc	r19, r1
    4a96:	19 f0       	breq	.+6      	; 0x4a9e <malloc+0x56>
    4a98:	42 17       	cp	r20, r18
    4a9a:	53 07       	cpc	r21, r19
    4a9c:	18 f4       	brcc	.+6      	; 0x4aa4 <malloc+0x5c>
    4a9e:	9a 01       	movw	r18, r20
    4aa0:	be 01       	movw	r22, r28
    4aa2:	df 01       	movw	r26, r30
    4aa4:	ef 01       	movw	r28, r30
    4aa6:	02 80       	ldd	r0, Z+2	; 0x02
    4aa8:	f3 81       	ldd	r31, Z+3	; 0x03
    4aaa:	e0 2d       	mov	r30, r0
    4aac:	dc cf       	rjmp	.-72     	; 0x4a66 <malloc+0x1e>
    4aae:	21 15       	cp	r18, r1
    4ab0:	31 05       	cpc	r19, r1
    4ab2:	09 f1       	breq	.+66     	; 0x4af6 <malloc+0xae>
    4ab4:	28 1b       	sub	r18, r24
    4ab6:	39 0b       	sbc	r19, r25
    4ab8:	24 30       	cpi	r18, 0x04	; 4
    4aba:	31 05       	cpc	r19, r1
    4abc:	90 f4       	brcc	.+36     	; 0x4ae2 <malloc+0x9a>
    4abe:	12 96       	adiw	r26, 0x02	; 2
    4ac0:	8d 91       	ld	r24, X+
    4ac2:	9c 91       	ld	r25, X
    4ac4:	13 97       	sbiw	r26, 0x03	; 3
    4ac6:	61 15       	cp	r22, r1
    4ac8:	71 05       	cpc	r23, r1
    4aca:	21 f0       	breq	.+8      	; 0x4ad4 <malloc+0x8c>
    4acc:	fb 01       	movw	r30, r22
    4ace:	93 83       	std	Z+3, r25	; 0x03
    4ad0:	82 83       	std	Z+2, r24	; 0x02
    4ad2:	04 c0       	rjmp	.+8      	; 0x4adc <malloc+0x94>
    4ad4:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <__flp+0x1>
    4ad8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__flp>
    4adc:	fd 01       	movw	r30, r26
    4ade:	32 96       	adiw	r30, 0x02	; 2
    4ae0:	44 c0       	rjmp	.+136    	; 0x4b6a <malloc+0x122>
    4ae2:	fd 01       	movw	r30, r26
    4ae4:	e2 0f       	add	r30, r18
    4ae6:	f3 1f       	adc	r31, r19
    4ae8:	81 93       	st	Z+, r24
    4aea:	91 93       	st	Z+, r25
    4aec:	22 50       	subi	r18, 0x02	; 2
    4aee:	31 09       	sbc	r19, r1
    4af0:	2d 93       	st	X+, r18
    4af2:	3c 93       	st	X, r19
    4af4:	3a c0       	rjmp	.+116    	; 0x4b6a <malloc+0x122>
    4af6:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    4afa:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    4afe:	23 2b       	or	r18, r19
    4b00:	41 f4       	brne	.+16     	; 0x4b12 <malloc+0xca>
    4b02:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4b06:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b0a:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <__brkval+0x1>
    4b0e:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <__brkval>
    4b12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4b16:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4b1a:	21 15       	cp	r18, r1
    4b1c:	31 05       	cpc	r19, r1
    4b1e:	41 f4       	brne	.+16     	; 0x4b30 <malloc+0xe8>
    4b20:	2d b7       	in	r18, 0x3d	; 61
    4b22:	3e b7       	in	r19, 0x3e	; 62
    4b24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4b28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4b2c:	24 1b       	sub	r18, r20
    4b2e:	35 0b       	sbc	r19, r21
    4b30:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <__brkval>
    4b34:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <__brkval+0x1>
    4b38:	e2 17       	cp	r30, r18
    4b3a:	f3 07       	cpc	r31, r19
    4b3c:	a0 f4       	brcc	.+40     	; 0x4b66 <malloc+0x11e>
    4b3e:	2e 1b       	sub	r18, r30
    4b40:	3f 0b       	sbc	r19, r31
    4b42:	28 17       	cp	r18, r24
    4b44:	39 07       	cpc	r19, r25
    4b46:	78 f0       	brcs	.+30     	; 0x4b66 <malloc+0x11e>
    4b48:	ac 01       	movw	r20, r24
    4b4a:	4e 5f       	subi	r20, 0xFE	; 254
    4b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b4e:	24 17       	cp	r18, r20
    4b50:	35 07       	cpc	r19, r21
    4b52:	48 f0       	brcs	.+18     	; 0x4b66 <malloc+0x11e>
    4b54:	4e 0f       	add	r20, r30
    4b56:	5f 1f       	adc	r21, r31
    4b58:	50 93 59 03 	sts	0x0359, r21	; 0x800359 <__brkval+0x1>
    4b5c:	40 93 58 03 	sts	0x0358, r20	; 0x800358 <__brkval>
    4b60:	81 93       	st	Z+, r24
    4b62:	91 93       	st	Z+, r25
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <malloc+0x122>
    4b66:	e0 e0       	ldi	r30, 0x00	; 0
    4b68:	f0 e0       	ldi	r31, 0x00	; 0
    4b6a:	cf 01       	movw	r24, r30
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	08 95       	ret

00004b72 <free>:
    4b72:	0f 93       	push	r16
    4b74:	1f 93       	push	r17
    4b76:	cf 93       	push	r28
    4b78:	df 93       	push	r29
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	09 f4       	brne	.+2      	; 0x4b80 <free+0xe>
    4b7e:	8c c0       	rjmp	.+280    	; 0x4c98 <free+0x126>
    4b80:	fc 01       	movw	r30, r24
    4b82:	32 97       	sbiw	r30, 0x02	; 2
    4b84:	13 82       	std	Z+3, r1	; 0x03
    4b86:	12 82       	std	Z+2, r1	; 0x02
    4b88:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <__flp>
    4b8c:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <__flp+0x1>
    4b90:	01 15       	cp	r16, r1
    4b92:	11 05       	cpc	r17, r1
    4b94:	81 f4       	brne	.+32     	; 0x4bb6 <free+0x44>
    4b96:	20 81       	ld	r18, Z
    4b98:	31 81       	ldd	r19, Z+1	; 0x01
    4b9a:	82 0f       	add	r24, r18
    4b9c:	93 1f       	adc	r25, r19
    4b9e:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    4ba2:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    4ba6:	28 17       	cp	r18, r24
    4ba8:	39 07       	cpc	r19, r25
    4baa:	79 f5       	brne	.+94     	; 0x4c0a <free+0x98>
    4bac:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__brkval+0x1>
    4bb0:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__brkval>
    4bb4:	71 c0       	rjmp	.+226    	; 0x4c98 <free+0x126>
    4bb6:	d8 01       	movw	r26, r16
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	ae 17       	cp	r26, r30
    4bbe:	bf 07       	cpc	r27, r31
    4bc0:	50 f4       	brcc	.+20     	; 0x4bd6 <free+0x64>
    4bc2:	12 96       	adiw	r26, 0x02	; 2
    4bc4:	2d 91       	ld	r18, X+
    4bc6:	3c 91       	ld	r19, X
    4bc8:	13 97       	sbiw	r26, 0x03	; 3
    4bca:	ad 01       	movw	r20, r26
    4bcc:	21 15       	cp	r18, r1
    4bce:	31 05       	cpc	r19, r1
    4bd0:	09 f1       	breq	.+66     	; 0x4c14 <free+0xa2>
    4bd2:	d9 01       	movw	r26, r18
    4bd4:	f3 cf       	rjmp	.-26     	; 0x4bbc <free+0x4a>
    4bd6:	9d 01       	movw	r18, r26
    4bd8:	da 01       	movw	r26, r20
    4bda:	33 83       	std	Z+3, r19	; 0x03
    4bdc:	22 83       	std	Z+2, r18	; 0x02
    4bde:	60 81       	ld	r22, Z
    4be0:	71 81       	ldd	r23, Z+1	; 0x01
    4be2:	86 0f       	add	r24, r22
    4be4:	97 1f       	adc	r25, r23
    4be6:	82 17       	cp	r24, r18
    4be8:	93 07       	cpc	r25, r19
    4bea:	69 f4       	brne	.+26     	; 0x4c06 <free+0x94>
    4bec:	ec 01       	movw	r28, r24
    4bee:	28 81       	ld	r18, Y
    4bf0:	39 81       	ldd	r19, Y+1	; 0x01
    4bf2:	26 0f       	add	r18, r22
    4bf4:	37 1f       	adc	r19, r23
    4bf6:	2e 5f       	subi	r18, 0xFE	; 254
    4bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfa:	31 83       	std	Z+1, r19	; 0x01
    4bfc:	20 83       	st	Z, r18
    4bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4c00:	9b 81       	ldd	r25, Y+3	; 0x03
    4c02:	93 83       	std	Z+3, r25	; 0x03
    4c04:	82 83       	std	Z+2, r24	; 0x02
    4c06:	45 2b       	or	r20, r21
    4c08:	29 f4       	brne	.+10     	; 0x4c14 <free+0xa2>
    4c0a:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <__flp+0x1>
    4c0e:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <__flp>
    4c12:	42 c0       	rjmp	.+132    	; 0x4c98 <free+0x126>
    4c14:	13 96       	adiw	r26, 0x03	; 3
    4c16:	fc 93       	st	X, r31
    4c18:	ee 93       	st	-X, r30
    4c1a:	12 97       	sbiw	r26, 0x02	; 2
    4c1c:	ed 01       	movw	r28, r26
    4c1e:	49 91       	ld	r20, Y+
    4c20:	59 91       	ld	r21, Y+
    4c22:	9e 01       	movw	r18, r28
    4c24:	24 0f       	add	r18, r20
    4c26:	35 1f       	adc	r19, r21
    4c28:	e2 17       	cp	r30, r18
    4c2a:	f3 07       	cpc	r31, r19
    4c2c:	71 f4       	brne	.+28     	; 0x4c4a <free+0xd8>
    4c2e:	80 81       	ld	r24, Z
    4c30:	91 81       	ldd	r25, Z+1	; 0x01
    4c32:	84 0f       	add	r24, r20
    4c34:	95 1f       	adc	r25, r21
    4c36:	02 96       	adiw	r24, 0x02	; 2
    4c38:	11 96       	adiw	r26, 0x01	; 1
    4c3a:	9c 93       	st	X, r25
    4c3c:	8e 93       	st	-X, r24
    4c3e:	82 81       	ldd	r24, Z+2	; 0x02
    4c40:	93 81       	ldd	r25, Z+3	; 0x03
    4c42:	13 96       	adiw	r26, 0x03	; 3
    4c44:	9c 93       	st	X, r25
    4c46:	8e 93       	st	-X, r24
    4c48:	12 97       	sbiw	r26, 0x02	; 2
    4c4a:	e0 e0       	ldi	r30, 0x00	; 0
    4c4c:	f0 e0       	ldi	r31, 0x00	; 0
    4c4e:	d8 01       	movw	r26, r16
    4c50:	12 96       	adiw	r26, 0x02	; 2
    4c52:	8d 91       	ld	r24, X+
    4c54:	9c 91       	ld	r25, X
    4c56:	13 97       	sbiw	r26, 0x03	; 3
    4c58:	00 97       	sbiw	r24, 0x00	; 0
    4c5a:	19 f0       	breq	.+6      	; 0x4c62 <free+0xf0>
    4c5c:	f8 01       	movw	r30, r16
    4c5e:	8c 01       	movw	r16, r24
    4c60:	f6 cf       	rjmp	.-20     	; 0x4c4e <free+0xdc>
    4c62:	8d 91       	ld	r24, X+
    4c64:	9c 91       	ld	r25, X
    4c66:	98 01       	movw	r18, r16
    4c68:	2e 5f       	subi	r18, 0xFE	; 254
    4c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6c:	82 0f       	add	r24, r18
    4c6e:	93 1f       	adc	r25, r19
    4c70:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__brkval>
    4c74:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__brkval+0x1>
    4c78:	28 17       	cp	r18, r24
    4c7a:	39 07       	cpc	r19, r25
    4c7c:	69 f4       	brne	.+26     	; 0x4c98 <free+0x126>
    4c7e:	30 97       	sbiw	r30, 0x00	; 0
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <free+0x11a>
    4c82:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <__flp+0x1>
    4c86:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__flp>
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <free+0x11e>
    4c8c:	13 82       	std	Z+3, r1	; 0x03
    4c8e:	12 82       	std	Z+2, r1	; 0x02
    4c90:	10 93 59 03 	sts	0x0359, r17	; 0x800359 <__brkval+0x1>
    4c94:	00 93 58 03 	sts	0x0358, r16	; 0x800358 <__brkval>
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	08 95       	ret

00004ca2 <strlen>:
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	01 90       	ld	r0, Z+
    4ca6:	00 20       	and	r0, r0
    4ca8:	e9 f7       	brne	.-6      	; 0x4ca4 <strlen+0x2>
    4caa:	80 95       	com	r24
    4cac:	90 95       	com	r25
    4cae:	8e 0f       	add	r24, r30
    4cb0:	9f 1f       	adc	r25, r31
    4cb2:	08 95       	ret

00004cb4 <fprintf>:
    4cb4:	a0 e0       	ldi	r26, 0x00	; 0
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	ef e5       	ldi	r30, 0x5F	; 95
    4cba:	f6 e2       	ldi	r31, 0x26	; 38
    4cbc:	d9 c2       	rjmp	.+1458   	; 0x5270 <__prologue_saves__+0x20>
    4cbe:	ae 01       	movw	r20, r28
    4cc0:	47 5f       	subi	r20, 0xF7	; 247
    4cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    4cc6:	78 85       	ldd	r23, Y+8	; 0x08
    4cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ccc:	52 d0       	rcall	.+164    	; 0x4d72 <vfprintf>
    4cce:	e2 e0       	ldi	r30, 0x02	; 2
    4cd0:	eb c2       	rjmp	.+1494   	; 0x52a8 <__epilogue_restores__+0x20>

00004cd2 <puts>:
    4cd2:	0f 93       	push	r16
    4cd4:	1f 93       	push	r17
    4cd6:	cf 93       	push	r28
    4cd8:	df 93       	push	r29
    4cda:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <__iob+0x2>
    4cde:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <__iob+0x3>
    4ce2:	23 81       	ldd	r18, Z+3	; 0x03
    4ce4:	21 ff       	sbrs	r18, 1
    4ce6:	1b c0       	rjmp	.+54     	; 0x4d1e <puts+0x4c>
    4ce8:	8c 01       	movw	r16, r24
    4cea:	d0 e0       	ldi	r29, 0x00	; 0
    4cec:	c0 e0       	ldi	r28, 0x00	; 0
    4cee:	f8 01       	movw	r30, r16
    4cf0:	81 91       	ld	r24, Z+
    4cf2:	8f 01       	movw	r16, r30
    4cf4:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <__iob+0x2>
    4cf8:	70 91 5f 03 	lds	r23, 0x035F	; 0x80035f <__iob+0x3>
    4cfc:	db 01       	movw	r26, r22
    4cfe:	18 96       	adiw	r26, 0x08	; 8
    4d00:	ed 91       	ld	r30, X+
    4d02:	fc 91       	ld	r31, X
    4d04:	19 97       	sbiw	r26, 0x09	; 9
    4d06:	88 23       	and	r24, r24
    4d08:	31 f0       	breq	.+12     	; 0x4d16 <puts+0x44>
    4d0a:	09 95       	icall
    4d0c:	89 2b       	or	r24, r25
    4d0e:	79 f3       	breq	.-34     	; 0x4cee <puts+0x1c>
    4d10:	df ef       	ldi	r29, 0xFF	; 255
    4d12:	cf ef       	ldi	r28, 0xFF	; 255
    4d14:	ec cf       	rjmp	.-40     	; 0x4cee <puts+0x1c>
    4d16:	8a e0       	ldi	r24, 0x0A	; 10
    4d18:	09 95       	icall
    4d1a:	89 2b       	or	r24, r25
    4d1c:	19 f0       	breq	.+6      	; 0x4d24 <puts+0x52>
    4d1e:	8f ef       	ldi	r24, 0xFF	; 255
    4d20:	9f ef       	ldi	r25, 0xFF	; 255
    4d22:	02 c0       	rjmp	.+4      	; 0x4d28 <puts+0x56>
    4d24:	8d 2f       	mov	r24, r29
    4d26:	9c 2f       	mov	r25, r28
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	08 95       	ret

00004d32 <sprintf>:
    4d32:	ae e0       	ldi	r26, 0x0E	; 14
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	ee e9       	ldi	r30, 0x9E	; 158
    4d38:	f6 e2       	ldi	r31, 0x26	; 38
    4d3a:	98 c2       	rjmp	.+1328   	; 0x526c <__prologue_saves__+0x1c>
    4d3c:	0d 89       	ldd	r16, Y+21	; 0x15
    4d3e:	1e 89       	ldd	r17, Y+22	; 0x16
    4d40:	86 e0       	ldi	r24, 0x06	; 6
    4d42:	8c 83       	std	Y+4, r24	; 0x04
    4d44:	1a 83       	std	Y+2, r17	; 0x02
    4d46:	09 83       	std	Y+1, r16	; 0x01
    4d48:	8f ef       	ldi	r24, 0xFF	; 255
    4d4a:	9f e7       	ldi	r25, 0x7F	; 127
    4d4c:	9e 83       	std	Y+6, r25	; 0x06
    4d4e:	8d 83       	std	Y+5, r24	; 0x05
    4d50:	ae 01       	movw	r20, r28
    4d52:	47 5e       	subi	r20, 0xE7	; 231
    4d54:	5f 4f       	sbci	r21, 0xFF	; 255
    4d56:	6f 89       	ldd	r22, Y+23	; 0x17
    4d58:	78 8d       	ldd	r23, Y+24	; 0x18
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	01 96       	adiw	r24, 0x01	; 1
    4d5e:	09 d0       	rcall	.+18     	; 0x4d72 <vfprintf>
    4d60:	2f 81       	ldd	r18, Y+7	; 0x07
    4d62:	38 85       	ldd	r19, Y+8	; 0x08
    4d64:	f8 01       	movw	r30, r16
    4d66:	e2 0f       	add	r30, r18
    4d68:	f3 1f       	adc	r31, r19
    4d6a:	10 82       	st	Z, r1
    4d6c:	2e 96       	adiw	r28, 0x0e	; 14
    4d6e:	e4 e0       	ldi	r30, 0x04	; 4
    4d70:	99 c2       	rjmp	.+1330   	; 0x52a4 <__epilogue_restores__+0x1c>

00004d72 <vfprintf>:
    4d72:	ac e0       	ldi	r26, 0x0C	; 12
    4d74:	b0 e0       	ldi	r27, 0x00	; 0
    4d76:	ee eb       	ldi	r30, 0xBE	; 190
    4d78:	f6 e2       	ldi	r31, 0x26	; 38
    4d7a:	6a c2       	rjmp	.+1236   	; 0x5250 <__prologue_saves__>
    4d7c:	7c 01       	movw	r14, r24
    4d7e:	6b 01       	movw	r12, r22
    4d80:	8a 01       	movw	r16, r20
    4d82:	fc 01       	movw	r30, r24
    4d84:	17 82       	std	Z+7, r1	; 0x07
    4d86:	16 82       	std	Z+6, r1	; 0x06
    4d88:	83 81       	ldd	r24, Z+3	; 0x03
    4d8a:	81 ff       	sbrs	r24, 1
    4d8c:	b0 c1       	rjmp	.+864    	; 0x50ee <vfprintf+0x37c>
    4d8e:	ce 01       	movw	r24, r28
    4d90:	01 96       	adiw	r24, 0x01	; 1
    4d92:	4c 01       	movw	r8, r24
    4d94:	f7 01       	movw	r30, r14
    4d96:	93 81       	ldd	r25, Z+3	; 0x03
    4d98:	f6 01       	movw	r30, r12
    4d9a:	93 fd       	sbrc	r25, 3
    4d9c:	85 91       	lpm	r24, Z+
    4d9e:	93 ff       	sbrs	r25, 3
    4da0:	81 91       	ld	r24, Z+
    4da2:	6f 01       	movw	r12, r30
    4da4:	88 23       	and	r24, r24
    4da6:	09 f4       	brne	.+2      	; 0x4daa <vfprintf+0x38>
    4da8:	9e c1       	rjmp	.+828    	; 0x50e6 <vfprintf+0x374>
    4daa:	85 32       	cpi	r24, 0x25	; 37
    4dac:	39 f4       	brne	.+14     	; 0x4dbc <vfprintf+0x4a>
    4dae:	93 fd       	sbrc	r25, 3
    4db0:	85 91       	lpm	r24, Z+
    4db2:	93 ff       	sbrs	r25, 3
    4db4:	81 91       	ld	r24, Z+
    4db6:	6f 01       	movw	r12, r30
    4db8:	85 32       	cpi	r24, 0x25	; 37
    4dba:	21 f4       	brne	.+8      	; 0x4dc4 <vfprintf+0x52>
    4dbc:	b7 01       	movw	r22, r14
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	b1 d1       	rcall	.+866    	; 0x5124 <fputc>
    4dc2:	e8 cf       	rjmp	.-48     	; 0x4d94 <vfprintf+0x22>
    4dc4:	51 2c       	mov	r5, r1
    4dc6:	31 2c       	mov	r3, r1
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	20 32       	cpi	r18, 0x20	; 32
    4dcc:	a0 f4       	brcc	.+40     	; 0x4df6 <vfprintf+0x84>
    4dce:	8b 32       	cpi	r24, 0x2B	; 43
    4dd0:	69 f0       	breq	.+26     	; 0x4dec <vfprintf+0x7a>
    4dd2:	30 f4       	brcc	.+12     	; 0x4de0 <vfprintf+0x6e>
    4dd4:	80 32       	cpi	r24, 0x20	; 32
    4dd6:	59 f0       	breq	.+22     	; 0x4dee <vfprintf+0x7c>
    4dd8:	83 32       	cpi	r24, 0x23	; 35
    4dda:	69 f4       	brne	.+26     	; 0x4df6 <vfprintf+0x84>
    4ddc:	20 61       	ori	r18, 0x10	; 16
    4dde:	2c c0       	rjmp	.+88     	; 0x4e38 <vfprintf+0xc6>
    4de0:	8d 32       	cpi	r24, 0x2D	; 45
    4de2:	39 f0       	breq	.+14     	; 0x4df2 <vfprintf+0x80>
    4de4:	80 33       	cpi	r24, 0x30	; 48
    4de6:	39 f4       	brne	.+14     	; 0x4df6 <vfprintf+0x84>
    4de8:	21 60       	ori	r18, 0x01	; 1
    4dea:	26 c0       	rjmp	.+76     	; 0x4e38 <vfprintf+0xc6>
    4dec:	22 60       	ori	r18, 0x02	; 2
    4dee:	24 60       	ori	r18, 0x04	; 4
    4df0:	23 c0       	rjmp	.+70     	; 0x4e38 <vfprintf+0xc6>
    4df2:	28 60       	ori	r18, 0x08	; 8
    4df4:	21 c0       	rjmp	.+66     	; 0x4e38 <vfprintf+0xc6>
    4df6:	27 fd       	sbrc	r18, 7
    4df8:	27 c0       	rjmp	.+78     	; 0x4e48 <vfprintf+0xd6>
    4dfa:	30 ed       	ldi	r19, 0xD0	; 208
    4dfc:	38 0f       	add	r19, r24
    4dfe:	3a 30       	cpi	r19, 0x0A	; 10
    4e00:	78 f4       	brcc	.+30     	; 0x4e20 <vfprintf+0xae>
    4e02:	26 ff       	sbrs	r18, 6
    4e04:	06 c0       	rjmp	.+12     	; 0x4e12 <vfprintf+0xa0>
    4e06:	fa e0       	ldi	r31, 0x0A	; 10
    4e08:	5f 9e       	mul	r5, r31
    4e0a:	30 0d       	add	r19, r0
    4e0c:	11 24       	eor	r1, r1
    4e0e:	53 2e       	mov	r5, r19
    4e10:	13 c0       	rjmp	.+38     	; 0x4e38 <vfprintf+0xc6>
    4e12:	8a e0       	ldi	r24, 0x0A	; 10
    4e14:	38 9e       	mul	r3, r24
    4e16:	30 0d       	add	r19, r0
    4e18:	11 24       	eor	r1, r1
    4e1a:	33 2e       	mov	r3, r19
    4e1c:	20 62       	ori	r18, 0x20	; 32
    4e1e:	0c c0       	rjmp	.+24     	; 0x4e38 <vfprintf+0xc6>
    4e20:	8e 32       	cpi	r24, 0x2E	; 46
    4e22:	21 f4       	brne	.+8      	; 0x4e2c <vfprintf+0xba>
    4e24:	26 fd       	sbrc	r18, 6
    4e26:	5f c1       	rjmp	.+702    	; 0x50e6 <vfprintf+0x374>
    4e28:	20 64       	ori	r18, 0x40	; 64
    4e2a:	06 c0       	rjmp	.+12     	; 0x4e38 <vfprintf+0xc6>
    4e2c:	8c 36       	cpi	r24, 0x6C	; 108
    4e2e:	11 f4       	brne	.+4      	; 0x4e34 <vfprintf+0xc2>
    4e30:	20 68       	ori	r18, 0x80	; 128
    4e32:	02 c0       	rjmp	.+4      	; 0x4e38 <vfprintf+0xc6>
    4e34:	88 36       	cpi	r24, 0x68	; 104
    4e36:	41 f4       	brne	.+16     	; 0x4e48 <vfprintf+0xd6>
    4e38:	f6 01       	movw	r30, r12
    4e3a:	93 fd       	sbrc	r25, 3
    4e3c:	85 91       	lpm	r24, Z+
    4e3e:	93 ff       	sbrs	r25, 3
    4e40:	81 91       	ld	r24, Z+
    4e42:	6f 01       	movw	r12, r30
    4e44:	81 11       	cpse	r24, r1
    4e46:	c1 cf       	rjmp	.-126    	; 0x4dca <vfprintf+0x58>
    4e48:	98 2f       	mov	r25, r24
    4e4a:	9f 7d       	andi	r25, 0xDF	; 223
    4e4c:	95 54       	subi	r25, 0x45	; 69
    4e4e:	93 30       	cpi	r25, 0x03	; 3
    4e50:	28 f4       	brcc	.+10     	; 0x4e5c <vfprintf+0xea>
    4e52:	0c 5f       	subi	r16, 0xFC	; 252
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	ff e3       	ldi	r31, 0x3F	; 63
    4e58:	f9 83       	std	Y+1, r31	; 0x01
    4e5a:	0d c0       	rjmp	.+26     	; 0x4e76 <vfprintf+0x104>
    4e5c:	83 36       	cpi	r24, 0x63	; 99
    4e5e:	31 f0       	breq	.+12     	; 0x4e6c <vfprintf+0xfa>
    4e60:	83 37       	cpi	r24, 0x73	; 115
    4e62:	71 f0       	breq	.+28     	; 0x4e80 <vfprintf+0x10e>
    4e64:	83 35       	cpi	r24, 0x53	; 83
    4e66:	09 f0       	breq	.+2      	; 0x4e6a <vfprintf+0xf8>
    4e68:	57 c0       	rjmp	.+174    	; 0x4f18 <vfprintf+0x1a6>
    4e6a:	21 c0       	rjmp	.+66     	; 0x4eae <vfprintf+0x13c>
    4e6c:	f8 01       	movw	r30, r16
    4e6e:	80 81       	ld	r24, Z
    4e70:	89 83       	std	Y+1, r24	; 0x01
    4e72:	0e 5f       	subi	r16, 0xFE	; 254
    4e74:	1f 4f       	sbci	r17, 0xFF	; 255
    4e76:	44 24       	eor	r4, r4
    4e78:	43 94       	inc	r4
    4e7a:	51 2c       	mov	r5, r1
    4e7c:	54 01       	movw	r10, r8
    4e7e:	14 c0       	rjmp	.+40     	; 0x4ea8 <vfprintf+0x136>
    4e80:	38 01       	movw	r6, r16
    4e82:	f2 e0       	ldi	r31, 0x02	; 2
    4e84:	6f 0e       	add	r6, r31
    4e86:	71 1c       	adc	r7, r1
    4e88:	f8 01       	movw	r30, r16
    4e8a:	a0 80       	ld	r10, Z
    4e8c:	b1 80       	ldd	r11, Z+1	; 0x01
    4e8e:	26 ff       	sbrs	r18, 6
    4e90:	03 c0       	rjmp	.+6      	; 0x4e98 <vfprintf+0x126>
    4e92:	65 2d       	mov	r22, r5
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <vfprintf+0x12a>
    4e98:	6f ef       	ldi	r22, 0xFF	; 255
    4e9a:	7f ef       	ldi	r23, 0xFF	; 255
    4e9c:	c5 01       	movw	r24, r10
    4e9e:	2c 87       	std	Y+12, r18	; 0x0c
    4ea0:	36 d1       	rcall	.+620    	; 0x510e <strnlen>
    4ea2:	2c 01       	movw	r4, r24
    4ea4:	83 01       	movw	r16, r6
    4ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ea8:	2f 77       	andi	r18, 0x7F	; 127
    4eaa:	22 2e       	mov	r2, r18
    4eac:	16 c0       	rjmp	.+44     	; 0x4eda <vfprintf+0x168>
    4eae:	38 01       	movw	r6, r16
    4eb0:	f2 e0       	ldi	r31, 0x02	; 2
    4eb2:	6f 0e       	add	r6, r31
    4eb4:	71 1c       	adc	r7, r1
    4eb6:	f8 01       	movw	r30, r16
    4eb8:	a0 80       	ld	r10, Z
    4eba:	b1 80       	ldd	r11, Z+1	; 0x01
    4ebc:	26 ff       	sbrs	r18, 6
    4ebe:	03 c0       	rjmp	.+6      	; 0x4ec6 <vfprintf+0x154>
    4ec0:	65 2d       	mov	r22, r5
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
    4ec4:	02 c0       	rjmp	.+4      	; 0x4eca <vfprintf+0x158>
    4ec6:	6f ef       	ldi	r22, 0xFF	; 255
    4ec8:	7f ef       	ldi	r23, 0xFF	; 255
    4eca:	c5 01       	movw	r24, r10
    4ecc:	2c 87       	std	Y+12, r18	; 0x0c
    4ece:	14 d1       	rcall	.+552    	; 0x50f8 <strnlen_P>
    4ed0:	2c 01       	movw	r4, r24
    4ed2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ed4:	20 68       	ori	r18, 0x80	; 128
    4ed6:	22 2e       	mov	r2, r18
    4ed8:	83 01       	movw	r16, r6
    4eda:	23 fc       	sbrc	r2, 3
    4edc:	19 c0       	rjmp	.+50     	; 0x4f10 <vfprintf+0x19e>
    4ede:	83 2d       	mov	r24, r3
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	48 16       	cp	r4, r24
    4ee4:	59 06       	cpc	r5, r25
    4ee6:	a0 f4       	brcc	.+40     	; 0x4f10 <vfprintf+0x19e>
    4ee8:	b7 01       	movw	r22, r14
    4eea:	80 e2       	ldi	r24, 0x20	; 32
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	1a d1       	rcall	.+564    	; 0x5124 <fputc>
    4ef0:	3a 94       	dec	r3
    4ef2:	f5 cf       	rjmp	.-22     	; 0x4ede <vfprintf+0x16c>
    4ef4:	f5 01       	movw	r30, r10
    4ef6:	27 fc       	sbrc	r2, 7
    4ef8:	85 91       	lpm	r24, Z+
    4efa:	27 fe       	sbrs	r2, 7
    4efc:	81 91       	ld	r24, Z+
    4efe:	5f 01       	movw	r10, r30
    4f00:	b7 01       	movw	r22, r14
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	0f d1       	rcall	.+542    	; 0x5124 <fputc>
    4f06:	31 10       	cpse	r3, r1
    4f08:	3a 94       	dec	r3
    4f0a:	f1 e0       	ldi	r31, 0x01	; 1
    4f0c:	4f 1a       	sub	r4, r31
    4f0e:	51 08       	sbc	r5, r1
    4f10:	41 14       	cp	r4, r1
    4f12:	51 04       	cpc	r5, r1
    4f14:	79 f7       	brne	.-34     	; 0x4ef4 <vfprintf+0x182>
    4f16:	de c0       	rjmp	.+444    	; 0x50d4 <vfprintf+0x362>
    4f18:	84 36       	cpi	r24, 0x64	; 100
    4f1a:	11 f0       	breq	.+4      	; 0x4f20 <vfprintf+0x1ae>
    4f1c:	89 36       	cpi	r24, 0x69	; 105
    4f1e:	31 f5       	brne	.+76     	; 0x4f6c <vfprintf+0x1fa>
    4f20:	f8 01       	movw	r30, r16
    4f22:	27 ff       	sbrs	r18, 7
    4f24:	07 c0       	rjmp	.+14     	; 0x4f34 <vfprintf+0x1c2>
    4f26:	60 81       	ld	r22, Z
    4f28:	71 81       	ldd	r23, Z+1	; 0x01
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	0c 5f       	subi	r16, 0xFC	; 252
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	08 c0       	rjmp	.+16     	; 0x4f44 <vfprintf+0x1d2>
    4f34:	60 81       	ld	r22, Z
    4f36:	71 81       	ldd	r23, Z+1	; 0x01
    4f38:	07 2e       	mov	r0, r23
    4f3a:	00 0c       	add	r0, r0
    4f3c:	88 0b       	sbc	r24, r24
    4f3e:	99 0b       	sbc	r25, r25
    4f40:	0e 5f       	subi	r16, 0xFE	; 254
    4f42:	1f 4f       	sbci	r17, 0xFF	; 255
    4f44:	2f 76       	andi	r18, 0x6F	; 111
    4f46:	72 2e       	mov	r7, r18
    4f48:	97 ff       	sbrs	r25, 7
    4f4a:	09 c0       	rjmp	.+18     	; 0x4f5e <vfprintf+0x1ec>
    4f4c:	90 95       	com	r25
    4f4e:	80 95       	com	r24
    4f50:	70 95       	com	r23
    4f52:	61 95       	neg	r22
    4f54:	7f 4f       	sbci	r23, 0xFF	; 255
    4f56:	8f 4f       	sbci	r24, 0xFF	; 255
    4f58:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5a:	20 68       	ori	r18, 0x80	; 128
    4f5c:	72 2e       	mov	r7, r18
    4f5e:	2a e0       	ldi	r18, 0x0A	; 10
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	a4 01       	movw	r20, r8
    4f64:	17 d1       	rcall	.+558    	; 0x5194 <__ultoa_invert>
    4f66:	a8 2e       	mov	r10, r24
    4f68:	a8 18       	sub	r10, r8
    4f6a:	43 c0       	rjmp	.+134    	; 0x4ff2 <vfprintf+0x280>
    4f6c:	85 37       	cpi	r24, 0x75	; 117
    4f6e:	29 f4       	brne	.+10     	; 0x4f7a <vfprintf+0x208>
    4f70:	2f 7e       	andi	r18, 0xEF	; 239
    4f72:	b2 2e       	mov	r11, r18
    4f74:	2a e0       	ldi	r18, 0x0A	; 10
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	25 c0       	rjmp	.+74     	; 0x4fc4 <vfprintf+0x252>
    4f7a:	f2 2f       	mov	r31, r18
    4f7c:	f9 7f       	andi	r31, 0xF9	; 249
    4f7e:	bf 2e       	mov	r11, r31
    4f80:	8f 36       	cpi	r24, 0x6F	; 111
    4f82:	c1 f0       	breq	.+48     	; 0x4fb4 <vfprintf+0x242>
    4f84:	18 f4       	brcc	.+6      	; 0x4f8c <vfprintf+0x21a>
    4f86:	88 35       	cpi	r24, 0x58	; 88
    4f88:	79 f0       	breq	.+30     	; 0x4fa8 <vfprintf+0x236>
    4f8a:	ad c0       	rjmp	.+346    	; 0x50e6 <vfprintf+0x374>
    4f8c:	80 37       	cpi	r24, 0x70	; 112
    4f8e:	19 f0       	breq	.+6      	; 0x4f96 <vfprintf+0x224>
    4f90:	88 37       	cpi	r24, 0x78	; 120
    4f92:	21 f0       	breq	.+8      	; 0x4f9c <vfprintf+0x22a>
    4f94:	a8 c0       	rjmp	.+336    	; 0x50e6 <vfprintf+0x374>
    4f96:	2f 2f       	mov	r18, r31
    4f98:	20 61       	ori	r18, 0x10	; 16
    4f9a:	b2 2e       	mov	r11, r18
    4f9c:	b4 fe       	sbrs	r11, 4
    4f9e:	0d c0       	rjmp	.+26     	; 0x4fba <vfprintf+0x248>
    4fa0:	8b 2d       	mov	r24, r11
    4fa2:	84 60       	ori	r24, 0x04	; 4
    4fa4:	b8 2e       	mov	r11, r24
    4fa6:	09 c0       	rjmp	.+18     	; 0x4fba <vfprintf+0x248>
    4fa8:	24 ff       	sbrs	r18, 4
    4faa:	0a c0       	rjmp	.+20     	; 0x4fc0 <vfprintf+0x24e>
    4fac:	9f 2f       	mov	r25, r31
    4fae:	96 60       	ori	r25, 0x06	; 6
    4fb0:	b9 2e       	mov	r11, r25
    4fb2:	06 c0       	rjmp	.+12     	; 0x4fc0 <vfprintf+0x24e>
    4fb4:	28 e0       	ldi	r18, 0x08	; 8
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	05 c0       	rjmp	.+10     	; 0x4fc4 <vfprintf+0x252>
    4fba:	20 e1       	ldi	r18, 0x10	; 16
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <vfprintf+0x252>
    4fc0:	20 e1       	ldi	r18, 0x10	; 16
    4fc2:	32 e0       	ldi	r19, 0x02	; 2
    4fc4:	f8 01       	movw	r30, r16
    4fc6:	b7 fe       	sbrs	r11, 7
    4fc8:	07 c0       	rjmp	.+14     	; 0x4fd8 <vfprintf+0x266>
    4fca:	60 81       	ld	r22, Z
    4fcc:	71 81       	ldd	r23, Z+1	; 0x01
    4fce:	82 81       	ldd	r24, Z+2	; 0x02
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	0c 5f       	subi	r16, 0xFC	; 252
    4fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd6:	06 c0       	rjmp	.+12     	; 0x4fe4 <vfprintf+0x272>
    4fd8:	60 81       	ld	r22, Z
    4fda:	71 81       	ldd	r23, Z+1	; 0x01
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	0e 5f       	subi	r16, 0xFE	; 254
    4fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe4:	a4 01       	movw	r20, r8
    4fe6:	d6 d0       	rcall	.+428    	; 0x5194 <__ultoa_invert>
    4fe8:	a8 2e       	mov	r10, r24
    4fea:	a8 18       	sub	r10, r8
    4fec:	fb 2d       	mov	r31, r11
    4fee:	ff 77       	andi	r31, 0x7F	; 127
    4ff0:	7f 2e       	mov	r7, r31
    4ff2:	76 fe       	sbrs	r7, 6
    4ff4:	0b c0       	rjmp	.+22     	; 0x500c <vfprintf+0x29a>
    4ff6:	37 2d       	mov	r19, r7
    4ff8:	3e 7f       	andi	r19, 0xFE	; 254
    4ffa:	a5 14       	cp	r10, r5
    4ffc:	50 f4       	brcc	.+20     	; 0x5012 <vfprintf+0x2a0>
    4ffe:	74 fe       	sbrs	r7, 4
    5000:	0a c0       	rjmp	.+20     	; 0x5016 <vfprintf+0x2a4>
    5002:	72 fc       	sbrc	r7, 2
    5004:	08 c0       	rjmp	.+16     	; 0x5016 <vfprintf+0x2a4>
    5006:	37 2d       	mov	r19, r7
    5008:	3e 7e       	andi	r19, 0xEE	; 238
    500a:	05 c0       	rjmp	.+10     	; 0x5016 <vfprintf+0x2a4>
    500c:	ba 2c       	mov	r11, r10
    500e:	37 2d       	mov	r19, r7
    5010:	03 c0       	rjmp	.+6      	; 0x5018 <vfprintf+0x2a6>
    5012:	ba 2c       	mov	r11, r10
    5014:	01 c0       	rjmp	.+2      	; 0x5018 <vfprintf+0x2a6>
    5016:	b5 2c       	mov	r11, r5
    5018:	34 ff       	sbrs	r19, 4
    501a:	0d c0       	rjmp	.+26     	; 0x5036 <vfprintf+0x2c4>
    501c:	fe 01       	movw	r30, r28
    501e:	ea 0d       	add	r30, r10
    5020:	f1 1d       	adc	r31, r1
    5022:	80 81       	ld	r24, Z
    5024:	80 33       	cpi	r24, 0x30	; 48
    5026:	11 f4       	brne	.+4      	; 0x502c <vfprintf+0x2ba>
    5028:	39 7e       	andi	r19, 0xE9	; 233
    502a:	09 c0       	rjmp	.+18     	; 0x503e <vfprintf+0x2cc>
    502c:	32 ff       	sbrs	r19, 2
    502e:	06 c0       	rjmp	.+12     	; 0x503c <vfprintf+0x2ca>
    5030:	b3 94       	inc	r11
    5032:	b3 94       	inc	r11
    5034:	04 c0       	rjmp	.+8      	; 0x503e <vfprintf+0x2cc>
    5036:	83 2f       	mov	r24, r19
    5038:	86 78       	andi	r24, 0x86	; 134
    503a:	09 f0       	breq	.+2      	; 0x503e <vfprintf+0x2cc>
    503c:	b3 94       	inc	r11
    503e:	33 fd       	sbrc	r19, 3
    5040:	12 c0       	rjmp	.+36     	; 0x5066 <vfprintf+0x2f4>
    5042:	30 ff       	sbrs	r19, 0
    5044:	06 c0       	rjmp	.+12     	; 0x5052 <vfprintf+0x2e0>
    5046:	5a 2c       	mov	r5, r10
    5048:	b3 14       	cp	r11, r3
    504a:	18 f4       	brcc	.+6      	; 0x5052 <vfprintf+0x2e0>
    504c:	53 0c       	add	r5, r3
    504e:	5b 18       	sub	r5, r11
    5050:	b3 2c       	mov	r11, r3
    5052:	b3 14       	cp	r11, r3
    5054:	60 f4       	brcc	.+24     	; 0x506e <vfprintf+0x2fc>
    5056:	b7 01       	movw	r22, r14
    5058:	80 e2       	ldi	r24, 0x20	; 32
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	3c 87       	std	Y+12, r19	; 0x0c
    505e:	62 d0       	rcall	.+196    	; 0x5124 <fputc>
    5060:	b3 94       	inc	r11
    5062:	3c 85       	ldd	r19, Y+12	; 0x0c
    5064:	f6 cf       	rjmp	.-20     	; 0x5052 <vfprintf+0x2e0>
    5066:	b3 14       	cp	r11, r3
    5068:	10 f4       	brcc	.+4      	; 0x506e <vfprintf+0x2fc>
    506a:	3b 18       	sub	r3, r11
    506c:	01 c0       	rjmp	.+2      	; 0x5070 <vfprintf+0x2fe>
    506e:	31 2c       	mov	r3, r1
    5070:	34 ff       	sbrs	r19, 4
    5072:	11 c0       	rjmp	.+34     	; 0x5096 <vfprintf+0x324>
    5074:	b7 01       	movw	r22, r14
    5076:	80 e3       	ldi	r24, 0x30	; 48
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	3c 87       	std	Y+12, r19	; 0x0c
    507c:	53 d0       	rcall	.+166    	; 0x5124 <fputc>
    507e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5080:	32 ff       	sbrs	r19, 2
    5082:	16 c0       	rjmp	.+44     	; 0x50b0 <vfprintf+0x33e>
    5084:	31 fd       	sbrc	r19, 1
    5086:	03 c0       	rjmp	.+6      	; 0x508e <vfprintf+0x31c>
    5088:	88 e7       	ldi	r24, 0x78	; 120
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <vfprintf+0x320>
    508e:	88 e5       	ldi	r24, 0x58	; 88
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	b7 01       	movw	r22, r14
    5094:	0c c0       	rjmp	.+24     	; 0x50ae <vfprintf+0x33c>
    5096:	83 2f       	mov	r24, r19
    5098:	86 78       	andi	r24, 0x86	; 134
    509a:	51 f0       	breq	.+20     	; 0x50b0 <vfprintf+0x33e>
    509c:	31 ff       	sbrs	r19, 1
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <vfprintf+0x332>
    50a0:	8b e2       	ldi	r24, 0x2B	; 43
    50a2:	01 c0       	rjmp	.+2      	; 0x50a6 <vfprintf+0x334>
    50a4:	80 e2       	ldi	r24, 0x20	; 32
    50a6:	37 fd       	sbrc	r19, 7
    50a8:	8d e2       	ldi	r24, 0x2D	; 45
    50aa:	b7 01       	movw	r22, r14
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	3a d0       	rcall	.+116    	; 0x5124 <fputc>
    50b0:	a5 14       	cp	r10, r5
    50b2:	30 f4       	brcc	.+12     	; 0x50c0 <vfprintf+0x34e>
    50b4:	b7 01       	movw	r22, r14
    50b6:	80 e3       	ldi	r24, 0x30	; 48
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	34 d0       	rcall	.+104    	; 0x5124 <fputc>
    50bc:	5a 94       	dec	r5
    50be:	f8 cf       	rjmp	.-16     	; 0x50b0 <vfprintf+0x33e>
    50c0:	aa 94       	dec	r10
    50c2:	f4 01       	movw	r30, r8
    50c4:	ea 0d       	add	r30, r10
    50c6:	f1 1d       	adc	r31, r1
    50c8:	80 81       	ld	r24, Z
    50ca:	b7 01       	movw	r22, r14
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	2a d0       	rcall	.+84     	; 0x5124 <fputc>
    50d0:	a1 10       	cpse	r10, r1
    50d2:	f6 cf       	rjmp	.-20     	; 0x50c0 <vfprintf+0x34e>
    50d4:	33 20       	and	r3, r3
    50d6:	09 f4       	brne	.+2      	; 0x50da <vfprintf+0x368>
    50d8:	5d ce       	rjmp	.-838    	; 0x4d94 <vfprintf+0x22>
    50da:	b7 01       	movw	r22, r14
    50dc:	80 e2       	ldi	r24, 0x20	; 32
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	21 d0       	rcall	.+66     	; 0x5124 <fputc>
    50e2:	3a 94       	dec	r3
    50e4:	f7 cf       	rjmp	.-18     	; 0x50d4 <vfprintf+0x362>
    50e6:	f7 01       	movw	r30, r14
    50e8:	86 81       	ldd	r24, Z+6	; 0x06
    50ea:	97 81       	ldd	r25, Z+7	; 0x07
    50ec:	02 c0       	rjmp	.+4      	; 0x50f2 <vfprintf+0x380>
    50ee:	8f ef       	ldi	r24, 0xFF	; 255
    50f0:	9f ef       	ldi	r25, 0xFF	; 255
    50f2:	2c 96       	adiw	r28, 0x0c	; 12
    50f4:	e2 e1       	ldi	r30, 0x12	; 18
    50f6:	c8 c0       	rjmp	.+400    	; 0x5288 <__epilogue_restores__>

000050f8 <strnlen_P>:
    50f8:	fc 01       	movw	r30, r24
    50fa:	05 90       	lpm	r0, Z+
    50fc:	61 50       	subi	r22, 0x01	; 1
    50fe:	70 40       	sbci	r23, 0x00	; 0
    5100:	01 10       	cpse	r0, r1
    5102:	d8 f7       	brcc	.-10     	; 0x50fa <strnlen_P+0x2>
    5104:	80 95       	com	r24
    5106:	90 95       	com	r25
    5108:	8e 0f       	add	r24, r30
    510a:	9f 1f       	adc	r25, r31
    510c:	08 95       	ret

0000510e <strnlen>:
    510e:	fc 01       	movw	r30, r24
    5110:	61 50       	subi	r22, 0x01	; 1
    5112:	70 40       	sbci	r23, 0x00	; 0
    5114:	01 90       	ld	r0, Z+
    5116:	01 10       	cpse	r0, r1
    5118:	d8 f7       	brcc	.-10     	; 0x5110 <strnlen+0x2>
    511a:	80 95       	com	r24
    511c:	90 95       	com	r25
    511e:	8e 0f       	add	r24, r30
    5120:	9f 1f       	adc	r25, r31
    5122:	08 95       	ret

00005124 <fputc>:
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	fb 01       	movw	r30, r22
    512e:	23 81       	ldd	r18, Z+3	; 0x03
    5130:	21 fd       	sbrc	r18, 1
    5132:	03 c0       	rjmp	.+6      	; 0x513a <fputc+0x16>
    5134:	8f ef       	ldi	r24, 0xFF	; 255
    5136:	9f ef       	ldi	r25, 0xFF	; 255
    5138:	28 c0       	rjmp	.+80     	; 0x518a <fputc+0x66>
    513a:	22 ff       	sbrs	r18, 2
    513c:	16 c0       	rjmp	.+44     	; 0x516a <fputc+0x46>
    513e:	46 81       	ldd	r20, Z+6	; 0x06
    5140:	57 81       	ldd	r21, Z+7	; 0x07
    5142:	24 81       	ldd	r18, Z+4	; 0x04
    5144:	35 81       	ldd	r19, Z+5	; 0x05
    5146:	42 17       	cp	r20, r18
    5148:	53 07       	cpc	r21, r19
    514a:	44 f4       	brge	.+16     	; 0x515c <fputc+0x38>
    514c:	a0 81       	ld	r26, Z
    514e:	b1 81       	ldd	r27, Z+1	; 0x01
    5150:	9d 01       	movw	r18, r26
    5152:	2f 5f       	subi	r18, 0xFF	; 255
    5154:	3f 4f       	sbci	r19, 0xFF	; 255
    5156:	31 83       	std	Z+1, r19	; 0x01
    5158:	20 83       	st	Z, r18
    515a:	8c 93       	st	X, r24
    515c:	26 81       	ldd	r18, Z+6	; 0x06
    515e:	37 81       	ldd	r19, Z+7	; 0x07
    5160:	2f 5f       	subi	r18, 0xFF	; 255
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	37 83       	std	Z+7, r19	; 0x07
    5166:	26 83       	std	Z+6, r18	; 0x06
    5168:	10 c0       	rjmp	.+32     	; 0x518a <fputc+0x66>
    516a:	eb 01       	movw	r28, r22
    516c:	09 2f       	mov	r16, r25
    516e:	18 2f       	mov	r17, r24
    5170:	00 84       	ldd	r0, Z+8	; 0x08
    5172:	f1 85       	ldd	r31, Z+9	; 0x09
    5174:	e0 2d       	mov	r30, r0
    5176:	09 95       	icall
    5178:	89 2b       	or	r24, r25
    517a:	e1 f6       	brne	.-72     	; 0x5134 <fputc+0x10>
    517c:	8e 81       	ldd	r24, Y+6	; 0x06
    517e:	9f 81       	ldd	r25, Y+7	; 0x07
    5180:	01 96       	adiw	r24, 0x01	; 1
    5182:	9f 83       	std	Y+7, r25	; 0x07
    5184:	8e 83       	std	Y+6, r24	; 0x06
    5186:	81 2f       	mov	r24, r17
    5188:	90 2f       	mov	r25, r16
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	08 95       	ret

00005194 <__ultoa_invert>:
    5194:	fa 01       	movw	r30, r20
    5196:	aa 27       	eor	r26, r26
    5198:	28 30       	cpi	r18, 0x08	; 8
    519a:	51 f1       	breq	.+84     	; 0x51f0 <__ultoa_invert+0x5c>
    519c:	20 31       	cpi	r18, 0x10	; 16
    519e:	81 f1       	breq	.+96     	; 0x5200 <__ultoa_invert+0x6c>
    51a0:	e8 94       	clt
    51a2:	6f 93       	push	r22
    51a4:	6e 7f       	andi	r22, 0xFE	; 254
    51a6:	6e 5f       	subi	r22, 0xFE	; 254
    51a8:	7f 4f       	sbci	r23, 0xFF	; 255
    51aa:	8f 4f       	sbci	r24, 0xFF	; 255
    51ac:	9f 4f       	sbci	r25, 0xFF	; 255
    51ae:	af 4f       	sbci	r26, 0xFF	; 255
    51b0:	b1 e0       	ldi	r27, 0x01	; 1
    51b2:	3e d0       	rcall	.+124    	; 0x5230 <__ultoa_invert+0x9c>
    51b4:	b4 e0       	ldi	r27, 0x04	; 4
    51b6:	3c d0       	rcall	.+120    	; 0x5230 <__ultoa_invert+0x9c>
    51b8:	67 0f       	add	r22, r23
    51ba:	78 1f       	adc	r23, r24
    51bc:	89 1f       	adc	r24, r25
    51be:	9a 1f       	adc	r25, r26
    51c0:	a1 1d       	adc	r26, r1
    51c2:	68 0f       	add	r22, r24
    51c4:	79 1f       	adc	r23, r25
    51c6:	8a 1f       	adc	r24, r26
    51c8:	91 1d       	adc	r25, r1
    51ca:	a1 1d       	adc	r26, r1
    51cc:	6a 0f       	add	r22, r26
    51ce:	71 1d       	adc	r23, r1
    51d0:	81 1d       	adc	r24, r1
    51d2:	91 1d       	adc	r25, r1
    51d4:	a1 1d       	adc	r26, r1
    51d6:	20 d0       	rcall	.+64     	; 0x5218 <__ultoa_invert+0x84>
    51d8:	09 f4       	brne	.+2      	; 0x51dc <__ultoa_invert+0x48>
    51da:	68 94       	set
    51dc:	3f 91       	pop	r19
    51de:	2a e0       	ldi	r18, 0x0A	; 10
    51e0:	26 9f       	mul	r18, r22
    51e2:	11 24       	eor	r1, r1
    51e4:	30 19       	sub	r19, r0
    51e6:	30 5d       	subi	r19, 0xD0	; 208
    51e8:	31 93       	st	Z+, r19
    51ea:	de f6       	brtc	.-74     	; 0x51a2 <__ultoa_invert+0xe>
    51ec:	cf 01       	movw	r24, r30
    51ee:	08 95       	ret
    51f0:	46 2f       	mov	r20, r22
    51f2:	47 70       	andi	r20, 0x07	; 7
    51f4:	40 5d       	subi	r20, 0xD0	; 208
    51f6:	41 93       	st	Z+, r20
    51f8:	b3 e0       	ldi	r27, 0x03	; 3
    51fa:	0f d0       	rcall	.+30     	; 0x521a <__ultoa_invert+0x86>
    51fc:	c9 f7       	brne	.-14     	; 0x51f0 <__ultoa_invert+0x5c>
    51fe:	f6 cf       	rjmp	.-20     	; 0x51ec <__ultoa_invert+0x58>
    5200:	46 2f       	mov	r20, r22
    5202:	4f 70       	andi	r20, 0x0F	; 15
    5204:	40 5d       	subi	r20, 0xD0	; 208
    5206:	4a 33       	cpi	r20, 0x3A	; 58
    5208:	18 f0       	brcs	.+6      	; 0x5210 <__ultoa_invert+0x7c>
    520a:	49 5d       	subi	r20, 0xD9	; 217
    520c:	31 fd       	sbrc	r19, 1
    520e:	40 52       	subi	r20, 0x20	; 32
    5210:	41 93       	st	Z+, r20
    5212:	02 d0       	rcall	.+4      	; 0x5218 <__ultoa_invert+0x84>
    5214:	a9 f7       	brne	.-22     	; 0x5200 <__ultoa_invert+0x6c>
    5216:	ea cf       	rjmp	.-44     	; 0x51ec <__ultoa_invert+0x58>
    5218:	b4 e0       	ldi	r27, 0x04	; 4
    521a:	a6 95       	lsr	r26
    521c:	97 95       	ror	r25
    521e:	87 95       	ror	r24
    5220:	77 95       	ror	r23
    5222:	67 95       	ror	r22
    5224:	ba 95       	dec	r27
    5226:	c9 f7       	brne	.-14     	; 0x521a <__ultoa_invert+0x86>
    5228:	00 97       	sbiw	r24, 0x00	; 0
    522a:	61 05       	cpc	r22, r1
    522c:	71 05       	cpc	r23, r1
    522e:	08 95       	ret
    5230:	9b 01       	movw	r18, r22
    5232:	ac 01       	movw	r20, r24
    5234:	0a 2e       	mov	r0, r26
    5236:	06 94       	lsr	r0
    5238:	57 95       	ror	r21
    523a:	47 95       	ror	r20
    523c:	37 95       	ror	r19
    523e:	27 95       	ror	r18
    5240:	ba 95       	dec	r27
    5242:	c9 f7       	brne	.-14     	; 0x5236 <__ultoa_invert+0xa2>
    5244:	62 0f       	add	r22, r18
    5246:	73 1f       	adc	r23, r19
    5248:	84 1f       	adc	r24, r20
    524a:	95 1f       	adc	r25, r21
    524c:	a0 1d       	adc	r26, r0
    524e:	08 95       	ret

00005250 <__prologue_saves__>:
    5250:	2f 92       	push	r2
    5252:	3f 92       	push	r3
    5254:	4f 92       	push	r4
    5256:	5f 92       	push	r5
    5258:	6f 92       	push	r6
    525a:	7f 92       	push	r7
    525c:	8f 92       	push	r8
    525e:	9f 92       	push	r9
    5260:	af 92       	push	r10
    5262:	bf 92       	push	r11
    5264:	cf 92       	push	r12
    5266:	df 92       	push	r13
    5268:	ef 92       	push	r14
    526a:	ff 92       	push	r15
    526c:	0f 93       	push	r16
    526e:	1f 93       	push	r17
    5270:	cf 93       	push	r28
    5272:	df 93       	push	r29
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
    5278:	ca 1b       	sub	r28, r26
    527a:	db 0b       	sbc	r29, r27
    527c:	0f b6       	in	r0, 0x3f	; 63
    527e:	f8 94       	cli
    5280:	de bf       	out	0x3e, r29	; 62
    5282:	0f be       	out	0x3f, r0	; 63
    5284:	cd bf       	out	0x3d, r28	; 61
    5286:	09 94       	ijmp

00005288 <__epilogue_restores__>:
    5288:	2a 88       	ldd	r2, Y+18	; 0x12
    528a:	39 88       	ldd	r3, Y+17	; 0x11
    528c:	48 88       	ldd	r4, Y+16	; 0x10
    528e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5290:	6e 84       	ldd	r6, Y+14	; 0x0e
    5292:	7d 84       	ldd	r7, Y+13	; 0x0d
    5294:	8c 84       	ldd	r8, Y+12	; 0x0c
    5296:	9b 84       	ldd	r9, Y+11	; 0x0b
    5298:	aa 84       	ldd	r10, Y+10	; 0x0a
    529a:	b9 84       	ldd	r11, Y+9	; 0x09
    529c:	c8 84       	ldd	r12, Y+8	; 0x08
    529e:	df 80       	ldd	r13, Y+7	; 0x07
    52a0:	ee 80       	ldd	r14, Y+6	; 0x06
    52a2:	fd 80       	ldd	r15, Y+5	; 0x05
    52a4:	0c 81       	ldd	r16, Y+4	; 0x04
    52a6:	1b 81       	ldd	r17, Y+3	; 0x03
    52a8:	aa 81       	ldd	r26, Y+2	; 0x02
    52aa:	b9 81       	ldd	r27, Y+1	; 0x01
    52ac:	ce 0f       	add	r28, r30
    52ae:	d1 1d       	adc	r29, r1
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	ed 01       	movw	r28, r26
    52bc:	08 95       	ret

000052be <_exit>:
    52be:	f8 94       	cli

000052c0 <__stop_program>:
    52c0:	ff cf       	rjmp	.-2      	; 0x52c0 <__stop_program>
