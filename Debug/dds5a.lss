
dds5a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00005730  000057c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800312  00800312  000059d6  2**0
                  ALLOC
  3 .stab         00009474  00000000  00000000  000059d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004d2b  00000000  00000000  0000ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00013b77  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00013b88  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00013bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000141bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0001475e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00014778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c5       	rjmp	.+2894   	; 0xb6c <__vector_7>
      1e:	00 00       	nop
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c0       	rjmp	.+88     	; 0xa2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c0       	rjmp	.+84     	; 0xa2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c0       	rjmp	.+64     	; 0xa2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	f7 e5       	ldi	r31, 0x57	; 87
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 36       	cpi	r26, 0x68	; 104
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c0 10 	call	0x2180	; 0x2180 <main>
      9e:	0c 94 96 2b 	jmp	0x572c	; 0x572c <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <FONT>:
	...
     230:	00 08       	sbc	r0, r0
     232:	08 08       	sbc	r0, r8
     234:	08 08       	sbc	r0, r8
     236:	08 00       	.word	0x0008	; ????
     238:	08 00       	.word	0x0008	; ????
     23a:	00 00       	nop
     23c:	00 14       	cp	r0, r0
     23e:	14 14       	cp	r1, r4
	...
     248:	00 00       	nop
     24a:	14 14       	cp	r1, r4
     24c:	3e 14       	cp	r3, r14
     24e:	3e 14       	cp	r3, r14
     250:	14 00       	.word	0x0014	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	08 3c       	cpi	r16, 0xC8	; 200
     258:	0a 1c       	adc	r0, r10
     25a:	28 1e       	adc	r2, r24
     25c:	08 00       	.word	0x0008	; ????
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	06 26       	eor	r0, r22
     264:	10 08       	sbc	r1, r0
     266:	04 32       	cpi	r16, 0x24	; 36
     268:	30 00       	.word	0x0030	; ????
     26a:	00 00       	nop
     26c:	00 00       	nop
     26e:	1c 02       	muls	r17, r28
     270:	02 04       	cpc	r0, r2
     272:	2a 12       	cpse	r2, r26
     274:	2c 00       	.word	0x002c	; ????
     276:	00 00       	nop
     278:	00 18       	sub	r0, r0
     27a:	08 04       	cpc	r0, r8
	...
     284:	20 10       	cpse	r2, r0
     286:	10 08       	sbc	r1, r0
     288:	08 08       	sbc	r0, r8
     28a:	08 08       	sbc	r0, r8
     28c:	10 10       	cpse	r1, r0
     28e:	20 00       	.word	0x0020	; ????
     290:	02 04       	cpc	r0, r2
     292:	04 08       	sbc	r0, r4
     294:	08 08       	sbc	r0, r8
     296:	08 08       	sbc	r0, r8
     298:	04 04       	cpc	r0, r4
     29a:	02 00       	.word	0x0002	; ????
     29c:	00 00       	nop
     29e:	00 08       	sbc	r0, r0
     2a0:	2a 1c       	adc	r2, r10
     2a2:	2a 08       	sbc	r2, r10
     2a4:	00 00       	nop
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 08       	sbc	r0, r0
     2ac:	08 3e       	cpi	r16, 0xE8	; 232
     2ae:	08 08       	sbc	r0, r8
	...
     2b8:	00 00       	nop
     2ba:	00 18       	sub	r0, r0
     2bc:	18 08       	sbc	r1, r8
     2be:	04 00       	.word	0x0004	; ????
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 3e       	cpi	r16, 0xE0	; 224
	...
     2d2:	00 18       	sub	r0, r0
     2d4:	18 00       	.word	0x0018	; ????
     2d6:	00 00       	nop
     2d8:	20 20       	and	r2, r0
     2da:	10 10       	cpse	r1, r0
     2dc:	08 08       	sbc	r0, r8
     2de:	04 04       	cpc	r0, r4
     2e0:	02 02       	muls	r16, r18
     2e2:	00 00       	nop
     2e4:	00 1c       	adc	r0, r0
     2e6:	22 32       	cpi	r18, 0x22	; 34
     2e8:	2a 26       	eor	r2, r26
     2ea:	22 22       	and	r2, r18
     2ec:	1c 00       	.word	0x001c	; ????
     2ee:	00 00       	nop
     2f0:	00 08       	sbc	r0, r0
     2f2:	0c 08       	sbc	r0, r12
     2f4:	08 08       	sbc	r0, r8
     2f6:	08 08       	sbc	r0, r8
     2f8:	08 00       	.word	0x0008	; ????
     2fa:	00 00       	nop
     2fc:	00 1c       	adc	r0, r0
     2fe:	22 20       	and	r2, r2
     300:	10 08       	sbc	r1, r0
     302:	04 02       	muls	r16, r20
     304:	3e 00       	.word	0x003e	; ????
     306:	00 00       	nop
     308:	00 1c       	adc	r0, r0
     30a:	22 20       	and	r2, r2
     30c:	18 20       	and	r1, r8
     30e:	20 22       	and	r2, r16
     310:	1c 00       	.word	0x001c	; ????
     312:	00 00       	nop
     314:	00 10       	cpse	r0, r0
     316:	18 18       	sub	r1, r8
     318:	14 14       	cp	r1, r4
     31a:	3e 10       	cpse	r3, r14
     31c:	38 00       	.word	0x0038	; ????
     31e:	00 00       	nop
     320:	00 3e       	cpi	r16, 0xE0	; 224
     322:	02 02       	muls	r16, r18
     324:	1e 20       	and	r1, r14
     326:	20 22       	and	r2, r16
     328:	1c 00       	.word	0x001c	; ????
     32a:	00 00       	nop
     32c:	00 18       	sub	r0, r0
     32e:	04 02       	muls	r16, r20
     330:	1e 22       	and	r1, r30
     332:	22 22       	and	r2, r18
     334:	1c 00       	.word	0x001c	; ????
     336:	00 00       	nop
     338:	00 3e       	cpi	r16, 0xE0	; 224
     33a:	22 20       	and	r2, r2
     33c:	20 10       	cpse	r2, r0
     33e:	10 08       	sbc	r1, r0
     340:	08 00       	.word	0x0008	; ????
     342:	00 00       	nop
     344:	00 1c       	adc	r0, r0
     346:	22 22       	and	r2, r18
     348:	1c 22       	and	r1, r28
     34a:	22 22       	and	r2, r18
     34c:	1c 00       	.word	0x001c	; ????
     34e:	00 00       	nop
     350:	00 1c       	adc	r0, r0
     352:	22 22       	and	r2, r18
     354:	22 3c       	cpi	r18, 0xC2	; 194
     356:	20 10       	cpse	r2, r0
     358:	0c 00       	.word	0x000c	; ????
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	00 18       	sub	r0, r0
     360:	18 00       	.word	0x0018	; ????
     362:	00 18       	sub	r0, r0
     364:	18 00       	.word	0x0018	; ????
     366:	00 00       	nop
     368:	00 00       	nop
     36a:	00 18       	sub	r0, r0
     36c:	18 00       	.word	0x0018	; ????
     36e:	00 18       	sub	r0, r0
     370:	18 08       	sbc	r1, r8
     372:	04 00       	.word	0x0004	; ????
     374:	00 00       	nop
     376:	00 30       	cpi	r16, 0x00	; 0
     378:	0c 03       	fmul	r16, r20
     37a:	0c 30       	cpi	r16, 0x0C	; 12
	...
     384:	3e 00       	.word	0x003e	; ????
     386:	3e 00       	.word	0x003e	; ????
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 03       	mulsu	r16, r16
     390:	0c 30       	cpi	r16, 0x0C	; 12
     392:	0c 03       	fmul	r16, r20
     394:	00 00       	nop
     396:	00 00       	nop
     398:	00 1c       	adc	r0, r0
     39a:	22 20       	and	r2, r2
     39c:	10 08       	sbc	r1, r0
     39e:	08 00       	.word	0x0008	; ????
     3a0:	08 00       	.word	0x0008	; ????
     3a2:	00 00       	nop
     3a4:	00 00       	nop
     3a6:	1c 22       	and	r1, r28
     3a8:	3a 3a       	cpi	r19, 0xAA	; 170
     3aa:	1a 02       	muls	r17, r26
     3ac:	1c 00       	.word	0x001c	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	08 14       	cp	r0, r8
     3b4:	22 22       	and	r2, r18
     3b6:	3e 22       	and	r3, r30
     3b8:	22 00       	.word	0x0022	; ????
     3ba:	00 00       	nop
     3bc:	00 00       	nop
     3be:	1e 22       	and	r1, r30
     3c0:	22 1e       	adc	r2, r18
     3c2:	22 22       	and	r2, r18
     3c4:	1e 00       	.word	0x001e	; ????
     3c6:	00 00       	nop
     3c8:	00 00       	nop
     3ca:	1c 22       	and	r1, r28
     3cc:	02 02       	muls	r16, r18
     3ce:	02 22       	and	r0, r18
     3d0:	1c 00       	.word	0x001c	; ????
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	0e 12       	cpse	r0, r30
     3d8:	22 22       	and	r2, r18
     3da:	22 12       	cpse	r2, r18
     3dc:	0e 00       	.word	0x000e	; ????
     3de:	00 00       	nop
     3e0:	00 00       	nop
     3e2:	3e 02       	muls	r19, r30
     3e4:	02 1e       	adc	r0, r18
     3e6:	02 02       	muls	r16, r18
     3e8:	3e 00       	.word	0x003e	; ????
     3ea:	00 00       	nop
     3ec:	00 00       	nop
     3ee:	3e 02       	muls	r19, r30
     3f0:	02 1e       	adc	r0, r18
     3f2:	02 02       	muls	r16, r18
     3f4:	02 00       	.word	0x0002	; ????
     3f6:	00 00       	nop
     3f8:	00 00       	nop
     3fa:	1c 22       	and	r1, r28
     3fc:	02 32       	cpi	r16, 0x22	; 34
     3fe:	22 22       	and	r2, r18
     400:	3c 00       	.word	0x003c	; ????
     402:	00 00       	nop
     404:	00 00       	nop
     406:	22 22       	and	r2, r18
     408:	22 3e       	cpi	r18, 0xE2	; 226
     40a:	22 22       	and	r2, r18
     40c:	22 00       	.word	0x0022	; ????
     40e:	00 00       	nop
     410:	00 00       	nop
     412:	3e 08       	sbc	r3, r14
     414:	08 08       	sbc	r0, r8
     416:	08 08       	sbc	r0, r8
     418:	3e 00       	.word	0x003e	; ????
     41a:	00 00       	nop
     41c:	00 00       	nop
     41e:	38 20       	and	r3, r8
     420:	20 20       	and	r2, r0
     422:	22 22       	and	r2, r18
     424:	1c 00       	.word	0x001c	; ????
     426:	00 00       	nop
     428:	00 00       	nop
     42a:	22 12       	cpse	r2, r18
     42c:	0a 06       	cpc	r0, r26
     42e:	0a 12       	cpse	r0, r26
     430:	22 00       	.word	0x0022	; ????
     432:	00 00       	nop
     434:	00 00       	nop
     436:	02 02       	muls	r16, r18
     438:	02 02       	muls	r16, r18
     43a:	02 02       	muls	r16, r18
     43c:	3e 00       	.word	0x003e	; ????
     43e:	00 00       	nop
     440:	00 00       	nop
     442:	22 36       	cpi	r18, 0x62	; 98
     444:	2a 2a       	or	r2, r26
     446:	22 22       	and	r2, r18
     448:	22 00       	.word	0x0022	; ????
     44a:	00 00       	nop
     44c:	00 00       	nop
     44e:	22 26       	eor	r2, r18
     450:	26 2a       	or	r2, r22
     452:	32 32       	cpi	r19, 0x22	; 34
     454:	22 00       	.word	0x0022	; ????
     456:	00 00       	nop
     458:	00 00       	nop
     45a:	1c 22       	and	r1, r28
     45c:	22 22       	and	r2, r18
     45e:	22 22       	and	r2, r18
     460:	1c 00       	.word	0x001c	; ????
     462:	00 00       	nop
     464:	00 00       	nop
     466:	1e 22       	and	r1, r30
     468:	22 1e       	adc	r2, r18
     46a:	02 02       	muls	r16, r18
     46c:	02 00       	.word	0x0002	; ????
     46e:	00 00       	nop
     470:	00 00       	nop
     472:	1c 22       	and	r1, r28
     474:	22 22       	and	r2, r18
     476:	22 22       	and	r2, r18
     478:	1c 30       	cpi	r17, 0x0C	; 12
     47a:	00 00       	nop
     47c:	00 00       	nop
     47e:	1e 22       	and	r1, r30
     480:	22 1e       	adc	r2, r18
     482:	0a 12       	cpse	r0, r26
     484:	22 00       	.word	0x0022	; ????
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	1c 22       	and	r1, r28
     48c:	02 1c       	adc	r0, r2
     48e:	20 22       	and	r2, r16
     490:	1c 00       	.word	0x001c	; ????
     492:	00 00       	nop
     494:	00 00       	nop
     496:	3e 08       	sbc	r3, r14
     498:	08 08       	sbc	r0, r8
     49a:	08 08       	sbc	r0, r8
     49c:	08 00       	.word	0x0008	; ????
     49e:	00 00       	nop
     4a0:	00 00       	nop
     4a2:	22 22       	and	r2, r18
     4a4:	22 22       	and	r2, r18
     4a6:	22 22       	and	r2, r18
     4a8:	1c 00       	.word	0x001c	; ????
     4aa:	00 00       	nop
     4ac:	00 00       	nop
     4ae:	22 22       	and	r2, r18
     4b0:	22 14       	cp	r2, r2
     4b2:	14 08       	sbc	r1, r4
     4b4:	08 00       	.word	0x0008	; ????
     4b6:	00 00       	nop
     4b8:	00 00       	nop
     4ba:	22 22       	and	r2, r18
     4bc:	22 2a       	or	r2, r18
     4be:	2a 36       	cpi	r18, 0x6A	; 106
     4c0:	22 00       	.word	0x0022	; ????
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     4c6:	22 22       	and	r2, r18
     4c8:	14 08       	sbc	r1, r4
     4ca:	14 22       	and	r1, r20
     4cc:	22 00       	.word	0x0022	; ????
     4ce:	00 00       	nop
     4d0:	00 00       	nop
     4d2:	22 22       	and	r2, r18
     4d4:	14 08       	sbc	r1, r4
     4d6:	08 08       	sbc	r0, r8
     4d8:	08 00       	.word	0x0008	; ????
     4da:	00 00       	nop
     4dc:	00 00       	nop
     4de:	3e 20       	and	r3, r14
     4e0:	10 08       	sbc	r1, r0
     4e2:	04 02       	muls	r16, r20
     4e4:	3e 00       	.word	0x003e	; ????
     4e6:	00 00       	nop
     4e8:	38 08       	sbc	r3, r8
     4ea:	08 08       	sbc	r0, r8
     4ec:	08 08       	sbc	r0, r8
     4ee:	08 08       	sbc	r0, r8
     4f0:	08 08       	sbc	r0, r8
     4f2:	38 00       	.word	0x0038	; ????
     4f4:	02 02       	muls	r16, r18
     4f6:	04 04       	cpc	r0, r4
     4f8:	08 08       	sbc	r0, r8
     4fa:	10 10       	cpse	r1, r0
     4fc:	20 20       	and	r2, r0
     4fe:	00 00       	nop
     500:	0e 08       	sbc	r0, r14
     502:	08 08       	sbc	r0, r8
     504:	08 08       	sbc	r0, r8
     506:	08 08       	sbc	r0, r8
     508:	08 08       	sbc	r0, r8
     50a:	0e 00       	.word	0x000e	; ????
     50c:	00 08       	sbc	r0, r0
     50e:	14 22       	and	r1, r20
	...
     520:	00 3f       	cpi	r16, 0xF0	; 240
     522:	00 00       	nop
     524:	00 0c       	add	r0, r0
     526:	08 10       	cpse	r0, r8
	...
     534:	3c 22       	and	r3, r28
     536:	22 32       	cpi	r18, 0x22	; 34
     538:	2c 00       	.word	0x002c	; ????
     53a:	00 00       	nop
     53c:	00 02       	muls	r16, r16
     53e:	02 02       	muls	r16, r18
     540:	1e 22       	and	r1, r30
     542:	22 22       	and	r2, r18
     544:	1e 00       	.word	0x001e	; ????
     546:	00 00       	nop
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	3c 02       	muls	r19, r28
     54e:	02 02       	muls	r16, r18
     550:	3c 00       	.word	0x003c	; ????
     552:	00 00       	nop
     554:	00 20       	and	r0, r0
     556:	20 20       	and	r2, r0
     558:	3c 22       	and	r3, r28
     55a:	22 22       	and	r2, r18
     55c:	3c 00       	.word	0x003c	; ????
     55e:	00 00       	nop
     560:	00 00       	nop
     562:	00 00       	nop
     564:	1c 22       	and	r1, r28
     566:	3e 02       	muls	r19, r30
     568:	1c 00       	.word	0x001c	; ????
     56a:	00 00       	nop
     56c:	00 38       	cpi	r16, 0x80	; 128
     56e:	04 04       	cpc	r0, r4
     570:	1e 04       	cpc	r1, r14
     572:	04 04       	cpc	r0, r4
     574:	04 00       	.word	0x0004	; ????
     576:	00 00       	nop
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	3c 22       	and	r3, r28
     57e:	22 22       	and	r2, r18
     580:	3c 20       	and	r3, r12
     582:	20 1c       	adc	r2, r0
     584:	00 02       	muls	r16, r16
     586:	02 02       	muls	r16, r18
     588:	1e 22       	and	r1, r30
     58a:	22 22       	and	r2, r18
     58c:	22 00       	.word	0x0022	; ????
     58e:	00 00       	nop
     590:	00 08       	sbc	r0, r0
     592:	08 00       	.word	0x0008	; ????
     594:	0c 08       	sbc	r0, r12
     596:	08 08       	sbc	r0, r8
     598:	1c 00       	.word	0x001c	; ????
     59a:	00 00       	nop
     59c:	00 10       	cpse	r0, r0
     59e:	10 00       	.word	0x0010	; ????
     5a0:	1c 10       	cpse	r1, r12
     5a2:	10 10       	cpse	r1, r0
     5a4:	10 10       	cpse	r1, r0
     5a6:	10 0e       	add	r1, r16
     5a8:	00 02       	muls	r16, r16
     5aa:	02 02       	muls	r16, r18
     5ac:	12 0a       	sbc	r1, r18
     5ae:	06 0a       	sbc	r0, r22
     5b0:	12 00       	.word	0x0012	; ????
     5b2:	00 00       	nop
     5b4:	00 0c       	add	r0, r0
     5b6:	08 08       	sbc	r0, r8
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	1c 00       	.word	0x001c	; ????
     5be:	00 00       	nop
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	16 2a       	or	r1, r22
     5c6:	2a 2a       	or	r2, r26
     5c8:	22 00       	.word	0x0022	; ????
     5ca:	00 00       	nop
     5cc:	00 00       	nop
     5ce:	00 00       	nop
     5d0:	1a 26       	eor	r1, r26
     5d2:	22 22       	and	r2, r18
     5d4:	22 00       	.word	0x0022	; ????
     5d6:	00 00       	nop
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	1c 22       	and	r1, r28
     5de:	22 22       	and	r2, r18
     5e0:	1c 00       	.word	0x001c	; ????
     5e2:	00 00       	nop
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	1e 22       	and	r1, r30
     5ea:	22 22       	and	r2, r18
     5ec:	1e 02       	muls	r17, r30
     5ee:	02 02       	muls	r16, r18
     5f0:	00 00       	nop
     5f2:	00 00       	nop
     5f4:	3c 22       	and	r3, r28
     5f6:	22 22       	and	r2, r18
     5f8:	3c 20       	and	r3, r12
     5fa:	20 20       	and	r2, r0
     5fc:	00 00       	nop
     5fe:	00 00       	nop
     600:	1a 06       	cpc	r1, r26
     602:	02 02       	muls	r16, r18
     604:	02 00       	.word	0x0002	; ????
     606:	00 00       	nop
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	3c 02       	muls	r19, r28
     60e:	1c 20       	and	r1, r12
     610:	1e 00       	.word	0x001e	; ????
     612:	00 00       	nop
     614:	00 08       	sbc	r0, r0
     616:	08 08       	sbc	r0, r8
     618:	3e 08       	sbc	r3, r14
     61a:	08 08       	sbc	r0, r8
     61c:	30 00       	.word	0x0030	; ????
     61e:	00 00       	nop
     620:	00 00       	nop
     622:	00 00       	nop
     624:	22 22       	and	r2, r18
     626:	22 32       	cpi	r18, 0x22	; 34
     628:	2c 00       	.word	0x002c	; ????
     62a:	00 00       	nop
     62c:	00 00       	nop
     62e:	00 00       	nop
     630:	36 14       	cp	r3, r6
     632:	14 08       	sbc	r1, r4
     634:	08 00       	.word	0x0008	; ????
     636:	00 00       	nop
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	22 2a       	or	r2, r18
     63e:	2a 2a       	or	r2, r26
     640:	14 00       	.word	0x0014	; ????
     642:	00 00       	nop
     644:	00 00       	nop
     646:	00 00       	nop
     648:	22 14       	cp	r2, r2
     64a:	08 14       	cp	r0, r8
     64c:	22 00       	.word	0x0022	; ????
     64e:	00 00       	nop
     650:	00 00       	nop
     652:	00 00       	nop
     654:	22 22       	and	r2, r18
     656:	22 22       	and	r2, r18
     658:	3c 20       	and	r3, r12
     65a:	20 1c       	adc	r2, r0
     65c:	00 00       	nop
     65e:	00 00       	nop
     660:	3e 10       	cpse	r3, r14
     662:	08 04       	cpc	r0, r8
     664:	3e 00       	.word	0x003e	; ????
     666:	00 00       	nop
     668:	20 10       	cpse	r2, r0
     66a:	10 10       	cpse	r1, r0
     66c:	10 08       	sbc	r1, r0
     66e:	10 10       	cpse	r1, r0
     670:	10 10       	cpse	r1, r0
     672:	20 00       	.word	0x0020	; ????
     674:	08 08       	sbc	r0, r8
     676:	08 08       	sbc	r0, r8
     678:	08 08       	sbc	r0, r8
     67a:	08 08       	sbc	r0, r8
     67c:	08 08       	sbc	r0, r8
     67e:	08 00       	.word	0x0008	; ????
     680:	02 04       	cpc	r0, r2
     682:	04 04       	cpc	r0, r4
     684:	04 08       	sbc	r0, r4
     686:	04 04       	cpc	r0, r4
     688:	04 04       	cpc	r0, r4
     68a:	02 00       	.word	0x0002	; ????
     68c:	00 04       	cpc	r0, r0
     68e:	2a 10       	cpse	r2, r10
	...
     698:	00 00       	nop
     69a:	00 08       	sbc	r0, r0
     69c:	08 14       	cp	r0, r8
     69e:	14 22       	and	r1, r20
     6a0:	3e 00       	.word	0x003e	; ????
	...

000006a4 <_getPixels>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	9c e0       	ldi	r25, 0x0C	; 12
     6aa:	89 9f       	mul	r24, r25

000006ac <_gp1>:
     6ac:	e2 e5       	ldi	r30, 0x52	; 82
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e0 0d       	add	r30, r0
     6b6:	f1 1d       	adc	r31, r1
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	eb 01       	movw	r28, r22

000006bc <gpix1>:
     6bc:	95 91       	lpm	r25, Z+
     6be:	99 93       	st	Y+, r25
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <gpix1>
     6c4:	11 24       	eor	r1, r1
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_ZN8CallbackC1Ev>:
// This class defines a callback interface
// to be used by functions to register callbacks with other functions
// The first use is to provide callbacks to the clock routines.
//

class Callback
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN8CallbackC1Ev+0x6>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	20 ee       	ldi	r18, 0xE0	; 224
     6e0:	32 e0       	ldi	r19, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	31 83       	std	Z+1, r19	; 0x01
     6e6:	20 83       	st	Z, r18
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <_ZN2SwnwEj>:
	bool	hasEvent(void);
	event getEvent(void);
	void	clearEvent(void);
	void	callback(void);
	bool	isClosed(void);
	void *operator new(size_t size) { return malloc(size);}
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <_ZN2SwnwEj+0x6>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_ZN7EncoderC1Ehhh>:
#include "clock.h"
#include "sw.h"
#include "Encoder.h"


Encoder::Encoder(uint8_t a, uint8_t b, uint8_t port) {
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <_ZN7EncoderC1Ehhh+0xa>
     71c:	00 d0       	rcall	.+0      	; 0x71e <_ZN7EncoderC1Ehhh+0xc>
     71e:	1f 92       	push	r1
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	6b 83       	std	Y+3, r22	; 0x03
     72a:	4c 83       	std	Y+4, r20	; 0x04
     72c:	2d 83       	std	Y+5, r18	; 0x05
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	cc df       	rcall	.-104    	; 0x6cc <_ZN8CallbackC1Ev>
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	26 ee       	ldi	r18, 0xE6	; 230
     73a:	32 e0       	ldi	r19, 0x02	; 2
     73c:	fc 01       	movw	r30, r24
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	20 83       	st	Z, r18

	eventRate = 4;				// default 4 pulses per cycle
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	24 e0       	ldi	r18, 0x04	; 4
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	fc 01       	movw	r30, r24
     74c:	36 87       	std	Z+14, r19	; 0x0e
     74e:	25 87       	std	Z+13, r18	; 0x0d
	encA = new Sw(a, port);
     750:	8b e0       	ldi	r24, 0x0B	; 11
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	ce df       	rcall	.-100    	; 0x6f2 <_ZN2SwnwEj>
     756:	8c 01       	movw	r16, r24
     758:	4d 81       	ldd	r20, Y+5	; 0x05
     75a:	6b 81       	ldd	r22, Y+3	; 0x03
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN2SwC1Ehh>
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	fc 01       	movw	r30, r24
     768:	13 83       	std	Z+3, r17	; 0x03
     76a:	02 83       	std	Z+2, r16	; 0x02
	encB = new Sw(b, port);
     76c:	8b e0       	ldi	r24, 0x0B	; 11
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	c0 df       	rcall	.-128    	; 0x6f2 <_ZN2SwnwEj>
     772:	8c 01       	movw	r16, r24
     774:	4d 81       	ldd	r20, Y+5	; 0x05
     776:	6c 81       	ldd	r22, Y+4	; 0x04
     778:	c8 01       	movw	r24, r16
     77a:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN2SwC1Ehh>
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	fc 01       	movw	r30, r24
     784:	15 83       	std	Z+5, r17	; 0x05
     786:	04 83       	std	Z+4, r16	; 0x04
		
	if (encA->isClosed()) {
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	fc 01       	movw	r30, r24
     78e:	82 81       	ldd	r24, Z+2	; 0x02
     790:	93 81       	ldd	r25, Z+3	; 0x03
     792:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     796:	88 23       	and	r24, r24
     798:	c9 f0       	breq	.+50     	; 0x7cc <_ZN7EncoderC1Ehhh+0xba>
		if (encB->isClosed()) {
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	fc 01       	movw	r30, r24
     7a0:	84 81       	ldd	r24, Z+4	; 0x04
     7a2:	95 81       	ldd	r25, Z+5	; 0x05
     7a4:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     7a8:	88 23       	and	r24, r24
     7aa:	41 f0       	breq	.+16     	; 0x7bc <_ZN7EncoderC1Ehhh+0xaa>
			curState = 2;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	22 e0       	ldi	r18, 0x02	; 2
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	37 83       	std	Z+7, r19	; 0x07
     7b8:	26 83       	std	Z+6, r18	; 0x06
     7ba:	1e c0       	rjmp	.+60     	; 0x7f8 <_ZN7EncoderC1Ehhh+0xe6>
			} else {
			curState = 1;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	37 83       	std	Z+7, r19	; 0x07
     7c8:	26 83       	std	Z+6, r18	; 0x06
     7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <_ZN7EncoderC1Ehhh+0xe6>
		}
		} else {
		if (encB->isClosed()) {
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	fc 01       	movw	r30, r24
     7d2:	84 81       	ldd	r24, Z+4	; 0x04
     7d4:	95 81       	ldd	r25, Z+5	; 0x05
     7d6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     7da:	88 23       	and	r24, r24
     7dc:	41 f0       	breq	.+16     	; 0x7ee <_ZN7EncoderC1Ehhh+0xdc>
			curState = 4;
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	24 e0       	ldi	r18, 0x04	; 4
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	37 83       	std	Z+7, r19	; 0x07
     7ea:	26 83       	std	Z+6, r18	; 0x06
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <_ZN7EncoderC1Ehhh+0xe6>
			} else {
			curState = 0;
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	fc 01       	movw	r30, r24
     7f4:	17 82       	std	Z+7, r1	; 0x07
     7f6:	16 82       	std	Z+6, r1	; 0x06
		}
	}
	lastEvent = ENC_NO_EVENT;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	fc 01       	movw	r30, r24
     7fe:	10 86       	std	Z+8, r1	; 0x08
	Clock::registerPeriodic(this,TEN_MSEC);
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	00 d3       	rcall	.+1536   	; 0xe0a <_ZN5Clock16registerPeriodicEP8Callbackj>
	missedCwCount = 0;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	fc 01       	movw	r30, r24
     810:	12 86       	std	Z+10, r1	; 0x0a
     812:	11 86       	std	Z+9, r1	; 0x09
	missedCcwCount = 0;
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	fc 01       	movw	r30, r24
     81a:	14 86       	std	Z+12, r1	; 0x0c
     81c:	13 86       	std	Z+11, r1	; 0x0b
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <_ZN7Encoder6updateEv>:
// ccw event. 
//
// This algorithm produces 4 events per encoder a/b cycle.  For
// a 2 event case, use only encoder a events/
//
void Encoder::update(void) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	00 d0       	rcall	.+0      	; 0x838 <_ZN7Encoder6updateEv+0x6>
     838:	1f 92       	push	r1
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	9b 83       	std	Y+3, r25	; 0x03
     840:	8a 83       	std	Y+2, r24	; 0x02

	encEvent nxtEvent = ENC_NO_EVENT;
     842:	19 82       	std	Y+1, r1	; 0x01

	if ( !encA->hasEvent() && !encB->hasEvent() ){
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	9b 81       	ldd	r25, Y+3	; 0x03
     848:	fc 01       	movw	r30, r24
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN2Sw8hasEventEv>
     852:	98 2f       	mov	r25, r24
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	89 27       	eor	r24, r25
     858:	88 23       	and	r24, r24
     85a:	71 f0       	breq	.+28     	; 0x878 <_ZN7Encoder6updateEv+0x46>
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	9b 81       	ldd	r25, Y+3	; 0x03
     860:	fc 01       	movw	r30, r24
     862:	84 81       	ldd	r24, Z+4	; 0x04
     864:	95 81       	ldd	r25, Z+5	; 0x05
     866:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN2Sw8hasEventEv>
     86a:	98 2f       	mov	r25, r24
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	89 27       	eor	r24, r25
     870:	88 23       	and	r24, r24
     872:	11 f0       	breq	.+4      	; 0x878 <_ZN7Encoder6updateEv+0x46>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	01 c0       	rjmp	.+2      	; 0x87a <_ZN7Encoder6updateEv+0x48>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	88 23       	and	r24, r24
     87c:	09 f0       	breq	.+2      	; 0x880 <_ZN7Encoder6updateEv+0x4e>
		return;
     87e:	dc c0       	rjmp	.+440    	; 0xa38 <__stack+0x139>
	}

	if (encA->getEvent() == EV_CLOSE) {
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	fc 01       	movw	r30, r24
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	93 81       	ldd	r25, Z+3	; 0x03
     88a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
     88e:	98 2f       	mov	r25, r24
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	92 30       	cpi	r25, 0x02	; 2
     894:	09 f0       	breq	.+2      	; 0x898 <_ZN7Encoder6updateEv+0x66>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	88 23       	and	r24, r24
     89a:	79 f0       	breq	.+30     	; 0x8ba <_ZN7Encoder6updateEv+0x88>
		if (encB->isClosed()) {
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	9b 81       	ldd	r25, Y+3	; 0x03
     8a0:	fc 01       	movw	r30, r24
     8a2:	84 81       	ldd	r24, Z+4	; 0x04
     8a4:	95 81       	ldd	r25, Z+5	; 0x05
     8a6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     8aa:	88 23       	and	r24, r24
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <_ZN7Encoder6updateEv+0x82>
			nxtEvent = ENC_CCW_EVENT;
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	6e c0       	rjmp	.+220    	; 0x990 <__stack+0x91>
		} else {
			nxtEvent = ENC_CW_EVENT;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	6b c0       	rjmp	.+214    	; 0x990 <__stack+0x91>
		}
		 
	} else if ( (encB->getEvent() == EV_CLOSE) && (eventRate == 4))  {
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	9b 81       	ldd	r25, Y+3	; 0x03
     8be:	fc 01       	movw	r30, r24
     8c0:	84 81       	ldd	r24, Z+4	; 0x04
     8c2:	95 81       	ldd	r25, Z+5	; 0x05
     8c4:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	49 f4       	brne	.+18     	; 0x8de <_ZN7Encoder6updateEv+0xac>
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	9b 81       	ldd	r25, Y+3	; 0x03
     8d0:	fc 01       	movw	r30, r24
     8d2:	85 85       	ldd	r24, Z+13	; 0x0d
     8d4:	96 85       	ldd	r25, Z+14	; 0x0e
     8d6:	04 97       	sbiw	r24, 0x04	; 4
     8d8:	11 f4       	brne	.+4      	; 0x8de <_ZN7Encoder6updateEv+0xac>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <_ZN7Encoder6updateEv+0xae>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	88 23       	and	r24, r24
     8e2:	79 f0       	breq	.+30     	; 0x902 <__stack+0x3>
		if (encA->isClosed()) {
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	9b 81       	ldd	r25, Y+3	; 0x03
     8e8:	fc 01       	movw	r30, r24
     8ea:	82 81       	ldd	r24, Z+2	; 0x02
     8ec:	93 81       	ldd	r25, Z+3	; 0x03
     8ee:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     8f2:	88 23       	and	r24, r24
     8f4:	19 f0       	breq	.+6      	; 0x8fc <_ZN7Encoder6updateEv+0xca>
			nxtEvent = ENC_CW_EVENT;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	4a c0       	rjmp	.+148    	; 0x990 <__stack+0x91>
		} else {
			nxtEvent = ENC_CCW_EVENT;
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	47 c0       	rjmp	.+142    	; 0x990 <__stack+0x91>
		}

	} else if ( (encA->getEvent() == EV_OPEN) && (eventRate != 1)) {
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	fc 01       	movw	r30, r24
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	49 f4       	brne	.+18     	; 0x926 <__stack+0x27>
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	9b 81       	ldd	r25, Y+3	; 0x03
     918:	fc 01       	movw	r30, r24
     91a:	85 85       	ldd	r24, Z+13	; 0x0d
     91c:	96 85       	ldd	r25, Z+14	; 0x0e
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	11 f0       	breq	.+4      	; 0x926 <__stack+0x27>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0x29>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	88 23       	and	r24, r24
     92a:	79 f0       	breq	.+30     	; 0x94a <__stack+0x4b>
		if (encB->isClosed()) {
     92c:	8a 81       	ldd	r24, Y+2	; 0x02
     92e:	9b 81       	ldd	r25, Y+3	; 0x03
     930:	fc 01       	movw	r30, r24
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	95 81       	ldd	r25, Z+5	; 0x05
     936:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     93a:	88 23       	and	r24, r24
     93c:	19 f0       	breq	.+6      	; 0x944 <__stack+0x45>
			nxtEvent = ENC_CW_EVENT;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	89 83       	std	Y+1, r24	; 0x01
     942:	26 c0       	rjmp	.+76     	; 0x990 <__stack+0x91>
		} else {
			nxtEvent = ENC_CCW_EVENT;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	23 c0       	rjmp	.+70     	; 0x990 <__stack+0x91>
		}

	} else if ( (encB->getEvent() == EV_OPEN) && (eventRate == 4) ) {
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	9b 81       	ldd	r25, Y+3	; 0x03
     94e:	fc 01       	movw	r30, r24
     950:	84 81       	ldd	r24, Z+4	; 0x04
     952:	95 81       	ldd	r25, Z+5	; 0x05
     954:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	49 f4       	brne	.+18     	; 0x96e <__stack+0x6f>
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	9b 81       	ldd	r25, Y+3	; 0x03
     960:	fc 01       	movw	r30, r24
     962:	85 85       	ldd	r24, Z+13	; 0x0d
     964:	96 85       	ldd	r25, Z+14	; 0x0e
     966:	04 97       	sbiw	r24, 0x04	; 4
     968:	11 f4       	brne	.+4      	; 0x96e <__stack+0x6f>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	01 c0       	rjmp	.+2      	; 0x970 <__stack+0x71>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	88 23       	and	r24, r24
     972:	71 f0       	breq	.+28     	; 0x990 <__stack+0x91>
		if (encA->isClosed()) {
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	fc 01       	movw	r30, r24
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN2Sw8isClosedEv>
     982:	88 23       	and	r24, r24
     984:	19 f0       	breq	.+6      	; 0x98c <__stack+0x8d>
			nxtEvent = ENC_CCW_EVENT;
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
		} else {
			nxtEvent = ENC_CW_EVENT;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 83       	std	Y+1, r24	; 0x01
		}

	}

	encA->clearEvent();
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	9b 81       	ldd	r25, Y+3	; 0x03
     994:	fc 01       	movw	r30, r24
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	93 81       	ldd	r25, Z+3	; 0x03
     99a:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN2Sw10clearEventEv>
	encB->clearEvent();
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	fc 01       	movw	r30, r24
     9a4:	84 81       	ldd	r24, Z+4	; 0x04
     9a6:	95 81       	ldd	r25, Z+5	; 0x05
     9a8:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN2Sw10clearEventEv>

	//
	// process new event if any
	//
	if (nxtEvent == ENC_NO_EVENT) {
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	88 23       	and	r24, r24
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <__stack+0xb5>
		return;
     9b2:	42 c0       	rjmp	.+132    	; 0xa38 <__stack+0x139>
	} else if (nxtEvent == ENC_CW_EVENT) {		// handle overrun
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	01 f5       	brne	.+64     	; 0x9fa <__stack+0xfb>
		if (nxtEvent == lastEvent) {
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	9b 81       	ldd	r25, Y+3	; 0x03
     9be:	fc 01       	movw	r30, r24
     9c0:	90 85       	ldd	r25, Z+8	; 0x08
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	98 17       	cp	r25, r24
     9c6:	71 f4       	brne	.+28     	; 0x9e4 <__stack+0xe5>
			missedCwCount++;
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	9b 81       	ldd	r25, Y+3	; 0x03
     9cc:	fc 01       	movw	r30, r24
     9ce:	81 85       	ldd	r24, Z+9	; 0x09
     9d0:	92 85       	ldd	r25, Z+10	; 0x0a
     9d2:	9c 01       	movw	r18, r24
     9d4:	2f 5f       	subi	r18, 0xFF	; 255
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	fc 01       	movw	r30, r24
     9de:	32 87       	std	Z+10, r19	; 0x0a
     9e0:	21 87       	std	Z+9, r18	; 0x09
     9e2:	2a c0       	rjmp	.+84     	; 0xa38 <__stack+0x139>
		} else {
			missedCwCount = 0;
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	fc 01       	movw	r30, r24
     9ea:	12 86       	std	Z+10, r1	; 0x0a
     9ec:	11 86       	std	Z+9, r1	; 0x09
			lastEvent = nxtEvent;
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 87       	std	Z+8, r18	; 0x08
     9f8:	1f c0       	rjmp	.+62     	; 0xa38 <__stack+0x139>
		}
	} else {
		if (nxtEvent == lastEvent) {
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	9b 81       	ldd	r25, Y+3	; 0x03
     9fe:	fc 01       	movw	r30, r24
     a00:	90 85       	ldd	r25, Z+8	; 0x08
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	98 17       	cp	r25, r24
     a06:	71 f4       	brne	.+28     	; 0xa24 <__stack+0x125>
			missedCcwCount++;
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	fc 01       	movw	r30, r24
     a0e:	83 85       	ldd	r24, Z+11	; 0x0b
     a10:	94 85       	ldd	r25, Z+12	; 0x0c
     a12:	9c 01       	movw	r18, r24
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	9b 81       	ldd	r25, Y+3	; 0x03
     a1c:	fc 01       	movw	r30, r24
     a1e:	34 87       	std	Z+12, r19	; 0x0c
     a20:	23 87       	std	Z+11, r18	; 0x0b
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <__stack+0x139>
		} else {
			missedCcwCount = 0;
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	9b 81       	ldd	r25, Y+3	; 0x03
     a28:	fc 01       	movw	r30, r24
     a2a:	14 86       	std	Z+12, r1	; 0x0c
     a2c:	13 86       	std	Z+11, r1	; 0x0b
			lastEvent = nxtEvent;
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	9b 81       	ldd	r25, Y+3	; 0x03
     a32:	29 81       	ldd	r18, Y+1	; 0x01
     a34:	fc 01       	movw	r30, r24
     a36:	20 87       	std	Z+8, r18	; 0x08
		}
	}
}
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <_ZN7Encoder8hasEventEv>:



bool Encoder::hasEvent(void) {
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <_ZN7Encoder8hasEventEv+0x6>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
	return (lastEvent != ENC_NO_EVENT);
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	fc 01       	movw	r30, r24
     a58:	90 85       	ldd	r25, Z+8	; 0x08
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	99 23       	and	r25, r25
     a5e:	09 f4       	brne	.+2      	; 0xa62 <_ZN7Encoder8hasEventEv+0x1e>
     a60:	80 e0       	ldi	r24, 0x00	; 0
}
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <_ZN7Encoder8getEventEv>:


encEvent Encoder::getEvent(void) {
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <_ZN7Encoder8getEventEv+0x6>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	89 83       	std	Y+1, r24	; 0x01
	return lastEvent;
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	fc 01       	movw	r30, r24
     a80:	80 85       	ldd	r24, Z+8	; 0x08
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <_ZN7Encoder10clearEventEv>:


void Encoder::clearEvent(void) {
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	00 d0       	rcall	.+0      	; 0xa92 <_ZN7Encoder10clearEventEv+0x6>
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	9a 83       	std	Y+2, r25	; 0x02
     a98:	89 83       	std	Y+1, r24	; 0x01
	lastEvent = ENC_NO_EVENT;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	fc 01       	movw	r30, r24
     aa0:	10 86       	std	Z+8, r1	; 0x08
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <_ZN7Encoder8callbackEv>:


void Encoder::callback(void) {
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <_ZN7Encoder8callbackEv+0x6>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	89 83       	std	Y+1, r24	; 0x01
	update();
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	b9 de       	rcall	.-654    	; 0x832 <_ZN7Encoder6updateEv>
}
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <_ZN7Encoder16getMissedCwCountEv>:


int Encoder::getMissedCwCount(void) {
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <_ZN7Encoder16getMissedCwCountEv+0x6>
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <_ZN7Encoder16getMissedCwCountEv+0x8>
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	8b 83       	std	Y+3, r24	; 0x03
	int result = missedCwCount;
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	fc 01       	movw	r30, r24
     ae0:	81 85       	ldd	r24, Z+9	; 0x09
     ae2:	92 85       	ldd	r25, Z+10	; 0x0a
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
	missedCwCount = 0;
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	fc 01       	movw	r30, r24
     aee:	12 86       	std	Z+10, r1	; 0x0a
     af0:	11 86       	std	Z+9, r1	; 0x09
	return result;
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <_ZN7Encoder17getMissedCcwCountEv>:


int Encoder::getMissedCcwCount(void) {
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <_ZN7Encoder17getMissedCcwCountEv+0x6>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <_ZN7Encoder17getMissedCcwCountEv+0x8>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
	int result = missedCcwCount;
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	fc 01       	movw	r30, r24
     b1a:	83 85       	ldd	r24, Z+11	; 0x0b
     b1c:	94 85       	ldd	r25, Z+12	; 0x0c
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
	missedCcwCount = 0;
     b22:	8b 81       	ldd	r24, Y+3	; 0x03
     b24:	9c 81       	ldd	r25, Y+4	; 0x04
     b26:	fc 01       	movw	r30, r24
     b28:	14 86       	std	Z+12, r1	; 0x0c
     b2a:	13 86       	std	Z+11, r1	; 0x0b
	return result;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <_ZN7Encoder12setEventRateEh>:

void Encoder::setEventRate(uint8_t r) {
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	00 d0       	rcall	.+0      	; 0xb44 <_ZN7Encoder12setEventRateEh+0x6>
     b44:	1f 92       	push	r1
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	6b 83       	std	Y+3, r22	; 0x03
	eventRate = r;
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	9a 81       	ldd	r25, Y+2	; 0x02
     b5a:	fc 01       	movw	r30, r24
     b5c:	36 87       	std	Z+14, r19	; 0x0e
     b5e:	25 87       	std	Z+13, r18	; 0x0d
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <__vector_7>:
volatile uint16_t Clock::oneshotTimeLeft[NUM_SINGLE_TASKS];

//
// tick isr
//
ISR( TIMER2_COMPA_vect ) {
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
  Clock::tick();
     b98:	14 d0       	rcall	.+40     	; 0xbc2 <_ZN5Clock4tickEv>
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <_ZN5Clock4tickEv>:


//
// set the tic event count
//
void Clock::tick(void) {
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <_ZN5Clock4tickEv+0x6>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <_ZN5Clock4tickEv+0x8>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
  sysclock++;;
     bce:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__data_end>
     bd2:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <__data_end+0x1>
     bd6:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <__data_end+0x2>
     bda:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <__data_end+0x3>
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	a1 1d       	adc	r26, r1
     be2:	b1 1d       	adc	r27, r1
     be4:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <__data_end>
     be8:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <__data_end+0x1>
     bec:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__data_end+0x2>
     bf0:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__data_end+0x3>
  if (delayTime) {
     bf4:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN5Clock9delayTimeE>
     bf8:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZN5Clock9delayTimeE+0x1>
     bfc:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <_ZN5Clock9delayTimeE+0x2>
     c00:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <_ZN5Clock9delayTimeE+0x3>
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	89 2b       	or	r24, r25
     c08:	8a 2b       	or	r24, r26
     c0a:	8b 2b       	or	r24, r27
     c0c:	09 f4       	brne	.+2      	; 0xc10 <_ZN5Clock4tickEv+0x4e>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	22 23       	and	r18, r18
     c12:	99 f0       	breq	.+38     	; 0xc3a <_ZN5Clock4tickEv+0x78>
    delayTime--;
     c14:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN5Clock9delayTimeE>
     c18:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZN5Clock9delayTimeE+0x1>
     c1c:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <_ZN5Clock9delayTimeE+0x2>
     c20:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <_ZN5Clock9delayTimeE+0x3>
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	a1 09       	sbc	r26, r1
     c28:	b1 09       	sbc	r27, r1
     c2a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZN5Clock9delayTimeE>
     c2e:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZN5Clock9delayTimeE+0x1>
     c32:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <_ZN5Clock9delayTimeE+0x2>
     c36:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <_ZN5Clock9delayTimeE+0x3>
  }

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     c3a:	1a 82       	std	Y+2, r1	; 0x02
     c3c:	19 82       	std	Y+1, r1	; 0x01
     c3e:	57 c0       	rjmp	.+174    	; 0xcee <_ZN5Clock4tickEv+0x12c>
		if (periodicTasks[i]) {
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	85 5e       	subi	r24, 0xE5	; 229
     c4a:	9c 4f       	sbci	r25, 0xFC	; 252
     c4c:	fc 01       	movw	r30, r24
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	89 2b       	or	r24, r25
     c54:	09 f4       	brne	.+2      	; 0xc58 <_ZN5Clock4tickEv+0x96>
     c56:	46 c0       	rjmp	.+140    	; 0xce4 <_ZN5Clock4tickEv+0x122>
			if (--periodicTimeLeft[i]) {
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	81 5c       	subi	r24, 0xC1	; 193
     c62:	9c 4f       	sbci	r25, 0xFC	; 252
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	29 81       	ldd	r18, Y+1	; 0x01
     c6e:	3a 81       	ldd	r19, Y+2	; 0x02
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	21 5c       	subi	r18, 0xC1	; 193
     c76:	3c 4f       	sbci	r19, 0xFC	; 252
     c78:	f9 01       	movw	r30, r18
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	80 83       	st	Z, r24
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	89 2b       	or	r24, r25
     c82:	09 f4       	brne	.+2      	; 0xc86 <_ZN5Clock4tickEv+0xc4>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	22 23       	and	r18, r18
     c88:	09 f0       	breq	.+2      	; 0xc8c <_ZN5Clock4tickEv+0xca>
				continue;
     c8a:	2c c0       	rjmp	.+88     	; 0xce4 <_ZN5Clock4tickEv+0x122>
			}
			periodicTimeLeft[i] = reloadTime[i];
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	81 5d       	subi	r24, 0xD1	; 209
     c96:	9c 4f       	sbci	r25, 0xFC	; 252
     c98:	fc 01       	movw	r30, r24
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	81 5c       	subi	r24, 0xC1	; 193
     ca8:	9c 4f       	sbci	r25, 0xFC	; 252
     caa:	fc 01       	movw	r30, r24
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18
				periodicTasks[i]->callback();
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	85 5e       	subi	r24, 0xE5	; 229
     cba:	9c 4f       	sbci	r25, 0xFC	; 252
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	fc 01       	movw	r30, r24
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	85 5e       	subi	r24, 0xE5	; 229
     cd8:	9c 4f       	sbci	r25, 0xFC	; 252
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	f9 01       	movw	r30, r18
     ce2:	09 95       	icall
  sysclock++;;
  if (delayTime) {
    delayTime--;
  }

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	08 97       	sbiw	r24, 0x08	; 8
     cf4:	0c f4       	brge	.+2      	; 0xcf8 <_ZN5Clock4tickEv+0x136>
     cf6:	a4 cf       	rjmp	.-184    	; 0xc40 <_ZN5Clock4tickEv+0x7e>
			periodicTimeLeft[i] = reloadTime[i];
				periodicTasks[i]->callback();
		}
	}

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     cf8:	1c 82       	std	Y+4, r1	; 0x04
     cfa:	1b 82       	std	Y+3, r1	; 0x03
     cfc:	4d c0       	rjmp	.+154    	; 0xd98 <_ZN5Clock4tickEv+0x1d6>
		if (singleTasks[i]) {
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	85 5d       	subi	r24, 0xD5	; 213
     d08:	9c 4f       	sbci	r25, 0xFC	; 252
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	89 2b       	or	r24, r25
     d12:	e9 f1       	breq	.+122    	; 0xd8e <_ZN5Clock4tickEv+0x1cc>
			if (--oneshotTimeLeft[i]) {
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	81 5b       	subi	r24, 0xB1	; 177
     d1e:	9c 4f       	sbci	r25, 0xFC	; 252
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	2b 81       	ldd	r18, Y+3	; 0x03
     d2a:	3c 81       	ldd	r19, Y+4	; 0x04
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	21 5b       	subi	r18, 0xB1	; 177
     d32:	3c 4f       	sbci	r19, 0xFC	; 252
     d34:	f9 01       	movw	r30, r18
     d36:	91 83       	std	Z+1, r25	; 0x01
     d38:	80 83       	st	Z, r24
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	89 2b       	or	r24, r25
     d3e:	09 f4       	brne	.+2      	; 0xd42 <_ZN5Clock4tickEv+0x180>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	22 23       	and	r18, r18
     d44:	09 f0       	breq	.+2      	; 0xd48 <_ZN5Clock4tickEv+0x186>
				continue;
     d46:	23 c0       	rjmp	.+70     	; 0xd8e <_ZN5Clock4tickEv+0x1cc>
			}
			singleTasks[i]->callback();
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	85 5d       	subi	r24, 0xD5	; 213
     d52:	9c 4f       	sbci	r25, 0xFC	; 252
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	fc 01       	movw	r30, r24
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	fc 01       	movw	r30, r24
     d62:	20 81       	ld	r18, Z
     d64:	31 81       	ldd	r19, Z+1	; 0x01
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	85 5d       	subi	r24, 0xD5	; 213
     d70:	9c 4f       	sbci	r25, 0xFC	; 252
     d72:	fc 01       	movw	r30, r24
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	f9 01       	movw	r30, r18
     d7a:	09 95       	icall
			singleTasks[i] = NULL;
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	85 5d       	subi	r24, 0xD5	; 213
     d86:	9c 4f       	sbci	r25, 0xFC	; 252
     d88:	fc 01       	movw	r30, r24
     d8a:	11 82       	std	Z+1, r1	; 0x01
     d8c:	10 82       	st	Z, r1
			periodicTimeLeft[i] = reloadTime[i];
				periodicTasks[i]->callback();
		}
	}

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	02 97       	sbiw	r24, 0x02	; 2
     d9e:	0c f4       	brge	.+2      	; 0xda2 <_ZN5Clock4tickEv+0x1e0>
     da0:	ae cf       	rjmp	.-164    	; 0xcfe <_ZN5Clock4tickEv+0x13c>
			singleTasks[i]->callback();
			singleTasks[i] = NULL;
		}
	}

}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <_ZN5Clock5delayEm>:


// delay time in 
void Clock::delay(uint32_t dly) {
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <_ZN5Clock5delayEm+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <_ZN5Clock5delayEm+0x8>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	69 83       	std	Y+1, r22	; 0x01
     dbe:	7a 83       	std	Y+2, r23	; 0x02
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	9c 83       	std	Y+4, r25	; 0x04
  Clock::delayTime = dly;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	ab 81       	ldd	r26, Y+3	; 0x03
     dca:	bc 81       	ldd	r27, Y+4	; 0x04
     dcc:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZN5Clock9delayTimeE>
     dd0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZN5Clock9delayTimeE+0x1>
     dd4:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <_ZN5Clock9delayTimeE+0x2>
     dd8:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <_ZN5Clock9delayTimeE+0x3>
  while (Clock::delayTime);
     ddc:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN5Clock9delayTimeE>
     de0:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZN5Clock9delayTimeE+0x1>
     de4:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <_ZN5Clock9delayTimeE+0x2>
     de8:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <_ZN5Clock9delayTimeE+0x3>
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	89 2b       	or	r24, r25
     df0:	8a 2b       	or	r24, r26
     df2:	8b 2b       	or	r24, r27
     df4:	09 f4       	brne	.+2      	; 0xdf8 <_ZN5Clock5delayEm+0x48>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	22 23       	and	r18, r18
     dfa:	81 f7       	brne	.-32     	; 0xddc <_ZN5Clock5delayEm+0x2c>
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <_ZN5Clock16registerPeriodicEP8Callbackj>:


//
// returns 0 on failure, handle on success
//
int Clock::registerPeriodic(Callback *cb, uint16_t rt) {
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <_ZN5Clock16registerPeriodicEP8Callbackj+0x6>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <_ZN5Clock16registerPeriodicEP8Callbackj+0x8>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <_ZN5Clock16registerPeriodicEP8Callbackj+0xa>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
     e1c:	7e 83       	std	Y+6, r23	; 0x06
     e1e:	6d 83       	std	Y+5, r22	; 0x05

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     e20:	1a 82       	std	Y+2, r1	; 0x02
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	35 c0       	rjmp	.+106    	; 0xe90 <_ZN5Clock16registerPeriodicEP8Callbackj+0x86>
		if (!periodicTasks[i]) {
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	85 5e       	subi	r24, 0xE5	; 229
     e30:	9c 4f       	sbci	r25, 0xFC	; 252
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	89 2b       	or	r24, r25
     e3a:	29 f5       	brne	.+74     	; 0xe86 <_ZN5Clock16registerPeriodicEP8Callbackj+0x7c>
			periodicTasks[i] = cb;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	85 5e       	subi	r24, 0xE5	; 229
     e46:	9c 4f       	sbci	r25, 0xFC	; 252
     e48:	2b 81       	ldd	r18, Y+3	; 0x03
     e4a:	3c 81       	ldd	r19, Y+4	; 0x04
     e4c:	fc 01       	movw	r30, r24
     e4e:	31 83       	std	Z+1, r19	; 0x01
     e50:	20 83       	st	Z, r18
			reloadTime[i] = rt;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	81 5d       	subi	r24, 0xD1	; 209
     e5c:	9c 4f       	sbci	r25, 0xFC	; 252
     e5e:	2d 81       	ldd	r18, Y+5	; 0x05
     e60:	3e 81       	ldd	r19, Y+6	; 0x06
     e62:	fc 01       	movw	r30, r24
     e64:	31 83       	std	Z+1, r19	; 0x01
     e66:	20 83       	st	Z, r18
			periodicTimeLeft[i] = rt;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	81 5c       	subi	r24, 0xC1	; 193
     e72:	9c 4f       	sbci	r25, 0xFC	; 252
     e74:	2d 81       	ldd	r18, Y+5	; 0x05
     e76:	3e 81       	ldd	r19, Y+6	; 0x06
     e78:	fc 01       	movw	r30, r24
     e7a:	31 83       	std	Z+1, r19	; 0x01
     e7c:	20 83       	st	Z, r18
			return (i+1);
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0b c0       	rjmp	.+22     	; 0xe9c <_ZN5Clock16registerPeriodicEP8Callbackj+0x92>
//
// returns 0 on failure, handle on success
//
int Clock::registerPeriodic(Callback *cb, uint16_t rt) {

	for (int i=0; i < NUM_PERIODIC_TASKS; i++) {
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	08 97       	sbiw	r24, 0x08	; 8
     e96:	3c f2       	brlt	.-114    	; 0xe26 <_ZN5Clock16registerPeriodicEP8Callbackj+0x1c>
			reloadTime[i] = rt;
			periodicTimeLeft[i] = rt;
			return (i+1);
		}
	}
	return 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
}
     e9c:	26 96       	adiw	r28, 0x06	; 6
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <_ZN5Clock15registerOneshotEP8Callbackj>:

//
// returns 0 on failure, handle on success
//
int Clock::registerOneshot(Callback *cb, uint16_t rt) {
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <_ZN5Clock15registerOneshotEP8Callbackj+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <_ZN5Clock15registerOneshotEP8Callbackj+0x8>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <_ZN5Clock15registerOneshotEP8Callbackj+0xa>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
     ec0:	7e 83       	std	Y+6, r23	; 0x06
     ec2:	6d 83       	std	Y+5, r22	; 0x05

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     ec4:	1a 82       	std	Y+2, r1	; 0x02
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <_ZN5Clock15registerOneshotEP8Callbackj+0x70>
		if (!singleTasks[i]) {
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	85 5d       	subi	r24, 0xD5	; 213
     ed4:	9c 4f       	sbci	r25, 0xFC	; 252
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	89 2b       	or	r24, r25
     ede:	d1 f4       	brne	.+52     	; 0xf14 <_ZN5Clock15registerOneshotEP8Callbackj+0x66>
			singleTasks[i] = cb;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	85 5d       	subi	r24, 0xD5	; 213
     eea:	9c 4f       	sbci	r25, 0xFC	; 252
     eec:	2b 81       	ldd	r18, Y+3	; 0x03
     eee:	3c 81       	ldd	r19, Y+4	; 0x04
     ef0:	fc 01       	movw	r30, r24
     ef2:	31 83       	std	Z+1, r19	; 0x01
     ef4:	20 83       	st	Z, r18
			oneshotTimeLeft[i] = rt;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	81 5b       	subi	r24, 0xB1	; 177
     f00:	9c 4f       	sbci	r25, 0xFC	; 252
     f02:	2d 81       	ldd	r18, Y+5	; 0x05
     f04:	3e 81       	ldd	r19, Y+6	; 0x06
     f06:	fc 01       	movw	r30, r24
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
			return (i+1);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <_ZN5Clock15registerOneshotEP8Callbackj+0x7c>
//
// returns 0 on failure, handle on success
//
int Clock::registerOneshot(Callback *cb, uint16_t rt) {

	for (int i=0; i < NUM_SINGLE_TASKS; i++) {
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	02 97       	sbiw	r24, 0x02	; 2
     f24:	94 f2       	brlt	.-92     	; 0xeca <_ZN5Clock15registerOneshotEP8Callbackj+0x1c>
			singleTasks[i] = cb;
			oneshotTimeLeft[i] = rt;
			return (i+1);
		}
	}
	return 0;
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
}
     f2a:	26 96       	adiw	r28, 0x06	; 6
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <_ZN5Clock13cancelOneshotEi>:
		periodicTasks[indx-1] = NULL;
	}
}


void Clock::cancelOneshot(int indx) {
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	00 d0       	rcall	.+0      	; 0xf42 <_ZN5Clock13cancelOneshotEi+0x6>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	if (!indx) {
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	89 2b       	or	r24, r25
     f50:	09 f4       	brne	.+2      	; 0xf54 <_ZN5Clock13cancelOneshotEi+0x18>
		return;
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <_ZN5Clock13cancelOneshotEi+0x34>
	}
	if (indx <= NUM_SINGLE_TASKS) {
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	03 97       	sbiw	r24, 0x03	; 3
     f5a:	54 f4       	brge	.+20     	; 0xf70 <_ZN5Clock13cancelOneshotEi+0x34>
		singleTasks[indx-1] = NULL;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	85 5d       	subi	r24, 0xD5	; 213
     f68:	9c 4f       	sbci	r25, 0xFC	; 252
     f6a:	fc 01       	movw	r30, r24
     f6c:	11 82       	std	Z+1, r1	; 0x01
     f6e:	10 82       	st	Z, r1
	}
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <_ZN5ClockC1Ev>:


//
// constructor
//
Clock::Clock(void) {
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <_ZN5ClockC1Ev+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_ZN5ClockC1Ev+0x8>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <_ZN5ClockC1Ev+0xa>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9e 83       	std	Y+6, r25	; 0x06
     f8a:	8d 83       	std	Y+5, r24	; 0x05
  cli();
     f8c:	f8 94       	cli
  TCNT1H = 0;
  TCNT1L = 0;
  OCR1A =  OCR1A_DIVISOR;               // divide by 20000, 10 msec, do this last!!
  TIMSK1 = (1 << OCIE1A);               // enable compare register 1 int
#else
  TCCR2A  = (1 << WGM21);                          // wgm10 = 2, CTC ,pde, no outputs
     f8e:	80 eb       	ldi	r24, 0xB0	; 176
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
  TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);   // clock divide by 1024 WGM22 = 0, CTC mode
     f98:	81 eb       	ldi	r24, 0xB1	; 177
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	27 e0       	ldi	r18, 0x07	; 7
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
  TCNT2 = 0;
     fa2:	82 eb       	ldi	r24, 0xB2	; 178
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	10 82       	st	Z, r1
  OCR2A =  OCR2A_DIVISOR;               // divide by 2000, 1 msec, do this last!!
     faa:	83 eb       	ldi	r24, 0xB3	; 179
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	2d e9       	ldi	r18, 0x9D	; 157
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
  TIMSK2 = (1 << OCIE2A);               // enable compare register 1 int
     fb4:	80 e7       	ldi	r24, 0x70	; 112
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	22 e0       	ldi	r18, 0x02	; 2
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
#endif
  sysclock = 0;
     fbe:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <__data_end>
     fc2:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__data_end+0x1>
     fc6:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <__data_end+0x2>
     fca:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <__data_end+0x3>
  count = 0;
     fce:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN5Clock5countE>

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     fd2:	1a 82       	std	Y+2, r1	; 0x02
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <_ZN5ClockC1Ev+0x7a>
		periodicTasks[i] = NULL;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	85 5e       	subi	r24, 0xE5	; 229
     fe2:	9c 4f       	sbci	r25, 0xFC	; 252
     fe4:	fc 01       	movw	r30, r24
     fe6:	11 82       	std	Z+1, r1	; 0x01
     fe8:	10 82       	st	Z, r1
  TIMSK2 = (1 << OCIE2A);               // enable compare register 1 int
#endif
  sysclock = 0;
  count = 0;

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	08 97       	sbiw	r24, 0x08	; 8
     ffa:	74 f3       	brlt	.-36     	; 0xfd8 <_ZN5ClockC1Ev+0x5e>
		periodicTasks[i] = NULL;
	}

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
     ffc:	1c 82       	std	Y+4, r1	; 0x04
     ffe:	1b 82       	std	Y+3, r1	; 0x03
    1000:	0e c0       	rjmp	.+28     	; 0x101e <_ZN5ClockC1Ev+0xa4>
		singleTasks[i] = NULL;
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	85 5d       	subi	r24, 0xD5	; 213
    100c:	9c 4f       	sbci	r25, 0xFC	; 252
    100e:	fc 01       	movw	r30, r24
    1010:	11 82       	std	Z+1, r1	; 0x01
    1012:	10 82       	st	Z, r1

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
		periodicTasks[i] = NULL;
	}

	for (int i=0; i< NUM_PERIODIC_TASKS; i++) {
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 83       	std	Y+3, r24	; 0x03
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	08 97       	sbiw	r24, 0x08	; 8
    1024:	74 f3       	brlt	.-36     	; 0x1002 <_ZN5ClockC1Ev+0x88>
		singleTasks[i] = NULL;
	}

  sei();
    1026:	78 94       	sei
}
    1028:	26 96       	adiw	r28, 0x06	; 6
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <_Z7usecDlyi>:

Clock::~Clock(void) {
}


void usecDly(int x) {
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_Z7usecDlyi+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	while (x--);
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	9c 01       	movw	r18, r24
    104e:	21 50       	subi	r18, 0x01	; 1
    1050:	31 09       	sbc	r19, r1
    1052:	3a 83       	std	Y+2, r19	; 0x02
    1054:	29 83       	std	Y+1, r18	; 0x01
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	89 2b       	or	r24, r25
    105a:	09 f4       	brne	.+2      	; 0x105e <_Z7usecDlyi+0x24>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	22 23       	and	r18, r18
    1060:	99 f7       	brne	.-26     	; 0x1048 <_Z7usecDlyi+0xe>
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <DdsInit>:

//
// DDS uses bits PB0 - PB2, PB5
//

void DdsInit(void) {
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	1f 92       	push	r1
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62

volatile uint8_t reg;

	reg = DDRB;
    1076:	84 e2       	ldi	r24, 0x24	; 36
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	89 83       	std	Y+1, r24	; 0x01
	reg |= DDS_OUT_BITS;		// set Led pin to output
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	87 62       	ori	r24, 0x27	; 39
    1084:	89 83       	std	Y+1, r24	; 0x01
	DDRB = reg;
    1086:	84 e2       	ldi	r24, 0x24	; 36
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	29 81       	ldd	r18, Y+1	; 0x01
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18

	reg = PORTB;
    1090:	85 e2       	ldi	r24, 0x25	; 37
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	80 81       	ld	r24, Z
    1098:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~DDS_OUT_BITS;		
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 7d       	andi	r24, 0xD8	; 216
    109e:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    10a0:	85 e2       	ldi	r24, 0x25	; 37
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
	Clock::delay(50);
	reg &= ~DDS_RST;
	PORTB = reg;
#endif

	reg |= W_CLK;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	81 60       	ori	r24, 0x01	; 1
    10ae:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    10b0:	85 e2       	ldi	r24, 0x25	; 37
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18

	reg &= ~ W_CLK;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    10c0:	85 e2       	ldi	r24, 0x25	; 37
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	29 81       	ldd	r18, Y+1	; 0x01
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18

	reg |= FQUD_CLK;     // make sure we are in serial mode
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	29 81       	ldd	r18, Y+1	; 0x01
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
	
	reg &= ~FQUD_CLK;    
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	8d 7f       	andi	r24, 0xFD	; 253
    10de:	89 83       	std	Y+1, r24	; 0x01
	PORTB = reg;
    10e0:	85 e2       	ldi	r24, 0x25	; 37
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	29 81       	ldd	r18, Y+1	; 0x01
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
	
}
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <dds>:
// increment of 0x0E56043B.
// 



void dds(float fout) {
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	2f 97       	sbiw	r28, 0x0f	; 15
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	6c 87       	std	Y+12, r22	; 0x0c
    1108:	7d 87       	std	Y+13, r23	; 0x0d
    110a:	8e 87       	std	Y+14, r24	; 0x0e
    110c:	9f 87       	std	Y+15, r25	; 0x0f
float n;
uint32_t phaseInc;
int i;
volatile uint8_t temp;

	cli();
    110e:	f8 94       	cli
//
// the ports need to be protected with a semaphore if we
// are going to make this code multi-tasking
//
	temp = PORTB;
    1110:	85 e2       	ldi	r24, 0x25	; 37
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	fc 01       	movw	r30, r24
    1116:	80 81       	ld	r24, Z
    1118:	8b 87       	std	Y+11, r24	; 0x0b
	temp &= ~DDS_OUT_BITS;
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	88 7d       	andi	r24, 0xD8	; 216
    111e:	8b 87       	std	Y+11, r24	; 0x0b
	PORTB = temp;
    1120:	85 e2       	ldi	r24, 0x25	; 37
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	2b 85       	ldd	r18, Y+11	; 0x0b
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
    112a:	2f e5       	ldi	r18, 0x5F	; 95
    112c:	30 e7       	ldi	r19, 0x70	; 112
    112e:	49 e0       	ldi	r20, 0x09	; 9
    1130:	52 e4       	ldi	r21, 0x42	; 66
    1132:	6c 85       	ldd	r22, Y+12	; 0x0c
    1134:	7d 85       	ldd	r23, Y+13	; 0x0d
    1136:	8e 85       	ldd	r24, Y+14	; 0x0e
    1138:	9f 85       	ldd	r25, Y+15	; 0x0f
    113a:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8f 83       	std	Y+7, r24	; 0x07
    1144:	98 87       	std	Y+8, r25	; 0x08
    1146:	a9 87       	std	Y+9, r26	; 0x09
    1148:	ba 87       	std	Y+10, r27	; 0x0a
	phaseInc = (uint32_t)n;
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	ab 83       	std	Y+3, r26	; 0x03
    1160:	bc 83       	std	Y+4, r27	; 0x04

	for (i=0;i<32;i++) {
    1162:	1e 82       	std	Y+6, r1	; 0x06
    1164:	1d 82       	std	Y+5, r1	; 0x05
    1166:	39 c0       	rjmp	.+114    	; 0x11da <dds+0xe8>

		if (phaseInc & 0x01) {
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	ab 81       	ldd	r26, Y+3	; 0x03
    116e:	bc 81       	ldd	r27, Y+4	; 0x04
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	99 27       	eor	r25, r25
    1174:	aa 27       	eor	r26, r26
    1176:	bb 27       	eor	r27, r27
    1178:	89 2b       	or	r24, r25
    117a:	8a 2b       	or	r24, r26
    117c:	8b 2b       	or	r24, r27
    117e:	21 f0       	breq	.+8      	; 0x1188 <dds+0x96>
			temp |= SD;
    1180:	8b 85       	ldd	r24, Y+11	; 0x0b
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	03 c0       	rjmp	.+6      	; 0x118e <dds+0x9c>
    } else {
			temp &= ~SD;
    1188:	8b 85       	ldd	r24, Y+11	; 0x0b
    118a:	8b 7f       	andi	r24, 0xFB	; 251
    118c:	8b 87       	std	Y+11, r24	; 0x0b
		}            
		PORTB = temp;								// data bit
    118e:	85 e2       	ldi	r24, 0x25	; 37
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	2b 85       	ldd	r18, Y+11	; 0x0b
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18

		temp |= W_CLK;					// set clk
    1198:	8b 85       	ldd	r24, Y+11	; 0x0b
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	8b 87       	std	Y+11, r24	; 0x0b
		PORTB = temp;
    119e:	85 e2       	ldi	r24, 0x25	; 37
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
		temp &= ~W_CLK;					// clear clk
    11a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11aa:	8e 7f       	andi	r24, 0xFE	; 254
    11ac:	8b 87       	std	Y+11, r24	; 0x0b
		PORTB = temp;	
    11ae:	85 e2       	ldi	r24, 0x25	; 37
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	ab 81       	ldd	r26, Y+3	; 0x03
    11be:	bc 81       	ldd	r27, Y+4	; 0x04
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	ab 83       	std	Y+3, r26	; 0x03
    11ce:	bc 83       	std	Y+4, r27	; 0x04
	PORTB = temp;

	n = fout * (float)CNTS_PER_HZ;		// phase change per clock
	phaseInc = (uint32_t)n;

	for (i=0;i<32;i++) {
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	80 97       	sbiw	r24, 0x20	; 32
    11e0:	1c f2       	brlt	.-122    	; 0x1168 <dds+0x76>
		PORTB = temp;	

		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
    11e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	8b 87       	std	Y+11, r24	; 0x0b
	PORTB = temp;								// data bit
    11e8:	85 e2       	ldi	r24, 0x25	; 37
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
	for (i=0;i<8;i++) {
    11f2:	1e 82       	std	Y+6, r1	; 0x06
    11f4:	1d 82       	std	Y+5, r1	; 0x05
    11f6:	15 c0       	rjmp	.+42     	; 0x1222 <dds+0x130>
		temp |= W_CLK;					// set clk
    11f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	8b 87       	std	Y+11, r24	; 0x0b
		PORTB = temp;
    11fe:	85 e2       	ldi	r24, 0x25	; 37
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	2b 85       	ldd	r18, Y+11	; 0x0b
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
		temp &= ~W_CLK;					// clear clk
    1208:	8b 85       	ldd	r24, Y+11	; 0x0b
    120a:	8e 7f       	andi	r24, 0xFE	; 254
    120c:	8b 87       	std	Y+11, r24	; 0x0b
		PORTB = temp;
    120e:	85 e2       	ldi	r24, 0x25	; 37
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	2b 85       	ldd	r18, Y+11	; 0x0b
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
		phaseInc = phaseInc >> 1;		// shift next data bit to msb
	}

	temp &= ~SD;
	PORTB = temp;								// data bit
	for (i=0;i<8;i++) {
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	08 97       	sbiw	r24, 0x08	; 8
    1228:	3c f3       	brlt	.-50     	; 0x11f8 <dds+0x106>
		temp &= ~W_CLK;					// clear clk
		PORTB = temp;

	}

	temp |= FQUD_CLK;            // Load the phase accumulator
    122a:	8b 85       	ldd	r24, Y+11	; 0x0b
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8b 87       	std	Y+11, r24	; 0x0b
	PORTB = temp;
    1230:	85 e2       	ldi	r24, 0x25	; 37
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	2b 85       	ldd	r18, Y+11	; 0x0b
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18

	temp &= ~FQUD_CLK;            // transfer shift reg to phase accumulator
    123a:	8b 85       	ldd	r24, Y+11	; 0x0b
    123c:	8d 7f       	andi	r24, 0xFD	; 253
    123e:	8b 87       	std	Y+11, r24	; 0x0b
	PORTB = temp;
    1240:	85 e2       	ldi	r24, 0x25	; 37
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	2b 85       	ldd	r18, Y+11	; 0x0b
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18

	sei();
    124a:	78 94       	sei
}
    124c:	2f 96       	adiw	r28, 0x0f	; 15
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Graphics::draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	c1 55       	subi	r28, 0x51	; 81
    1274:	d1 09       	sbc	r29, r1
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	fe 01       	movw	r30, r28
    1282:	e9 5b       	subi	r30, 0xB9	; 185
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	ce 01       	movw	r24, r28
    128c:	87 5b       	subi	r24, 0xB7	; 183
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	fc 01       	movw	r30, r24
    1292:	60 83       	st	Z, r22
    1294:	ce 01       	movw	r24, r28
    1296:	86 5b       	subi	r24, 0xB6	; 182
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	fc 01       	movw	r30, r24
    129c:	40 83       	st	Z, r20
    129e:	ce 01       	movw	r24, r28
    12a0:	85 5b       	subi	r24, 0xB5	; 181
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18
    12a8:	ce 01       	movw	r24, r28
    12aa:	84 5b       	subi	r24, 0xB4	; 180
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	fc 01       	movw	r30, r24
    12b0:	e0 82       	st	Z, r14
    12b2:	f1 82       	std	Z+1, r15	; 0x01
    12b4:	02 83       	std	Z+2, r16	; 0x02
    12b6:	ce 01       	movw	r24, r28
    12b8:	81 5b       	subi	r24, 0xB1	; 177
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	a0 82       	st	Z, r10
    12c0:	b1 82       	std	Z+1, r11	; 0x01
    12c2:	c2 82       	std	Z+2, r12	; 0x02
uint8_t xe; 
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 2 * 3];
uint8_t bufIndx;

  ys = line;
    12c4:	ce 01       	movw	r24, r28
    12c6:	86 5b       	subi	r24, 0xB6	; 182
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 83       	std	Y+7, r24	; 0x07
  xs = col;
    12d0:	ce 01       	movw	r24, r28
    12d2:	85 5b       	subi	r24, 0xB5	; 181
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	88 87       	std	Y+8, r24	; 0x08
  ye = ys + (2*CHAR_HEIGHT) - 1;
    12dc:	8f 81       	ldd	r24, Y+7	; 0x07
    12de:	89 5e       	subi	r24, 0xE9	; 233
    12e0:	89 87       	std	Y+9, r24	; 0x09
  xe = xs + (2*CHAR_WIDTH) -1; 
    12e2:	88 85       	ldd	r24, Y+8	; 0x08
    12e4:	81 5f       	subi	r24, 0xF1	; 241
    12e6:	8a 87       	std	Y+10, r24	; 0x0a
  cli();
    12e8:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
    12ea:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (xs & 0xff);
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (xe >> 8) & 0xff;
    12f0:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (xe & 0xff);
    12f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f4:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_COL_ADDR_SET);
    12f6:	8a e2       	ldi	r24, 0x2A	; 42
    12f8:	d4 d1       	rcall	.+936    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    12fa:	ce 01       	movw	r24, r28
    12fc:	47 96       	adiw	r24, 0x17	; 23
    12fe:	64 e0       	ldi	r22, 0x04	; 4
    1300:	ea d1       	rcall	.+980    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    1302:	b5 d3       	rcall	.+1898   	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = (ys >> 8) & 0xff;
    1304:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (ys & 0xff);
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (ye >> 8) & 0xff;
    130a:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (ye & 0xff);
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_ROW_ADDR_SET);
    1310:	8b e2       	ldi	r24, 0x2B	; 43
    1312:	c7 d1       	rcall	.+910    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    1314:	ce 01       	movw	r24, r28
    1316:	47 96       	adiw	r24, 0x17	; 23
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	dd d1       	rcall	.+954    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    131c:	a8 d3       	rcall	.+1872   	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>

  _getPixels(cc, pixBuf); 
    131e:	9e 01       	movw	r18, r28
    1320:	25 5f       	subi	r18, 0xF5	; 245
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	ce 01       	movw	r24, r28
    1326:	87 5b       	subi	r24, 0xB7	; 183
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	b9 01       	movw	r22, r18
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	b9 d9       	rcall	.-3214   	; 0x6a4 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
    1332:	8c e2       	ldi	r24, 0x2C	; 44
    1334:	b6 d1       	rcall	.+876    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    1336:	1b 82       	std	Y+3, r1	; 0x03
    1338:	1a 82       	std	Y+2, r1	; 0x02
    133a:	0d c1       	rjmp	.+538    	; 0x1556 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2f8>
    bufIndx = 0;
    133c:	19 82       	std	Y+1, r1	; 0x01
    uint8_t pixels = pixBuf[i/2];
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	99 23       	and	r25, r25
    1344:	0c f4       	brge	.+2      	; 0x1348 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xea>
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	95 95       	asr	r25
    134a:	87 95       	ror	r24
    134c:	9c 01       	movw	r18, r24
    134e:	ce 01       	movw	r24, r28
    1350:	0b 96       	adiw	r24, 0x0b	; 11
    1352:	82 0f       	add	r24, r18
    1354:	93 1f       	adc	r25, r19
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	8c 83       	std	Y+4, r24	; 0x04
    for (int j=0; j< CHAR_WIDTH; j++) {
    135c:	1e 82       	std	Y+6, r1	; 0x06
    135e:	1d 82       	std	Y+5, r1	; 0x05
    1360:	ec c0       	rjmp	.+472    	; 0x153a <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2dc>
      if (pixels & 0x01) {                // font table assumes right to left scan 
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	99 27       	eor	r25, r25
    136c:	89 2b       	or	r24, r25
    136e:	09 f4       	brne	.+2      	; 0x1372 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x114>
    1370:	6d c0       	rjmp	.+218    	; 0x144c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x1ee>
        buf[bufIndx++] = fc.r;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	98 0f       	add	r25, r24
    1378:	99 83       	std	Y+1, r25	; 0x01
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 01       	movw	r18, r28
    1380:	24 5b       	subi	r18, 0xB4	; 180
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	f9 01       	movw	r30, r18
    1386:	40 81       	ld	r20, Z
    1388:	9e 01       	movw	r18, r28
    138a:	29 5e       	subi	r18, 0xE9	; 233
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	fc 01       	movw	r30, r24
    1394:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.g;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	98 0f       	add	r25, r24
    139c:	99 83       	std	Y+1, r25	; 0x01
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9e 01       	movw	r18, r28
    13a4:	24 5b       	subi	r18, 0xB4	; 180
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	f9 01       	movw	r30, r18
    13aa:	41 81       	ldd	r20, Z+1	; 0x01
    13ac:	9e 01       	movw	r18, r28
    13ae:	29 5e       	subi	r18, 0xE9	; 233
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	fc 01       	movw	r30, r24
    13b8:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.b;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	98 0f       	add	r25, r24
    13c0:	99 83       	std	Y+1, r25	; 0x01
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9e 01       	movw	r18, r28
    13c8:	24 5b       	subi	r18, 0xB4	; 180
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	f9 01       	movw	r30, r18
    13ce:	42 81       	ldd	r20, Z+2	; 0x02
    13d0:	9e 01       	movw	r18, r28
    13d2:	29 5e       	subi	r18, 0xE9	; 233
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	82 0f       	add	r24, r18
    13d8:	93 1f       	adc	r25, r19
    13da:	fc 01       	movw	r30, r24
    13dc:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.r;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	98 0f       	add	r25, r24
    13e4:	99 83       	std	Y+1, r25	; 0x01
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9e 01       	movw	r18, r28
    13ec:	24 5b       	subi	r18, 0xB4	; 180
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	f9 01       	movw	r30, r18
    13f2:	40 81       	ld	r20, Z
    13f4:	9e 01       	movw	r18, r28
    13f6:	29 5e       	subi	r18, 0xE9	; 233
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	fc 01       	movw	r30, r24
    1400:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.g;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	98 0f       	add	r25, r24
    1408:	99 83       	std	Y+1, r25	; 0x01
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 01       	movw	r18, r28
    1410:	24 5b       	subi	r18, 0xB4	; 180
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	f9 01       	movw	r30, r18
    1416:	41 81       	ldd	r20, Z+1	; 0x01
    1418:	9e 01       	movw	r18, r28
    141a:	29 5e       	subi	r18, 0xE9	; 233
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.b;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	98 0f       	add	r25, r24
    142c:	99 83       	std	Y+1, r25	; 0x01
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9e 01       	movw	r18, r28
    1434:	24 5b       	subi	r18, 0xB4	; 180
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	f9 01       	movw	r30, r18
    143a:	42 81       	ldd	r20, Z+2	; 0x02
    143c:	9e 01       	movw	r18, r28
    143e:	29 5e       	subi	r18, 0xE9	; 233
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	82 0f       	add	r24, r18
    1444:	93 1f       	adc	r25, r19
    1446:	fc 01       	movw	r30, r24
    1448:	40 83       	st	Z, r20
    144a:	6c c0       	rjmp	.+216    	; 0x1524 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2c6>

      } else {
        buf[bufIndx++] = bc.r;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	98 0f       	add	r25, r24
    1452:	99 83       	std	Y+1, r25	; 0x01
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9e 01       	movw	r18, r28
    145a:	21 5b       	subi	r18, 0xB1	; 177
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	f9 01       	movw	r30, r18
    1460:	40 81       	ld	r20, Z
    1462:	9e 01       	movw	r18, r28
    1464:	29 5e       	subi	r18, 0xE9	; 233
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	fc 01       	movw	r30, r24
    146e:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.g;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	98 0f       	add	r25, r24
    1476:	99 83       	std	Y+1, r25	; 0x01
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9e 01       	movw	r18, r28
    147e:	21 5b       	subi	r18, 0xB1	; 177
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	f9 01       	movw	r30, r18
    1484:	41 81       	ldd	r20, Z+1	; 0x01
    1486:	9e 01       	movw	r18, r28
    1488:	29 5e       	subi	r18, 0xE9	; 233
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	fc 01       	movw	r30, r24
    1492:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.b;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	98 0f       	add	r25, r24
    149a:	99 83       	std	Y+1, r25	; 0x01
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9e 01       	movw	r18, r28
    14a2:	21 5b       	subi	r18, 0xB1	; 177
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	f9 01       	movw	r30, r18
    14a8:	42 81       	ldd	r20, Z+2	; 0x02
    14aa:	9e 01       	movw	r18, r28
    14ac:	29 5e       	subi	r18, 0xE9	; 233
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	82 0f       	add	r24, r18
    14b2:	93 1f       	adc	r25, r19
    14b4:	fc 01       	movw	r30, r24
    14b6:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.r;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	98 0f       	add	r25, r24
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9e 01       	movw	r18, r28
    14c6:	21 5b       	subi	r18, 0xB1	; 177
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	f9 01       	movw	r30, r18
    14cc:	40 81       	ld	r20, Z
    14ce:	9e 01       	movw	r18, r28
    14d0:	29 5e       	subi	r18, 0xE9	; 233
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.g;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	98 0f       	add	r25, r24
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 01       	movw	r18, r28
    14ea:	21 5b       	subi	r18, 0xB1	; 177
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	f9 01       	movw	r30, r18
    14f0:	41 81       	ldd	r20, Z+1	; 0x01
    14f2:	9e 01       	movw	r18, r28
    14f4:	29 5e       	subi	r18, 0xE9	; 233
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	82 0f       	add	r24, r18
    14fa:	93 1f       	adc	r25, r19
    14fc:	fc 01       	movw	r30, r24
    14fe:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.b;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	98 0f       	add	r25, r24
    1506:	99 83       	std	Y+1, r25	; 0x01
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9e 01       	movw	r18, r28
    150e:	21 5b       	subi	r18, 0xB1	; 177
    1510:	3f 4f       	sbci	r19, 0xFF	; 255
    1512:	f9 01       	movw	r30, r18
    1514:	42 81       	ldd	r20, Z+2	; 0x02
    1516:	9e 01       	movw	r18, r28
    1518:	29 5e       	subi	r18, 0xE9	; 233
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	fc 01       	movw	r30, r24
    1522:	40 83       	st	Z, r20
      }
      pixels >>= 1;   
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	95 95       	asr	r25
    152c:	87 95       	ror	r24
    152e:	8c 83       	std	Y+4, r24	; 0x04
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i/2];
    for (int j=0; j< CHAR_WIDTH; j++) {
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	08 97       	sbiw	r24, 0x08	; 8
    1540:	0c f4       	brge	.+2      	; 0x1544 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x2e6>
    1542:	0f cf       	rjmp	.-482    	; 0x1362 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x104>
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
    1544:	ce 01       	movw	r24, r28
    1546:	47 96       	adiw	r24, 0x17	; 23
    1548:	69 81       	ldd	r22, Y+1	; 0x01
    154a:	c5 d0       	rcall	.+394    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT*2; i++) {
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	9b 83       	std	Y+3, r25	; 0x03
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	48 97       	sbiw	r24, 0x18	; 24
    155c:	0c f4       	brge	.+2      	; 0x1560 <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0x302>
    155e:	ee ce       	rjmp	.-548    	; 0x133c <_ZN8Graphics10draw2xCharEchh9_pixColorS0_+0xde>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
    1560:	86 d2       	rcall	.+1292   	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  sei();
    1562:	78 94       	sei
}
    1564:	cf 5a       	subi	r28, 0xAF	; 175
    1566:	df 4f       	sbci	r29, 0xFF	; 255
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	cf 90       	pop	r12
    157e:	bf 90       	pop	r11
    1580:	af 90       	pop	r10
    1582:	08 95       	ret

00001584 <_ZN3LcdC1Ev>:
pixColor Lcd::bgColor;
cursor_t Lcd::cursor;
uint8_t Lcd::lcdInitialized = 0;


Lcd::Lcd(void) {
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	00 d0       	rcall	.+0      	; 0x158a <_ZN3LcdC1Ev+0x6>
    158a:	1f 92       	push	r1
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	9b 83       	std	Y+3, r25	; 0x03
    1592:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t reg;

	if (lcdInitialized) {			// only init the lcd once
    1594:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN3Lcd14lcdInitializedE>
    1598:	88 23       	and	r24, r24
    159a:	09 f0       	breq	.+2      	; 0x159e <_ZN3LcdC1Ev+0x1a>
		return;
    159c:	51 c0       	rjmp	.+162    	; 0x1640 <_ZN3LcdC1Ev+0xbc>
	}
	// set the LCD bits in PORTD to outputs
	reg = DDRD;
    159e:	8a e2       	ldi	r24, 0x2A	; 42
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	89 83       	std	Y+1, r24	; 0x01
	reg |= LCD_DDR;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	8c 67       	ori	r24, 0x7C	; 124
    15ac:	89 83       	std	Y+1, r24	; 0x01
	DDRD = reg;
    15ae:	8a e2       	ldi	r24, 0x2A	; 42
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	29 81       	ldd	r18, Y+1	; 0x01
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18

	// set the LCD bits to default
	reg = PORTD;
    15b8:	8b e2       	ldi	r24, 0x2B	; 43
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~LCD_DDR;		// turn off all lcd bits
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	83 78       	andi	r24, 0x83	; 131
    15c6:	89 83       	std	Y+1, r24	; 0x01
	reg |= LCD_DFLT;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	80 66       	ori	r24, 0x60	; 96
    15cc:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	29 81       	ldd	r18, Y+1	; 0x01
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
	fgColor = WHITE;
    15d8:	8c ef       	ldi	r24, 0xFC	; 252
    15da:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN3Lcd7fgColorE>
    15de:	8c ef       	ldi	r24, 0xFC	; 252
    15e0:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZN3Lcd7fgColorE+0x1>
    15e4:	8c ef       	ldi	r24, 0xFC	; 252
    15e6:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZN3Lcd7fgColorE+0x2>
	bgColor = LTGREEN;
    15ea:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd7bgColorE>
    15ee:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    15f2:	8c e4       	ldi	r24, 0x4C	; 76
    15f4:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
	cursor.col = 0;
    15f8:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    15fc:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x2>
	cursor.line = 0;
    1600:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1604:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE>
	reset();
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	1f d0       	rcall	.+62     	; 0x164c <_ZN3Lcd5resetEv>
	mem_access();
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	02 d1       	rcall	.+516    	; 0x1818 <_ZN3Lcd10mem_accessEv>
	Clock::delay(12);
    1614:	6c e0       	ldi	r22, 0x0C	; 12
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	c9 db       	rcall	.-2158   	; 0xdb0 <_ZN5Clock5delayEm>
  sleep_out();
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	e9 d0       	rcall	.+466    	; 0x17f6 <_ZN3Lcd9sleep_outEv>
  Clock::delay(12);
    1624:	6c e0       	ldi	r22, 0x0C	; 12
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	c1 db       	rcall	.-2174   	; 0xdb0 <_ZN5Clock5delayEm>
	on();	
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	d0 d0       	rcall	.+416    	; 0x17d4 <_ZN3Lcd2onEv>
 	clrScrn();
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	92 d3       	rcall	.+1828   	; 0x1d5e <_ZN3Lcd7clrScrnEv>
	lcdInitialized = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZN3Lcd14lcdInitializedE>
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <_ZN3Lcd5resetEv>:


void Lcd::reset(void) {
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <_ZN3Lcd5resetEv+0x6>
    1652:	1f 92       	push	r1
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	8a 83       	std	Y+2, r24	; 0x02

	volatile uint8_t reg;

	reg = PORTD;
    165c:	8b e2       	ldi	r24, 0x2B	; 43
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
	reg &= ~LCD_nRST;		// set reset low
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;
    166c:	8b e2       	ldi	r24, 0x2B	; 43
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	29 81       	ldd	r18, Y+1	; 0x01
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
	usecDly(RST_LOW);		// reset pulse is 10 usec
    1676:	80 ea       	ldi	r24, 0xA0	; 160
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	df dc       	rcall	.-1602   	; 0x103a <_Z7usecDlyi>
	reg |= LCD_nRST;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	80 62       	ori	r24, 0x20	; 32
    1680:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;			// set reset high
    1682:	8b e2       	ldi	r24, 0x2B	; 43
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18
	Clock::delay(13);		// wait more than 120 msec
    168c:	6d e0       	ldi	r22, 0x0D	; 13
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	8d db       	rcall	.-2278   	; 0xdb0 <_ZN5Clock5delayEm>
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <_ZN3Lcd7sendCmdEh>:


void Lcd::sendCmd(uint8_t cmd) {
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <_ZN3Lcd7sendCmdEh+0x6>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8a 83       	std	Y+2, r24	; 0x02

volatile uint8_t reg;

	reg = PORTD;
    16ae:	8b e2       	ldi	r24, 0x2B	; 43
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
	reg = reg & ~(LCD_nCS | LCD_A0);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	8f 7a       	andi	r24, 0xAF	; 175
    16bc:	89 83       	std	Y+1, r24	; 0x01
	PORTD = reg;				// CS, A0 low
    16be:	8b e2       	ldi	r24, 0x2B	; 43
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	29 81       	ldd	r18, Y+1	; 0x01
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
	
	// first send cmd
	sendByte(cmd);
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	3c d0       	rcall	.+120    	; 0x1744 <_ZN3Lcd8sendByteEh>
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_ZN3Lcd8sendDataEPhh>:


void Lcd::sendData(uint8_t *buf, uint8_t cnt) {
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	00 d0       	rcall	.+0      	; 0x16dc <_ZN3Lcd8sendDataEPhh+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <_ZN3Lcd8sendDataEPhh+0x8>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <_ZN3Lcd8sendDataEPhh+0xa>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9d 83       	std	Y+5, r25	; 0x05
    16e6:	8c 83       	std	Y+4, r24	; 0x04
    16e8:	6e 83       	std	Y+6, r22	; 0x06

volatile uint8_t reg = PORTD;
    16ea:	8b e2       	ldi	r24, 0x2B	; 43
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	8b 83       	std	Y+3, r24	; 0x03
  
  PORTD = reg | LCD_A0;   // A0 hi for data/param
    16f4:	8b e2       	ldi	r24, 0x2B	; 43
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	2b 81       	ldd	r18, Y+3	; 0x03
    16fa:	20 61       	ori	r18, 0x10	; 16
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18

  for (int i=0; i< cnt; i++) {
    1700:	1a 82       	std	Y+2, r1	; 0x02
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <_ZN3Lcd8sendDataEPhh+0x4c>
    sendByte(buf[i]);
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	2c 81       	ldd	r18, Y+4	; 0x04
    170c:	3d 81       	ldd	r19, Y+5	; 0x05
    170e:	82 0f       	add	r24, r18
    1710:	93 1f       	adc	r25, r19
    1712:	fc 01       	movw	r30, r24
    1714:	80 81       	ld	r24, Z
    1716:	16 d0       	rcall	.+44     	; 0x1744 <_ZN3Lcd8sendByteEh>

volatile uint8_t reg = PORTD;
  
  PORTD = reg | LCD_A0;   // A0 hi for data/param

  for (int i=0; i< cnt; i++) {
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	82 17       	cp	r24, r18
    172e:	93 07       	cpc	r25, r19
    1730:	54 f3       	brlt	.-44     	; 0x1706 <_ZN3Lcd8sendDataEPhh+0x30>
    sendByte(buf[i]);
  }
}
    1732:	26 96       	adiw	r28, 0x06	; 6
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_ZN3Lcd8sendByteEh>:


//
// assumes CS and A0 are set correctly before entry
//
void Lcd::sendByte(uint8_t b) {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	00 d0       	rcall	.+0      	; 0x174a <_ZN3Lcd8sendByteEh+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <_ZN3Lcd8sendByteEh+0x8>
    174c:	1f 92       	push	r1
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	8d 83       	std	Y+5, r24	; 0x05

volatile uint8_t treg = PORTD;
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	8b 83       	std	Y+3, r24	; 0x03
volatile uint8_t reg = treg;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	8c 83       	std	Y+4, r24	; 0x04

	for (int i = 0 ; i < 8; i++) {
    1762:	1a 82       	std	Y+2, r1	; 0x02
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	25 c0       	rjmp	.+74     	; 0x17b2 <_ZN3Lcd8sendByteEh+0x6e>
		if ( b & 0x80) {
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	88 23       	and	r24, r24
    176c:	24 f4       	brge	.+8      	; 0x1776 <_ZN3Lcd8sendByteEh+0x32>
			reg |= LCD_SDA;
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	88 60       	ori	r24, 0x08	; 8
    1772:	8c 83       	std	Y+4, r24	; 0x04
    1774:	03 c0       	rjmp	.+6      	; 0x177c <_ZN3Lcd8sendByteEh+0x38>
		} else {
			reg &= ~LCD_SDA;
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	8c 83       	std	Y+4, r24	; 0x04
		}
		PORTD = reg;
    177c:	8b e2       	ldi	r24, 0x2B	; 43
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	fc 01       	movw	r30, r24
    1784:	20 83       	st	Z, r18
		PORTD = reg | LCD_SCK;
    1786:	8b e2       	ldi	r24, 0x2B	; 43
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	24 60       	ori	r18, 0x04	; 4
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
		PORTD = reg;
    1792:	8b e2       	ldi	r24, 0x2B	; 43
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2c 81       	ldd	r18, Y+4	; 0x04
    1798:	fc 01       	movw	r30, r24
    179a:	20 83       	st	Z, r18
		b = (b << 1) & 0xFF;		   
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	8d 83       	std	Y+5, r24	; 0x05
void Lcd::sendByte(uint8_t b) {

volatile uint8_t treg = PORTD;
volatile uint8_t reg = treg;

	for (int i = 0 ; i < 8; i++) {
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	08 97       	sbiw	r24, 0x08	; 8
    17b8:	bc f2       	brlt	.-82     	; 0x1768 <_ZN3Lcd8sendByteEh+0x24>
		PORTD = reg;
		PORTD = reg | LCD_SCK;
		PORTD = reg;
		b = (b << 1) & 0xFF;		   
	}
	PORTD = treg;			// return PORTD as we received it
    17ba:	8b e2       	ldi	r24, 0x2B	; 43
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <_ZN3Lcd2onEv>:


void Lcd::on(void) {
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <_ZN3Lcd2onEv+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01

  cli();
    17e2:	f8 94       	cli
	sendCmd(CMD_DISPLAY_ON);
    17e4:	89 e2       	ldi	r24, 0x29	; 41
    17e6:	5d df       	rcall	.-326    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  cmpltCmd();
    17e8:	42 d1       	rcall	.+644    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  sei();
    17ea:	78 94       	sei
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <_ZN3Lcd9sleep_outEv>:
  cmpltCmd();
  sei();
}


void Lcd::sleep_out(void) {
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <_ZN3Lcd9sleep_outEv+0x6>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01

  cli();
    1804:	f8 94       	cli
  sendCmd(CMD_SLEEP_OUT);
    1806:	81 e1       	ldi	r24, 0x11	; 17
    1808:	4c df       	rcall	.-360    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  cmpltCmd();
    180a:	31 d1       	rcall	.+610    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  sei();
    180c:	78 94       	sei
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <_ZN3Lcd10mem_accessEv>:

void Lcd::mem_access(void) {
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	00 d0       	rcall	.+0      	; 0x181e <_ZN3Lcd10mem_accessEv+0x6>
    181e:	1f 92       	push	r1
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t buf = LCD_MEM_CTL;
    1828:	80 ea       	ldi	r24, 0xA0	; 160
    182a:	89 83       	std	Y+1, r24	; 0x01
	cli();
    182c:	f8 94       	cli

	//
	// flip xy if needed
	//
	sendCmd(CMD_MEM_CTRL);
    182e:	86 e3       	ldi	r24, 0x36	; 54
    1830:	38 df       	rcall	.-400    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
	sendData(&buf, 1);
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	4e df       	rcall	.-356    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
	cmpltCmd();
    183a:	19 d1       	rcall	.+562    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>

	//
	// set pixel format to 18 bits per pixel
	//
	sendCmd(CMD_PIX_FORMAT);
    183c:	8a e3       	ldi	r24, 0x3A	; 58
    183e:	31 df       	rcall	.-414    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
	buf = FLAG_IFPF_18;
    1840:	86 e0       	ldi	r24, 0x06	; 6
    1842:	89 83       	std	Y+1, r24	; 0x01
	sendData(&buf, 1);
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	45 df       	rcall	.-374    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
	cmpltCmd();
    184c:	10 d1       	rcall	.+544    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
	sei();
    184e:	78 94       	sei
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <_ZN3Lcd11lcd_putcharEc>:
	bgColor.g = g;
	bgColor.b = b;
}


void Lcd::lcd_putchar(char c) {
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	af 97       	sbiw	r28, 0x2f	; 47
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	8f a7       	std	Y+47, r24	; 0x2f

uint8_t ys = cursor.line * CHAR_HEIGHT;
    1872:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1876:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    187a:	98 2f       	mov	r25, r24
    187c:	89 2f       	mov	r24, r25
    187e:	88 0f       	add	r24, r24
    1880:	89 0f       	add	r24, r25
    1882:	88 0f       	add	r24, r24
    1884:	88 0f       	add	r24, r24
    1886:	8f 83       	std	Y+7, r24	; 0x07
uint8_t ye = ys + CHAR_HEIGHT - 1;
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	85 5f       	subi	r24, 0xF5	; 245
    188c:	88 87       	std	Y+8, r24	; 0x08
uint8_t xs = cursor.col * CHAR_WIDTH;
    188e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1892:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1896:	88 0f       	add	r24, r24
    1898:	88 0f       	add	r24, r24
    189a:	88 0f       	add	r24, r24
    189c:	89 87       	std	Y+9, r24	; 0x09
uint8_t xe = xs + CHAR_WIDTH -1;
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	89 5f       	subi	r24, 0xF9	; 249
    18a2:	8a 87       	std	Y+10, r24	; 0x0a
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 3];
uint8_t bufIndx;
  
  cli();
    18a4:	f8 94       	cli
	buf[0] = (xs >> 8) & 0xff;
    18a6:	1f 8a       	std	Y+23, r1	; 0x17
	buf[1] = (xs & 0xff);
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	88 8f       	std	Y+24, r24	; 0x18
	buf[2] = (xe >> 8) & 0xff;
    18ac:	19 8e       	std	Y+25, r1	; 0x19
	buf[3] = (xe & 0xff);
    18ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b0:	8a 8f       	std	Y+26, r24	; 0x1a
	sendCmd(CMD_COL_ADDR_SET);
    18b2:	8a e2       	ldi	r24, 0x2A	; 42
    18b4:	f6 de       	rcall	.-532    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
	sendData(buf, 4);
    18b6:	ce 01       	movw	r24, r28
    18b8:	47 96       	adiw	r24, 0x17	; 23
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	0c df       	rcall	.-488    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    18be:	d7 d0       	rcall	.+430    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  
	buf[0] = (ys >> 8) & 0xff;
    18c0:	1f 8a       	std	Y+23, r1	; 0x17
	buf[1] = (ys & 0xff);
    18c2:	8f 81       	ldd	r24, Y+7	; 0x07
    18c4:	88 8f       	std	Y+24, r24	; 0x18
	buf[2] = (ye >> 8) & 0xff;
    18c6:	19 8e       	std	Y+25, r1	; 0x19
	buf[3] = (ye & 0xff);
    18c8:	88 85       	ldd	r24, Y+8	; 0x08
    18ca:	8a 8f       	std	Y+26, r24	; 0x1a
	sendCmd(CMD_ROW_ADDR_SET);
    18cc:	8b e2       	ldi	r24, 0x2B	; 43
    18ce:	e9 de       	rcall	.-558    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
	sendData(buf, 4);
    18d0:	ce 01       	movw	r24, r28
    18d2:	47 96       	adiw	r24, 0x17	; 23
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	ff de       	rcall	.-514    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    18d8:	ca d0       	rcall	.+404    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>

	_getPixels(c, pixBuf); 
    18da:	ce 01       	movw	r24, r28
    18dc:	0b 96       	adiw	r24, 0x0b	; 11
    18de:	bc 01       	movw	r22, r24
    18e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
    18e6:	8c e2       	ldi	r24, 0x2C	; 44
    18e8:	dc de       	rcall	.-584    	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    18ea:	1b 82       	std	Y+3, r1	; 0x03
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	89 c0       	rjmp	.+274    	; 0x1a02 <_ZN3Lcd11lcd_putcharEc+0x1a6>
    bufIndx = 0;
    18f0:	19 82       	std	Y+1, r1	; 0x01
		uint8_t pixels = pixBuf[i];
    18f2:	9e 01       	movw	r18, r28
    18f4:	25 5f       	subi	r18, 0xF5	; 245
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	82 0f       	add	r24, r18
    18fe:	93 1f       	adc	r25, r19
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	8c 83       	std	Y+4, r24	; 0x04
		for (int j=0; j< CHAR_WIDTH; j++) {
    1906:	1e 82       	std	Y+6, r1	; 0x06
    1908:	1d 82       	std	Y+5, r1	; 0x05
    190a:	6d c0       	rjmp	.+218    	; 0x19e6 <_ZN3Lcd11lcd_putcharEc+0x18a>
			if (pixels & 0x01) {								// font table assumes right to left scan 
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	99 27       	eor	r25, r25
    1916:	89 2b       	or	r24, r25
    1918:	71 f1       	breq	.+92     	; 0x1976 <_ZN3Lcd11lcd_putcharEc+0x11a>
				buf[bufIndx++] = fgColor.r;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	98 0f       	add	r25, r24
    1920:	99 83       	std	Y+1, r25	; 0x01
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	40 91 53 03 	lds	r20, 0x0353	; 0x800353 <_ZN3Lcd7fgColorE>
    192a:	9e 01       	movw	r18, r28
    192c:	29 5e       	subi	r18, 0xE9	; 233
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	82 0f       	add	r24, r18
    1932:	93 1f       	adc	r25, r19
    1934:	fc 01       	movw	r30, r24
    1936:	40 83       	st	Z, r20
				buf[bufIndx++] = fgColor.g;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	98 0f       	add	r25, r24
    193e:	99 83       	std	Y+1, r25	; 0x01
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <_ZN3Lcd7fgColorE+0x1>
    1948:	9e 01       	movw	r18, r28
    194a:	29 5e       	subi	r18, 0xE9	; 233
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	fc 01       	movw	r30, r24
    1954:	40 83       	st	Z, r20
				buf[bufIndx++] = fgColor.b;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	98 0f       	add	r25, r24
    195c:	99 83       	std	Y+1, r25	; 0x01
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <_ZN3Lcd7fgColorE+0x2>
    1966:	9e 01       	movw	r18, r28
    1968:	29 5e       	subi	r18, 0xE9	; 233
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	fc 01       	movw	r30, r24
    1972:	40 83       	st	Z, r20
    1974:	2d c0       	rjmp	.+90     	; 0x19d0 <_ZN3Lcd11lcd_putcharEc+0x174>
			} else {
				buf[bufIndx++] = bgColor.r;
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	98 0f       	add	r25, r24
    197c:	99 83       	std	Y+1, r25	; 0x01
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	40 91 56 03 	lds	r20, 0x0356	; 0x800356 <_ZN3Lcd7bgColorE>
    1986:	9e 01       	movw	r18, r28
    1988:	29 5e       	subi	r18, 0xE9	; 233
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	82 0f       	add	r24, r18
    198e:	93 1f       	adc	r25, r19
    1990:	fc 01       	movw	r30, r24
    1992:	40 83       	st	Z, r20
				buf[bufIndx++] = bgColor.g;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	98 0f       	add	r25, r24
    199a:	99 83       	std	Y+1, r25	; 0x01
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    19a4:	9e 01       	movw	r18, r28
    19a6:	29 5e       	subi	r18, 0xE9	; 233
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	fc 01       	movw	r30, r24
    19b0:	40 83       	st	Z, r20
				buf[bufIndx++] = bgColor.b;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	98 0f       	add	r25, r24
    19b8:	99 83       	std	Y+1, r25	; 0x01
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
    19c2:	9e 01       	movw	r18, r28
    19c4:	29 5e       	subi	r18, 0xE9	; 233
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	fc 01       	movw	r30, r24
    19ce:	40 83       	st	Z, r20
			}
			pixels >>= 1;		
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	95 95       	asr	r25
    19d8:	87 95       	ror	r24
    19da:	8c 83       	std	Y+4, r24	; 0x04
  sendCmd(CMD_MEM_WRITE);
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    bufIndx = 0;
		uint8_t pixels = pixBuf[i];
		for (int j=0; j< CHAR_WIDTH; j++) {
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	08 97       	sbiw	r24, 0x08	; 8
    19ec:	0c f4       	brge	.+2      	; 0x19f0 <_ZN3Lcd11lcd_putcharEc+0x194>
    19ee:	8e cf       	rjmp	.-228    	; 0x190c <_ZN3Lcd11lcd_putcharEc+0xb0>
				buf[bufIndx++] = bgColor.g;
				buf[bufIndx++] = bgColor.b;
			}
			pixels >>= 1;		
		}
    sendData(buf,bufIndx);
    19f0:	ce 01       	movw	r24, r28
    19f2:	47 96       	adiw	r24, 0x17	; 23
    19f4:	69 81       	ldd	r22, Y+1	; 0x01
    19f6:	6f de       	rcall	.-802    	; 0x16d6 <_ZN3Lcd8sendDataEPhh>

	_getPixels(c, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
	for (int i=0; i< CHAR_HEIGHT; i++) {
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	9b 83       	std	Y+3, r25	; 0x03
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	0c 97       	sbiw	r24, 0x0c	; 12
    1a08:	0c f4       	brge	.+2      	; 0x1a0c <_ZN3Lcd11lcd_putcharEc+0x1b0>
    1a0a:	72 cf       	rjmp	.-284    	; 0x18f0 <_ZN3Lcd11lcd_putcharEc+0x94>
			}
			pixels >>= 1;		
		}
    sendData(buf,bufIndx);
	}
  cmpltCmd();
    1a0c:	30 d0       	rcall	.+96     	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  cursor.col++;
    1a0e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1a12:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1a1c:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <_ZN3Lcd6cursorE+0x2>
  if (cursor.col == NUM_CHAR_PER_LINE) {
    1a20:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1a24:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1a28:	44 97       	sbiw	r24, 0x14	; 20
    1a2a:	b9 f4       	brne	.+46     	; 0x1a5a <_ZN3Lcd11lcd_putcharEc+0x1fe>
    cursor.col = 0;
    1a2c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1a30:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    cursor.line++;
    1a34:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1a38:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1a42:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZN3Lcd6cursorE>
    if (cursor.line == NUM_LINES) {
    1a46:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1a4a:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1a4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <_ZN3Lcd11lcd_putcharEc+0x1fe>
      cursor.line = 0;
    1a52:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1a56:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE>
    }  
  }
  sei();
    1a5a:	78 94       	sei
}
    1a5c:	af 96       	adiw	r28, 0x2f	; 47
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <_ZN3Lcd8cmpltCmdEv>:

void Lcd::cmpltCmd(void) {
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	1f 92       	push	r1
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
uint8_t reg;
  
  reg = PORTD & ~LCD_DDR;
    1a78:	8b e2       	ldi	r24, 0x2B	; 43
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	80 81       	ld	r24, Z
    1a80:	83 78       	andi	r24, 0x83	; 131
    1a82:	89 83       	std	Y+1, r24	; 0x01
  PORTD = reg | LCD_DFLT;   // CS, RST hi
    1a84:	8b e2       	ldi	r24, 0x2B	; 43
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	29 81       	ldd	r18, Y+1	; 0x01
    1a8a:	20 66       	ori	r18, 0x60	; 96
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
}
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>:
 Draw character c at pixel position (y, x) with foreground color fc,
 *  background color bc, 
 *  node = 1 interpret y,x as a text line, col; 
 *       = 0 interpret y,x as a pixel line, col
 */
void Lcd::drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col, pixColor fc, pixColor bc) {
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	0f 93       	push	r16
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	ea 97       	sbiw	r28, 0x3a	; 58
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	98 ab       	std	Y+48, r25	; 0x30
    1abc:	8f a7       	std	Y+47, r24	; 0x2f
    1abe:	69 ab       	std	Y+49, r22	; 0x31
    1ac0:	4a ab       	std	Y+50, r20	; 0x32
    1ac2:	2b ab       	std	Y+51, r18	; 0x33
    1ac4:	0c ab       	std	Y+52, r16	; 0x34
    1ac6:	cd aa       	std	Y+53, r12	; 0x35
    1ac8:	de aa       	std	Y+54, r13	; 0x36
    1aca:	ef aa       	std	Y+55, r14	; 0x37
    1acc:	88 ae       	std	Y+56, r8	; 0x38
    1ace:	99 ae       	std	Y+57, r9	; 0x39
    1ad0:	aa ae       	std	Y+58, r10	; 0x3a
uint8_t xe; 
char pixBuf[CHAR_HEIGHT];
uint8_t buf[CHAR_WIDTH * 3];
uint8_t bufIndx;

  if (mode) { 
    1ad2:	8a a9       	ldd	r24, Y+50	; 0x32
    1ad4:	88 23       	and	r24, r24
    1ad6:	a1 f0       	breq	.+40     	; 0x1b00 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x68>
    ys = cursor.line * CHAR_HEIGHT;
    1ad8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1adc:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	89 0f       	add	r24, r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	88 0f       	add	r24, r24
    1aec:	89 83       	std	Y+1, r24	; 0x01
    xs = cursor.col * CHAR_WIDTH;
    1aee:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1af2:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1af6:	88 0f       	add	r24, r24
    1af8:	88 0f       	add	r24, r24
    1afa:	88 0f       	add	r24, r24
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x70>
  } else {
    ys = line;
    1b00:	8b a9       	ldd	r24, Y+51	; 0x33
    1b02:	89 83       	std	Y+1, r24	; 0x01
    xs = col;
    1b04:	8c a9       	ldd	r24, Y+52	; 0x34
    1b06:	8a 83       	std	Y+2, r24	; 0x02
  }
  ye = ys + CHAR_HEIGHT - 1;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	85 5f       	subi	r24, 0xF5	; 245
    1b0c:	89 87       	std	Y+9, r24	; 0x09
  xe = xs + CHAR_WIDTH -1; 
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	89 5f       	subi	r24, 0xF9	; 249
    1b12:	8a 87       	std	Y+10, r24	; 0x0a
  cli();
    1b14:	f8 94       	cli
  buf[0] = (xs >> 8) & 0xff;
    1b16:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (xs & 0xff);
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (xe >> 8) & 0xff;
    1b1c:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (xe & 0xff);
    1b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b20:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_COL_ADDR_SET);
    1b22:	8a e2       	ldi	r24, 0x2A	; 42
    1b24:	be dd       	rcall	.-1156   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    1b26:	ce 01       	movw	r24, r28
    1b28:	47 96       	adiw	r24, 0x17	; 23
    1b2a:	64 e0       	ldi	r22, 0x04	; 4
    1b2c:	d4 dd       	rcall	.-1112   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    1b2e:	9f df       	rcall	.-194    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = (ys >> 8) & 0xff;
    1b30:	1f 8a       	std	Y+23, r1	; 0x17
  buf[1] = (ys & 0xff);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	88 8f       	std	Y+24, r24	; 0x18
  buf[2] = (ye >> 8) & 0xff;
    1b36:	19 8e       	std	Y+25, r1	; 0x19
  buf[3] = (ye & 0xff);
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	8a 8f       	std	Y+26, r24	; 0x1a
  sendCmd(CMD_ROW_ADDR_SET);
    1b3c:	8b e2       	ldi	r24, 0x2B	; 43
    1b3e:	b1 dd       	rcall	.-1182   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    1b40:	ce 01       	movw	r24, r28
    1b42:	47 96       	adiw	r24, 0x17	; 23
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	c7 dd       	rcall	.-1138   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    1b48:	92 df       	rcall	.-220    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>

  _getPixels(cc, pixBuf); 
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0b 96       	adiw	r24, 0x0b	; 11
    1b4e:	bc 01       	movw	r22, r24
    1b50:	89 a9       	ldd	r24, Y+49	; 0x31
    1b52:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_getPixels>

  sendCmd(CMD_MEM_WRITE);
    1b56:	8c e2       	ldi	r24, 0x2C	; 44
    1b58:	a4 dd       	rcall	.-1208   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    1b5a:	1d 82       	std	Y+5, r1	; 0x05
    1b5c:	1c 82       	std	Y+4, r1	; 0x04
    1b5e:	83 c0       	rjmp	.+262    	; 0x1c66 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1ce>
    bufIndx = 0;
    1b60:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t pixels = pixBuf[i];
    1b62:	9e 01       	movw	r18, r28
    1b64:	25 5f       	subi	r18, 0xF5	; 245
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	fc 01       	movw	r30, r24
    1b72:	80 81       	ld	r24, Z
    1b74:	8e 83       	std	Y+6, r24	; 0x06
    for (int j=0; j< CHAR_WIDTH; j++) {
    1b76:	18 86       	std	Y+8, r1	; 0x08
    1b78:	1f 82       	std	Y+7, r1	; 0x07
    1b7a:	67 c0       	rjmp	.+206    	; 0x1c4a <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1b2>
      if (pixels & 0x01) {                // font table assumes right to left scan 
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	99 27       	eor	r25, r25
    1b86:	89 2b       	or	r24, r25
    1b88:	59 f1       	breq	.+86     	; 0x1be0 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x148>
        buf[bufIndx++] = fc.r;
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	98 0f       	add	r25, r24
    1b90:	9b 83       	std	Y+3, r25	; 0x03
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	4d a9       	ldd	r20, Y+53	; 0x35
    1b98:	9e 01       	movw	r18, r28
    1b9a:	29 5e       	subi	r18, 0xE9	; 233
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.g;
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	98 0f       	add	r25, r24
    1bac:	9b 83       	std	Y+3, r25	; 0x03
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	4e a9       	ldd	r20, Y+54	; 0x36
    1bb4:	9e 01       	movw	r18, r28
    1bb6:	29 5e       	subi	r18, 0xE9	; 233
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	40 83       	st	Z, r20
        buf[bufIndx++] = fc.b;
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	98 0f       	add	r25, r24
    1bc8:	9b 83       	std	Y+3, r25	; 0x03
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	4f a9       	ldd	r20, Y+55	; 0x37
    1bd0:	9e 01       	movw	r18, r28
    1bd2:	29 5e       	subi	r18, 0xE9	; 233
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	fc 01       	movw	r30, r24
    1bdc:	40 83       	st	Z, r20
    1bde:	2a c0       	rjmp	.+84     	; 0x1c34 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x19c>
      } else {
        buf[bufIndx++] = bc.r;
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	98 0f       	add	r25, r24
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	48 ad       	ldd	r20, Y+56	; 0x38
    1bee:	9e 01       	movw	r18, r28
    1bf0:	29 5e       	subi	r18, 0xE9	; 233
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	82 0f       	add	r24, r18
    1bf6:	93 1f       	adc	r25, r19
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.g;
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	98 0f       	add	r25, r24
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	49 ad       	ldd	r20, Y+57	; 0x39
    1c0a:	9e 01       	movw	r18, r28
    1c0c:	29 5e       	subi	r18, 0xE9	; 233
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	fc 01       	movw	r30, r24
    1c16:	40 83       	st	Z, r20
        buf[bufIndx++] = bc.b;
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	98 0f       	add	r25, r24
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	4a ad       	ldd	r20, Y+58	; 0x3a
    1c26:	9e 01       	movw	r18, r28
    1c28:	29 5e       	subi	r18, 0xE9	; 233
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	82 0f       	add	r24, r18
    1c2e:	93 1f       	adc	r25, r19
    1c30:	fc 01       	movw	r30, r24
    1c32:	40 83       	st	Z, r20
      }
      pixels >>= 1;   
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	95 95       	asr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	8e 83       	std	Y+6, r24	; 0x06
  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    bufIndx = 0;
    uint8_t pixels = pixBuf[i];
    for (int j=0; j< CHAR_WIDTH; j++) {
    1c40:	8f 81       	ldd	r24, Y+7	; 0x07
    1c42:	98 85       	ldd	r25, Y+8	; 0x08
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	98 87       	std	Y+8, r25	; 0x08
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	98 85       	ldd	r25, Y+8	; 0x08
    1c4e:	08 97       	sbiw	r24, 0x08	; 8
    1c50:	0c f4       	brge	.+2      	; 0x1c54 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1bc>
    1c52:	94 cf       	rjmp	.-216    	; 0x1b7c <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xe4>
        buf[bufIndx++] = bc.g;
        buf[bufIndx++] = bc.b;
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
    1c54:	ce 01       	movw	r24, r28
    1c56:	47 96       	adiw	r24, 0x17	; 23
    1c58:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5a:	3d dd       	rcall	.-1414   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>

  _getPixels(cc, pixBuf); 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< CHAR_HEIGHT; i++) {
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	9d 83       	std	Y+5, r25	; 0x05
    1c64:	8c 83       	std	Y+4, r24	; 0x04
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	0c 97       	sbiw	r24, 0x0c	; 12
    1c6c:	0c f4       	brge	.+2      	; 0x1c70 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x1d8>
    1c6e:	78 cf       	rjmp	.-272    	; 0x1b60 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0xc8>
      }
      pixels >>= 1;   
    }
    sendData(buf,bufIndx);
  }
  cmpltCmd();
    1c70:	fe de       	rcall	.-516    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  if (mode) {
    1c72:	8a a9       	ldd	r24, Y+50	; 0x32
    1c74:	88 23       	and	r24, r24
    1c76:	31 f1       	breq	.+76     	; 0x1cc4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x22c>
    cursor.col++;
    1c78:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1c7c:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1c86:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    if (cursor.col == NUM_CHAR_PER_LINE) {
    1c8a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1c8e:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1c92:	44 97       	sbiw	r24, 0x14	; 20
    1c94:	b9 f4       	brne	.+46     	; 0x1cc4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x22c>
      cursor.col = 0;
    1c96:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1c9a:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x2>
      cursor.line++;
    1c9e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1ca2:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1cac:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZN3Lcd6cursorE>
      if (cursor.line == NUM_LINES) {
    1cb0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1cb4:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1cb8:	0a 97       	sbiw	r24, 0x0a	; 10
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <_ZN3Lcd8drawCharEchhh9_pixColorS0_+0x22c>
        cursor.line = 0;
    1cbc:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1cc0:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE>
      }  
    }
  }
  sei();
    1cc4:	78 94       	sei
}
    1cc6:	ea 96       	adiw	r28, 0x3a	; 58
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	0f 91       	pop	r16
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	08 95       	ret

00001ce6 <_ZN3Lcd8drawCharEchhh>:


/*
 Draw character c at pixel position (y, x) with default foreground and background colors
 */
void Lcd::drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col ) {
    1ce6:	8f 92       	push	r8
    1ce8:	9f 92       	push	r9
    1cea:	af 92       	push	r10
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	0f 93       	push	r16
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <_ZN3Lcd8drawCharEchhh+0x14>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <_ZN3Lcd8drawCharEchhh+0x16>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <_ZN3Lcd8drawCharEchhh+0x18>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	6b 83       	std	Y+3, r22	; 0x03
    1d08:	4c 83       	std	Y+4, r20	; 0x04
    1d0a:	2d 83       	std	Y+5, r18	; 0x05
    1d0c:	0e 83       	std	Y+6, r16	; 0x06

	drawChar(cc, mode, line, col, fgColor, bgColor);
    1d0e:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN3Lcd7bgColorE>
    1d12:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    1d16:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
    1d1a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN3Lcd7fgColorE>
    1d1e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN3Lcd7fgColorE+0x1>
    1d22:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <_ZN3Lcd7fgColorE+0x2>
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	49 01       	movw	r8, r18
    1d2c:	a4 2e       	mov	r10, r20
    1d2e:	6c 01       	movw	r12, r24
    1d30:	ea 2e       	mov	r14, r26
    1d32:	0e 81       	ldd	r16, Y+6	; 0x06
    1d34:	2d 81       	ldd	r18, Y+5	; 0x05
    1d36:	4c 81       	ldd	r20, Y+4	; 0x04
    1d38:	6b 81       	ldd	r22, Y+3	; 0x03
    1d3a:	cf 01       	movw	r24, r30
    1d3c:	ad de       	rcall	.-678    	; 0x1a98 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
}
    1d3e:	26 96       	adiw	r28, 0x06	; 6
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	0f 91       	pop	r16
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	08 95       	ret

00001d5e <_ZN3Lcd7clrScrnEv>:


void Lcd::clrScrn(void) {
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	60 97       	sbiw	r28, 0x10	; 16
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	98 8b       	std	Y+16, r25	; 0x10
    1d74:	8f 87       	std	Y+15, r24	; 0x0f

uint8_t pixBuf[3];
uint8_t buf[4];

  pixColor oldBg = bgColor;
    1d76:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <_ZN3Lcd7bgColorE>
    1d7a:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    1d7e:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
    1d82:	8c 87       	std	Y+12, r24	; 0x0c
    1d84:	9d 87       	std	Y+13, r25	; 0x0d
    1d86:	ae 87       	std	Y+14, r26	; 0x0e
  bgColor = LTGREEN;
    1d88:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN3Lcd7bgColorE>
    1d8c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    1d90:	8c e4       	ldi	r24, 0x4C	; 76
    1d92:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
  
  cli();
    1d96:	f8 94       	cli
  
  buf[0] = 0;
    1d98:	18 86       	std	Y+8, r1	; 0x08
  buf[1] = 0;
    1d9a:	19 86       	std	Y+9, r1	; 0x09
  buf[2] = (NUM_PIX_PER_LINE >> 8) & 0xff;
    1d9c:	1a 86       	std	Y+10, r1	; 0x0a
  buf[3] = (NUM_PIX_PER_LINE & 0xff);
    1d9e:	80 ea       	ldi	r24, 0xA0	; 160
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
  sendCmd(CMD_COL_ADDR_SET);
    1da2:	8a e2       	ldi	r24, 0x2A	; 42
    1da4:	7e dc       	rcall	.-1796   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    1da6:	ce 01       	movw	r24, r28
    1da8:	08 96       	adiw	r24, 0x08	; 8
    1daa:	64 e0       	ldi	r22, 0x04	; 4
    1dac:	94 dc       	rcall	.-1752   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    1dae:	5f de       	rcall	.-834    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>
  
  buf[0] = 0;
    1db0:	18 86       	std	Y+8, r1	; 0x08
  buf[1] = 0;
    1db2:	19 86       	std	Y+9, r1	; 0x09
  buf[2] = (NUM_PIX_LINES >> 8) & 0xff;
    1db4:	1a 86       	std	Y+10, r1	; 0x0a
  buf[3] = (NUM_PIX_LINES & 0xff);
    1db6:	80 e8       	ldi	r24, 0x80	; 128
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
  sendCmd(CMD_ROW_ADDR_SET);
    1dba:	8b e2       	ldi	r24, 0x2B	; 43
    1dbc:	72 dc       	rcall	.-1820   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  sendData(buf, 4);
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	08 96       	adiw	r24, 0x08	; 8
    1dc2:	64 e0       	ldi	r22, 0x04	; 4
    1dc4:	88 dc       	rcall	.-1776   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  cmpltCmd();
    1dc6:	53 de       	rcall	.-858    	; 0x1a6e <_ZN3Lcd8cmpltCmdEv>

  pixBuf[0] = bgColor.r;
    1dc8:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <_ZN3Lcd7bgColorE>
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
  pixBuf[1] = bgColor.g;
    1dce:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    1dd2:	8e 83       	std	Y+6, r24	; 0x06
  pixBuf[2] = bgColor.b; 
    1dd4:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
    1dd8:	8f 83       	std	Y+7, r24	; 0x07

  sendCmd(CMD_MEM_WRITE);
    1dda:	8c e2       	ldi	r24, 0x2C	; 44
    1ddc:	62 dc       	rcall	.-1852   	; 0x16a2 <_ZN3Lcd7sendCmdEh>
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    1dde:	1a 82       	std	Y+2, r1	; 0x02
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	16 c0       	rjmp	.+44     	; 0x1e10 <_ZN3Lcd7clrScrnEv+0xb2>
    for (int j=0; j< NUM_PIX_PER_LINE; j++) {
    1de4:	1c 82       	std	Y+4, r1	; 0x04
    1de6:	1b 82       	std	Y+3, r1	; 0x03
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <_ZN3Lcd7clrScrnEv+0x9e>
      sendData(pixBuf,3);
    1dea:	ce 01       	movw	r24, r28
    1dec:	05 96       	adiw	r24, 0x05	; 5
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	72 dc       	rcall	.-1820   	; 0x16d6 <_ZN3Lcd8sendDataEPhh>
  pixBuf[2] = bgColor.b; 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    for (int j=0; j< NUM_PIX_PER_LINE; j++) {
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	80 3a       	cpi	r24, 0xA0	; 160
    1e02:	91 05       	cpc	r25, r1
    1e04:	94 f3       	brlt	.-28     	; 0x1dea <_ZN3Lcd7clrScrnEv+0x8c>
  pixBuf[1] = bgColor.g;
  pixBuf[2] = bgColor.b; 

  sendCmd(CMD_MEM_WRITE);
  
  for (int i=0; i< NUM_PIX_LINES; i++) {
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	80 38       	cpi	r24, 0x80	; 128
    1e16:	91 05       	cpc	r25, r1
    1e18:	2c f3       	brlt	.-54     	; 0x1de4 <_ZN3Lcd7clrScrnEv+0x86>
    for (int j=0; j< NUM_PIX_PER_LINE; j++) {
      sendData(pixBuf,3);
    }
  }
  sei();
    1e1a:	78 94       	sei
	
	cursor.line = 0;
    1e1c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1e20:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN3Lcd6cursorE>
	cursor.col = 0;
    1e24:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1e28:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN3Lcd6cursorE+0x2>
  bgColor = oldBg;
    1e2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e30:	ae 85       	ldd	r26, Y+14	; 0x0e
    1e32:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN3Lcd7bgColorE>
    1e36:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <_ZN3Lcd7bgColorE+0x1>
    1e3a:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <_ZN3Lcd7bgColorE+0x2>
}
    1e3e:	60 96       	adiw	r28, 0x10	; 16
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <_ZN3Lcd4putsEPKc>:


void Lcd::puts(const char *p) {
    1e50:	0f 93       	push	r16
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <_ZN3Lcd4putsEPKc+0x8>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <_ZN3Lcd4putsEPKc+0xa>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	7c 83       	std	Y+4, r23	; 0x04
    1e64:	6b 83       	std	Y+3, r22	; 0x03
	while (*p) {
    1e66:	1a c0       	rjmp	.+52     	; 0x1e9c <_ZN3Lcd4putsEPKc+0x4c>
		drawChar(*p++, 1, cursor.line, cursor.col);
    1e68:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1e6c:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1e70:	58 2f       	mov	r21, r24
    1e72:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1e76:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	9c 01       	movw	r18, r24
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	3c 83       	std	Y+4, r19	; 0x04
    1e88:	2b 83       	std	Y+3, r18	; 0x03
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	30 81       	ld	r19, Z
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	05 2f       	mov	r16, r21
    1e94:	24 2f       	mov	r18, r20
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	63 2f       	mov	r22, r19
    1e9a:	25 df       	rcall	.-438    	; 0x1ce6 <_ZN3Lcd8drawCharEchhh>
  bgColor = oldBg;
}


void Lcd::puts(const char *p) {
	while (*p) {
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 23       	and	r24, r24
    1ea6:	01 f7       	brne	.-64     	; 0x1e68 <_ZN3Lcd4putsEPKc+0x18>
		drawChar(*p++, 1, cursor.line, cursor.col);
	}	
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>:
	while (*p) {
		drawChar(*p++, 1, cursor.line, cursor.col, c, bgColor);
	}
}

void Lcd::puts(const char *p, pixColor fgc, pixColor bgc) {
    1eb8:	8f 92       	push	r8
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	cf 92       	push	r12
    1ec0:	df 92       	push	r13
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	7c 83       	std	Y+4, r23	; 0x04
    1ee2:	6b 83       	std	Y+3, r22	; 0x03
    1ee4:	2d 83       	std	Y+5, r18	; 0x05
    1ee6:	3e 83       	std	Y+6, r19	; 0x06
    1ee8:	4f 83       	std	Y+7, r20	; 0x07
    1eea:	e8 86       	std	Y+8, r14	; 0x08
    1eec:	f9 86       	std	Y+9, r15	; 0x09
    1eee:	0a 87       	std	Y+10, r16	; 0x0a
	while (*p) {
    1ef0:	25 c0       	rjmp	.+74     	; 0x1f3c <_ZN3Lcd4putsEPKc9_pixColorS2_+0x84>
		drawChar(*p++, 1, cursor.line, cursor.col, fgc, bgc);
    1ef2:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN3Lcd6cursorE+0x2>
    1ef6:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1efa:	78 2f       	mov	r23, r24
    1efc:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZN3Lcd6cursorE>
    1f00:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1f04:	68 2f       	mov	r22, r24
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	2f 5f       	subi	r18, 0xFF	; 255
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	50 81       	ld	r21, Z
    1f18:	28 85       	ldd	r18, Y+8	; 0x08
    1f1a:	39 85       	ldd	r19, Y+9	; 0x09
    1f1c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	af 81       	ldd	r26, Y+7	; 0x07
    1f24:	e9 81       	ldd	r30, Y+1	; 0x01
    1f26:	fa 81       	ldd	r31, Y+2	; 0x02
    1f28:	49 01       	movw	r8, r18
    1f2a:	a4 2e       	mov	r10, r20
    1f2c:	6c 01       	movw	r12, r24
    1f2e:	ea 2e       	mov	r14, r26
    1f30:	07 2f       	mov	r16, r23
    1f32:	26 2f       	mov	r18, r22
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	65 2f       	mov	r22, r21
    1f38:	cf 01       	movw	r24, r30
    1f3a:	ae dd       	rcall	.-1188   	; 0x1a98 <_ZN3Lcd8drawCharEchhh9_pixColorS0_>
		drawChar(*p++, 1, cursor.line, cursor.col, c, bgColor);
	}
}

void Lcd::puts(const char *p, pixColor fgc, pixColor bgc) {
	while (*p) {
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	a9 f6       	brne	.-86     	; 0x1ef2 <_ZN3Lcd4putsEPKc9_pixColorS2_+0x3a>
		drawChar(*p++, 1, cursor.line, cursor.col, fgc, bgc);
	}
}
    1f48:	2a 96       	adiw	r28, 0x0a	; 10
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	af 90       	pop	r10
    1f64:	9f 90       	pop	r9
    1f66:	8f 90       	pop	r8
    1f68:	08 95       	ret

00001f6a <_ZN3Lcd6gotoxyEhh>:


void Lcd::gotoxy(uint8_t line, uint8_t col) {	
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <_ZN3Lcd6gotoxyEhh+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <_ZN3Lcd6gotoxyEhh+0x8>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	6b 83       	std	Y+3, r22	; 0x03
    1f7c:	4c 83       	std	Y+4, r20	; 0x04
	cursor.line = line;
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <_ZN3Lcd6cursorE+0x1>
    1f88:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZN3Lcd6cursorE>
	cursor.col = col;
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <_ZN3Lcd6cursorE+0x3>
    1f96:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <_ZN3Lcd6cursorE+0x2>
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	08 95       	ret

00001fa8 <_Z8lcd_putccP6__file>:


//
// fprintf wrapper
//
int lcd_putc(char c, FILE *f) {
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <_Z8lcd_putccP6__file+0x6>
    1fae:	1f 92       	push	r1
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	7b 83       	std	Y+3, r23	; 0x03
    1fb8:	6a 83       	std	Y+2, r22	; 0x02
	Lcd::lcd_putchar(c);
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	4f dc       	rcall	.-1890   	; 0x185c <_ZN3Lcd11lcd_putcharEc>
	return 0;
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	08 95       	ret

00001fce <_ZN3LedC1Ev>:
#include "led.h"

//
// constructor
//
Led::Led(void) {
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <_ZN3LedC1Ev+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN8CallbackC1Ev>
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	2c ee       	ldi	r18, 0xEC	; 236
    1fea:	32 e0       	ldi	r19, 0x02	; 2
    1fec:	fc 01       	movw	r30, r24
    1fee:	31 83       	std	Z+1, r19	; 0x01
    1ff0:	20 83       	st	Z, r18
  // set up led (PB5)
  DDRB |= LED_MSK;    // PB5 is output
    1ff2:	84 e2       	ldi	r24, 0x24	; 36
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	24 e2       	ldi	r18, 0x24	; 36
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	20 81       	ld	r18, Z
    1ffe:	20 62       	ori	r18, 0x20	; 32
    2000:	fc 01       	movw	r30, r24
    2002:	20 83       	st	Z, r18
  PORTB |= LED_MSK;    // turn on the output
    2004:	85 e2       	ldi	r24, 0x25	; 37
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	25 e2       	ldi	r18, 0x25	; 37
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	f9 01       	movw	r30, r18
    200e:	20 81       	ld	r18, Z
    2010:	20 62       	ori	r18, 0x20	; 32
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
	Clock::registerPeriodic(this, FIVE_HUNDRED_MSEC);
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	62 e3       	ldi	r22, 0x32	; 50
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN5Clock16registerPeriodicEP8Callbackj>
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <_ZN3Led8callbackEv>:


void Led::callback(void) {
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	00 d0       	rcall	.+0      	; 0x2032 <_ZN3Led8callbackEv+0x6>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
		toggle();
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	05 d0       	rcall	.+10     	; 0x204a <_ZN3Led6toggleEv>
	}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <_ZN3Led6toggleEv>:


//
// toggle the led
void Led::toggle(void) {
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	00 d0       	rcall	.+0      	; 0x2050 <_ZN3Led6toggleEv+0x6>
    2050:	1f 92       	push	r1
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	9b 83       	std	Y+3, r25	; 0x03
    2058:	8a 83       	std	Y+2, r24	; 0x02
volatile uint8_t reg = PORTB;
    205a:	85 e2       	ldi	r24, 0x25	; 37
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	fc 01       	movw	r30, r24
    2060:	80 81       	ld	r24, Z
    2062:	89 83       	std	Y+1, r24	; 0x01

  reg ^= LED_MSK;
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	80 e2       	ldi	r24, 0x20	; 32
    2068:	89 27       	eor	r24, r25
    206a:	89 83       	std	Y+1, r24	; 0x01
  PORTB = reg;
    206c:	85 e2       	ldi	r24, 0x25	; 37
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	29 81       	ldd	r18, Y+1	; 0x01
    2072:	fc 01       	movw	r30, r24
    2074:	20 83       	st	Z, r18
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <_ZN5ClocknwEj>:
  static void delay(uint32_t dly);
	static int registerPeriodic(Callback *cb, uint16_t rt);
	static int registerOneshot(Callback *cb, uint16_t rt);
	static void cancelPeriodic(int indx);
	static void cancelOneshot(int indx);
	void *operator new(size_t size) { return malloc(size);}
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	00 d0       	rcall	.+0      	; 0x2088 <_ZN5ClocknwEj+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <_ZN3LednwEj>:
  Led(void);
  void toggle(void);
  uint8_t is_led_set(void);
  void on(void);
  void off(void);
	void *operator new(size_t size) { return malloc(size);}
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <_ZN3LednwEj+0x6>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	08 95       	ret

000020c2 <_ZN3LcdnwEj>:
	void drawChar(char cc, uint8_t mode, uint8_t line, uint8_t col, pixColor fc, pixColor bc);
	void clrScrn(void);
	void gotoxy(uint8_t line, uint8_t col);
	void setFgColor(uint8_t r, uint8_t g, uint8_t b);
	void setBgColor(uint8_t r, uint8_t g, uint8_t b);
	void *operator new(size_t size) { return malloc(size);}
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <_ZN3LcdnwEj+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <_ZN8GraphicsnwEj>:
public:
	void draw2xChar(char c, uint8_t line, uint8_t col);
	void draw2xChar(char cc, uint8_t line, uint8_t col, pixColor fc, pixColor bc);
	void puts2x(char *p, uint8_t line, uint8_t col);
	void rect(pixpsn_t start, uint16_t xlen, uint16_t ylen, pixColor color);
	void *operator new(size_t size) { return malloc(size);}
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <_ZN8GraphicsnwEj+0x6>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <_ZN7EncodernwEj>:
	encEvent getEvent(void);
	void	clearEvent(void);
	void	callback(void);
	int getMissedCwCount(void);
	int getMissedCcwCount(void);
	void *operator new(size_t size) { return malloc(size);}
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	00 d0       	rcall	.+0      	; 0x2108 <_ZN7EncodernwEj+0x6>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <_ZN3vfonwEj>:
	void getRxDisplayFreq(char *buf, band_t band);
	void getTxDisplayFreq(char *buf, band_t band);
	void setStep(step_t step);
	void setActVfo(vfo_actv_t rxtx);
	step_t getStep(void);
	void *operator new(size_t size) { return malloc(size);}
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	00 d0       	rcall	.+0      	; 0x2128 <_ZN3vfonwEj+0x6>
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	08 95       	ret

00002142 <_ZN6paramsnwEj>:
	mode_t	getMode(void);
	void	setMode(mode_t newMode);
	void callback(void);
	void update(Encoder *enc, Sw *pb, Lcd *lcd);
	void updateEnter(Encoder *enc, Sw *pb, Lcd *lcd);
	void *operator new(size_t size) { return malloc(size);}
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	00 d0       	rcall	.+0      	; 0x2148 <_ZN6paramsnwEj+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	0e 94 38 27 	call	0x4e70	; 0x4e70 <malloc>
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <_ZN8GraphicsC1Ev>:
#define GRAPHICS_H_

#include <stdlib.h>
#include "lcd.h"

class Graphics : public Lcd {
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	00 d0       	rcall	.+0      	; 0x2168 <_ZN8GraphicsC1Ev+0x6>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	07 da       	rcall	.-3058   	; 0x1584 <_ZN3LcdC1Ev>
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <main>:
FILE uart_str = FDEV_SETUP_STREAM_CPP(uart_putc, uart_getc, _FDEV_SETUP_RW);
FILE lcd_str  = FDEV_SETUP_STREAM_CPP(lcd_putc, NULL, _FDEV_SETUP_WRITE);
FILE *lcdfp = &lcd_str;


int main(void) {
    2180:	af 92       	push	r10
    2182:	bf 92       	push	r11
    2184:	cf 92       	push	r12
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	c4 55       	subi	r28, 0x54	; 84
    2198:	d1 09       	sbc	r29, r1
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61

volatile uint8_t reg;
uint8_t secs = 0;
    21a4:	1b 8a       	std	Y+19, r1	; 0x13
uint8_t mins = 0;
    21a6:	1c 8a       	std	Y+20, r1	; 0x14
uint8_t hours = 0;
    21a8:	1d 8a       	std	Y+21, r1	; 0x15
Clock *cl = new Clock();
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	69 df       	rcall	.-302    	; 0x2082 <_ZN5ClocknwEj>
    21b0:	8c 01       	movw	r16, r24
    21b2:	c8 01       	movw	r24, r16
    21b4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN5ClockC1Ev>
    21b8:	1f 8b       	std	Y+23, r17	; 0x17
    21ba:	0e 8b       	std	Y+22, r16	; 0x16

#ifndef LCD_TT
Led *led = new Led();
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	70 df       	rcall	.-288    	; 0x20a2 <_ZN3LednwEj>
    21c2:	8c 01       	movw	r16, r24
    21c4:	c8 01       	movw	r24, r16
    21c6:	03 df       	rcall	.-506    	; 0x1fce <_ZN3LedC1Ev>
    21c8:	19 8f       	std	Y+25, r17	; 0x19
    21ca:	08 8f       	std	Y+24, r16	; 0x18
#endif

Lcd *l = new Lcd();
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	78 df       	rcall	.-272    	; 0x20c2 <_ZN3LcdnwEj>
    21d2:	8c 01       	movw	r16, r24
    21d4:	c8 01       	movw	r24, r16
    21d6:	d6 d9       	rcall	.-3156   	; 0x1584 <_ZN3LcdC1Ev>
    21d8:	1b 8f       	std	Y+27, r17	; 0x1b
    21da:	0a 8f       	std	Y+26, r16	; 0x1a
Graphics *g = new Graphics();
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	80 df       	rcall	.-256    	; 0x20e2 <_ZN8GraphicsnwEj>
    21e2:	8c 01       	movw	r16, r24
    21e4:	c8 01       	movw	r24, r16
    21e6:	bd df       	rcall	.-134    	; 0x2162 <_ZN8GraphicsC1Ev>
    21e8:	1d 8f       	std	Y+29, r17	; 0x1d
    21ea:	0c 8f       	std	Y+28, r16	; 0x1c

int pass = 0;
    21ec:	1f 8e       	std	Y+31, r1	; 0x1f
    21ee:	1e 8e       	std	Y+30, r1	; 0x1e
pixColor  f = GREEN;
    21f0:	1a aa       	std	Y+50, r1	; 0x32
    21f2:	8c ef       	ldi	r24, 0xFC	; 252
    21f4:	8b ab       	std	Y+51, r24	; 0x33
    21f6:	1c aa       	std	Y+52, r1	; 0x34
pixColor pix_green = GREEN;
    21f8:	1d aa       	std	Y+53, r1	; 0x35
    21fa:	8c ef       	ldi	r24, 0xFC	; 252
    21fc:	8e ab       	std	Y+54, r24	; 0x36
    21fe:	1f aa       	std	Y+55, r1	; 0x37
pixColor  b = LTGREEN;
    2200:	18 ae       	std	Y+56, r1	; 0x38
    2202:	19 ae       	std	Y+57, r1	; 0x39
    2204:	8c e4       	ldi	r24, 0x4C	; 76
    2206:	8a af       	std	Y+58, r24	; 0x3a
pixColor  fg_grey = GRAY;
    2208:	8c e7       	ldi	r24, 0x7C	; 124
    220a:	8b af       	std	Y+59, r24	; 0x3b
    220c:	8c e7       	ldi	r24, 0x7C	; 124
    220e:	8c af       	std	Y+60, r24	; 0x3c
    2210:	8c e7       	ldi	r24, 0x7C	; 124
    2212:	8d af       	std	Y+61, r24	; 0x3d
pixColor pix_blk = BLACK;
    2214:	1e ae       	std	Y+62, r1	; 0x3e
    2216:	1f ae       	std	Y+63, r1	; 0x3f
    2218:	ce 01       	movw	r24, r28
    221a:	80 5c       	subi	r24, 0xC0	; 192
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	fc 01       	movw	r30, r24
    2220:	10 82       	st	Z, r1
volatile float freq;
char buf[16];
mode_t curMode;

#ifndef LCD_TT
	uart_init();
    2222:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <uart_init>
	stdout = stdin = &uart_str;
    2226:	86 e0       	ldi	r24, 0x06	; 6
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <__iob+0x1>
    222e:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__iob>
    2232:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__iob>
    2236:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__iob+0x1>
    223a:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <__iob+0x3>
    223e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__iob+0x2>
	stderr = &uart_str;
    2242:	86 e0       	ldi	r24, 0x06	; 6
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <__iob+0x5>
    224a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__iob+0x4>
	printf("main: Starting loop\n");
    224e:	84 e3       	ldi	r24, 0x34	; 52
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	0e 94 a0 28 	call	0x5140	; 0x5140 <puts>
#endif

	DdsInit();
    2256:	0e 94 36 08 	call	0x106c	; 0x106c <DdsInit>
	// init RLY as output,
	reg = DDRD;
    225a:	8a e2       	ldi	r24, 0x2A	; 42
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	80 81       	ld	r24, Z
    2262:	89 ab       	std	Y+49, r24	; 0x31
	DDRD = reg | RLY_MSK;
    2264:	8a e2       	ldi	r24, 0x2A	; 42
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	29 a9       	ldd	r18, Y+49	; 0x31
    226a:	20 64       	ori	r18, 0x40	; 64
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18

	reg = PORTD;
    2270:	8b e2       	ldi	r24, 0x2B	; 43
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	80 81       	ld	r24, Z
    2278:	89 ab       	std	Y+49, r24	; 0x31
	PORTD = reg & ~RLY_MSK;
    227a:	8b e2       	ldi	r24, 0x2B	; 43
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	29 a9       	ldd	r18, Y+49	; 0x31
    2280:	2f 7b       	andi	r18, 0xBF	; 191
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
	
	Sw *dot = new Sw(DOT, PORTC_ADR);
    2286:	8b e0       	ldi	r24, 0x0B	; 11
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN2SwnwEj>
    228e:	8c 01       	movw	r16, r24
    2290:	48 e2       	ldi	r20, 0x28	; 40
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	c8 01       	movw	r24, r16
    2296:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN2SwC1Ehh>
    229a:	19 a3       	std	Y+33, r17	; 0x21
    229c:	08 a3       	std	Y+32, r16	; 0x20
	Sw *dash = new Sw(DASH, PORTC_ADR);
    229e:	8b e0       	ldi	r24, 0x0B	; 11
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN2SwnwEj>
    22a6:	8c 01       	movw	r16, r24
    22a8:	48 e2       	ldi	r20, 0x28	; 40
    22aa:	63 e0       	ldi	r22, 0x03	; 3
    22ac:	c8 01       	movw	r24, r16
    22ae:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN2SwC1Ehh>
    22b2:	1b a3       	std	Y+35, r17	; 0x23
    22b4:	0a a3       	std	Y+34, r16	; 0x22
	Sw *pb = new Sw(PB, PORTD_ADR);
    22b6:	8b e0       	ldi	r24, 0x0B	; 11
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN2SwnwEj>
    22be:	8c 01       	movw	r16, r24
    22c0:	4b e2       	ldi	r20, 0x2B	; 43
    22c2:	67 e0       	ldi	r22, 0x07	; 7
    22c4:	c8 01       	movw	r24, r16
    22c6:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN2SwC1Ehh>
    22ca:	1d a3       	std	Y+37, r17	; 0x25
    22cc:	0c a3       	std	Y+36, r16	; 0x24
//	ElapsedTime *et = new ElapsedTime(100);
	Encoder *enc = new Encoder(ENCA, ENCB, PORTB_ADR);
    22ce:	8f e0       	ldi	r24, 0x0F	; 15
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	17 df       	rcall	.-466    	; 0x2102 <_ZN7EncodernwEj>
    22d4:	8c 01       	movw	r16, r24
    22d6:	25 e2       	ldi	r18, 0x25	; 37
    22d8:	44 e0       	ldi	r20, 0x04	; 4
    22da:	63 e0       	ldi	r22, 0x03	; 3
    22dc:	c8 01       	movw	r24, r16
    22de:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7EncoderC1Ehhh>
    22e2:	1f a3       	std	Y+39, r17	; 0x27
    22e4:	0e a3       	std	Y+38, r16	; 0x26

	band_t band = BAND_40;
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	8a 83       	std	Y+2, r24	; 0x02
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
    22ea:	8c ea       	ldi	r24, 0xAC	; 172
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	19 df       	rcall	.-462    	; 0x2122 <_ZN3vfonwEj>
    22f0:	8c 01       	movw	r16, r24
    22f2:	8e a1       	ldd	r24, Y+38	; 0x26
    22f4:	9f a1       	ldd	r25, Y+39	; 0x27
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	42 e9       	ldi	r20, 0x92	; 146
    22fc:	51 e0       	ldi	r21, 0x01	; 1
    22fe:	bc 01       	movw	r22, r24
    2300:	c8 01       	movw	r24, r16
    2302:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
    2306:	19 a7       	std	Y+41, r17	; 0x29
    2308:	08 a7       	std	Y+40, r16	; 0x28
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);
    230a:	8c ea       	ldi	r24, 0xAC	; 172
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	09 df       	rcall	.-494    	; 0x2122 <_ZN3vfonwEj>
    2310:	8c 01       	movw	r16, r24
    2312:	8e a1       	ldd	r24, Y+38	; 0x26
    2314:	9f a1       	ldd	r25, Y+39	; 0x27
    2316:	24 e2       	ldi	r18, 0x24	; 36
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	42 e9       	ldi	r20, 0x92	; 146
    231c:	51 e0       	ldi	r21, 0x01	; 1
    231e:	bc 01       	movw	r22, r24
    2320:	c8 01       	movw	r24, r16
    2322:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN3vfoC1EP7EncoderP13vfoParametersj>
    2326:	1b a7       	std	Y+43, r17	; 0x2b
    2328:	0a a7       	std	Y+42, r16	; 0x2a

	vfoA->getTxDisplayFreq(buf, band);
    232a:	9e 01       	movw	r18, r28
    232c:	2b 5b       	subi	r18, 0xBB	; 187
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	88 a5       	ldd	r24, Y+40	; 0x28
    2332:	99 a5       	ldd	r25, Y+41	; 0x29
    2334:	4a 81       	ldd	r20, Y+2	; 0x02
    2336:	b9 01       	movw	r22, r18
    2338:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
	for (size_t i = 0; i < strlen(buf); i++) {
    233c:	1c 82       	std	Y+4, r1	; 0x04
    233e:	1b 82       	std	Y+3, r1	; 0x03
    2340:	24 c0       	rjmp	.+72     	; 0x238a <main+0x20a>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	68 2f       	mov	r22, r24
    2346:	62 95       	swap	r22
    2348:	60 7f       	andi	r22, 0xF0	; 240
    234a:	9e 01       	movw	r18, r28
    234c:	2b 5b       	subi	r18, 0xBB	; 187
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	fc 01       	movw	r30, r24
    235a:	50 81       	ld	r21, Z
    235c:	28 ad       	ldd	r18, Y+56	; 0x38
    235e:	39 ad       	ldd	r19, Y+57	; 0x39
    2360:	4a ad       	ldd	r20, Y+58	; 0x3a
    2362:	8a a9       	ldd	r24, Y+50	; 0x32
    2364:	9b a9       	ldd	r25, Y+51	; 0x33
    2366:	ac a9       	ldd	r26, Y+52	; 0x34
    2368:	ec 8d       	ldd	r30, Y+28	; 0x1c
    236a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    236c:	59 01       	movw	r10, r18
    236e:	c4 2e       	mov	r12, r20
    2370:	7c 01       	movw	r14, r24
    2372:	0a 2f       	mov	r16, r26
    2374:	26 2f       	mov	r18, r22
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	65 2f       	mov	r22, r21
    237a:	cf 01       	movw	r24, r30
    237c:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
	band_t band = BAND_40;
	vfo *vfoA = new vfo(enc, vfoDataConst, VFOA_LINE);
	vfo *vfoB = new vfo(enc, vfoDataConst, VFOB_LINE);

	vfoA->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	ce 01       	movw	r24, r28
    238c:	8b 5b       	subi	r24, 0xBB	; 187
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    2394:	9c 01       	movw	r18, r24
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	82 17       	cp	r24, r18
    239c:	93 07       	cpc	r25, r19
    239e:	88 f2       	brcs	.-94     	; 0x2342 <main+0x1c2>
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
    23a0:	9e 01       	movw	r18, r28
    23a2:	2b 5b       	subi	r18, 0xBB	; 187
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    23a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    23aa:	4a 81       	ldd	r20, Y+2	; 0x02
    23ac:	b9 01       	movw	r22, r18
    23ae:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
	for (size_t i = 0; i < strlen(buf); i++) {
    23b2:	1e 82       	std	Y+6, r1	; 0x06
    23b4:	1d 82       	std	Y+5, r1	; 0x05
    23b6:	24 c0       	rjmp	.+72     	; 0x2400 <main+0x280>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	68 2f       	mov	r22, r24
    23bc:	62 95       	swap	r22
    23be:	60 7f       	andi	r22, 0xF0	; 240
    23c0:	9e 01       	movw	r18, r28
    23c2:	2b 5b       	subi	r18, 0xBB	; 187
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	82 0f       	add	r24, r18
    23cc:	93 1f       	adc	r25, r19
    23ce:	fc 01       	movw	r30, r24
    23d0:	50 81       	ld	r21, Z
    23d2:	28 ad       	ldd	r18, Y+56	; 0x38
    23d4:	39 ad       	ldd	r19, Y+57	; 0x39
    23d6:	4a ad       	ldd	r20, Y+58	; 0x3a
    23d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23da:	9c ad       	ldd	r25, Y+60	; 0x3c
    23dc:	ad ad       	ldd	r26, Y+61	; 0x3d
    23de:	ec 8d       	ldd	r30, Y+28	; 0x1c
    23e0:	fd 8d       	ldd	r31, Y+29	; 0x1d
    23e2:	59 01       	movw	r10, r18
    23e4:	c4 2e       	mov	r12, r20
    23e6:	7c 01       	movw	r14, r24
    23e8:	0a 2f       	mov	r16, r26
    23ea:	26 2f       	mov	r18, r22
    23ec:	44 e2       	ldi	r20, 0x24	; 36
    23ee:	65 2f       	mov	r22, r21
    23f0:	cf 01       	movw	r24, r30
    23f2:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
	for (size_t i = 0; i < strlen(buf); i++) {
		g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
	}

	vfoB->getTxDisplayFreq(buf, band);
	for (size_t i = 0; i < strlen(buf); i++) {
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	ce 01       	movw	r24, r28
    2402:	8b 5b       	subi	r24, 0xBB	; 187
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    240a:	9c 01       	movw	r18, r24
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	82 17       	cp	r24, r18
    2412:	93 07       	cpc	r25, r19
    2414:	88 f2       	brcs	.-94     	; 0x23b8 <main+0x238>
		g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
	}

	vfo *curVfo = vfoA;
    2416:	88 a5       	ldd	r24, Y+40	; 0x28
    2418:	99 a5       	ldd	r25, Y+41	; 0x29
    241a:	98 87       	std	Y+8, r25	; 0x08
    241c:	8f 83       	std	Y+7, r24	; 0x07
	params *param = new params(g);
    241e:	8b e5       	ldi	r24, 0x5B	; 91
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	8f de       	rcall	.-738    	; 0x2142 <_ZN6paramsnwEj>
    2424:	8c 01       	movw	r16, r24
    2426:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2428:	9d 8d       	ldd	r25, Y+29	; 0x1d
    242a:	bc 01       	movw	r22, r24
    242c:	c8 01       	movw	r24, r16
    242e:	38 d3       	rcall	.+1648   	; 0x2aa0 <_ZN6paramsC1EP8Graphics>
    2430:	1d a7       	std	Y+45, r17	; 0x2d
    2432:	0c a7       	std	Y+44, r16	; 0x2c

	//
	// initialize a vfo and frequency
	//
	param->setActiveVfo(RX);
    2434:	8c a5       	ldd	r24, Y+44	; 0x2c
    2436:	9d a5       	ldd	r25, Y+45	; 0x2d
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	c4 d5       	rcall	.+2952   	; 0x2fc4 <_ZN6params12setActiveVfoE10vfo_actv_t>

	freq = curVfo->getRxFreq(band);
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	98 85       	ldd	r25, Y+8	; 0x08
    2440:	6a 81       	ldd	r22, Y+2	; 0x02
    2442:	0e 94 c5 21 	call	0x438a	; 0x438a <_ZN3vfo9getRxFreqE5_band>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 01       	movw	r18, r28
    244c:	2f 5b       	subi	r18, 0xBF	; 191
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	f9 01       	movw	r30, r18
    2452:	80 83       	st	Z, r24
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	a2 83       	std	Z+2, r26	; 0x02
    2458:	b3 83       	std	Z+3, r27	; 0x03
	dds(freq);
    245a:	ce 01       	movw	r24, r28
    245c:	8f 5b       	subi	r24, 0xBF	; 191
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	fc 01       	movw	r30, r24
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	a2 81       	ldd	r26, Z+2	; 0x02
    2468:	b3 81       	ldd	r27, Z+3	; 0x03
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>

	curMode = param->getMode();
    2472:	8c a5       	ldd	r24, Y+44	; 0x2c
    2474:	9d a5       	ldd	r25, Y+45	; 0x2d
    2476:	82 d5       	rcall	.+2820   	; 0x2f7c <_ZN6params7getModeEv>
    2478:	89 83       	std	Y+1, r24	; 0x01
	g->gotoxy(9,0);
    247a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    247c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	69 e0       	ldi	r22, 0x09	; 9
    2482:	73 dd       	rcall	.-1306   	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
	fprintf(lcdfp, "AA6DQ");
    2484:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <lcdfp>
    2488:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <lcdfp+0x1>
    248c:	9c 01       	movw	r18, r24
    248e:	45 e0       	ldi	r20, 0x05	; 5
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	61 e0       	ldi	r22, 0x01	; 1
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	88 e4       	ldi	r24, 0x48	; 72
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	0e 94 6e 28 	call	0x50dc	; 0x50dc <fwrite>

	while(1) {

		mode_t newMode = param->getMode();
    249e:	8c a5       	ldd	r24, Y+44	; 0x2c
    24a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    24a2:	6c d5       	rcall	.+2776   	; 0x2f7c <_ZN6params7getModeEv>
    24a4:	8e a7       	std	Y+46, r24	; 0x2e

		if ( (curMode == MODE_PARAMS) && (newMode == MODE_NORMAL)) {
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	09 f0       	breq	.+2      	; 0x24ae <main+0x32e>
    24ac:	53 c1       	rjmp	.+678    	; 0x2754 <main+0x5d4>
    24ae:	8e a5       	ldd	r24, Y+46	; 0x2e
    24b0:	88 23       	and	r24, r24
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <main+0x336>
    24b4:	4f c1       	rjmp	.+670    	; 0x2754 <main+0x5d4>

			band = param->getBand();
    24b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    24b8:	9d a5       	ldd	r25, Y+45	; 0x2d
    24ba:	30 d5       	rcall	.+2656   	; 0x2f1c <_ZN6params7getBandEv>
    24bc:	8a 83       	std	Y+2, r24	; 0x02

			if (param->getVfo() == VFOA) {
    24be:	8c a5       	ldd	r24, Y+44	; 0x2c
    24c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    24c2:	3c d5       	rcall	.+2680   	; 0x2f3c <_ZN6params6getVfoEv>
    24c4:	98 2f       	mov	r25, r24
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	99 23       	and	r25, r25
    24ca:	09 f0       	breq	.+2      	; 0x24ce <main+0x34e>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	88 23       	and	r24, r24
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <main+0x354>
    24d2:	7b c0       	rjmp	.+246    	; 0x25ca <main+0x44a>
				curVfo = vfoA;
    24d4:	88 a5       	ldd	r24, Y+40	; 0x28
    24d6:	99 a5       	ldd	r25, Y+41	; 0x29
    24d8:	98 87       	std	Y+8, r25	; 0x08
    24da:	8f 83       	std	Y+7, r24	; 0x07
				vfoA->getTxDisplayFreq(buf, band);
    24dc:	9e 01       	movw	r18, r28
    24de:	2b 5b       	subi	r18, 0xBB	; 187
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	88 a5       	ldd	r24, Y+40	; 0x28
    24e4:	99 a5       	ldd	r25, Y+41	; 0x29
    24e6:	4a 81       	ldd	r20, Y+2	; 0x02
    24e8:	b9 01       	movw	r22, r18
    24ea:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    24ee:	1a 86       	std	Y+10, r1	; 0x0a
    24f0:	19 86       	std	Y+9, r1	; 0x09
    24f2:	24 c0       	rjmp	.+72     	; 0x253c <main+0x3bc>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	68 2f       	mov	r22, r24
    24f8:	62 95       	swap	r22
    24fa:	60 7f       	andi	r22, 0xF0	; 240
    24fc:	9e 01       	movw	r18, r28
    24fe:	2b 5b       	subi	r18, 0xBB	; 187
    2500:	3f 4f       	sbci	r19, 0xFF	; 255
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	82 0f       	add	r24, r18
    2508:	93 1f       	adc	r25, r19
    250a:	fc 01       	movw	r30, r24
    250c:	50 81       	ld	r21, Z
    250e:	28 ad       	ldd	r18, Y+56	; 0x38
    2510:	39 ad       	ldd	r19, Y+57	; 0x39
    2512:	4a ad       	ldd	r20, Y+58	; 0x3a
    2514:	8a a9       	ldd	r24, Y+50	; 0x32
    2516:	9b a9       	ldd	r25, Y+51	; 0x33
    2518:	ac a9       	ldd	r26, Y+52	; 0x34
    251a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    251c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    251e:	59 01       	movw	r10, r18
    2520:	c4 2e       	mov	r12, r20
    2522:	7c 01       	movw	r14, r24
    2524:	0a 2f       	mov	r16, r26
    2526:	26 2f       	mov	r18, r22
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	65 2f       	mov	r22, r21
    252c:	cf 01       	movw	r24, r30
    252e:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
			band = param->getBand();

			if (param->getVfo() == VFOA) {
				curVfo = vfoA;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	9a 87       	std	Y+10, r25	; 0x0a
    253a:	89 87       	std	Y+9, r24	; 0x09
    253c:	ce 01       	movw	r24, r28
    253e:	8b 5b       	subi	r24, 0xBB	; 187
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    2546:	9c 01       	movw	r18, r24
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	82 17       	cp	r24, r18
    254e:	93 07       	cpc	r25, r19
    2550:	88 f2       	brcs	.-94     	; 0x24f4 <main+0x374>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    2552:	9e 01       	movw	r18, r28
    2554:	2b 5b       	subi	r18, 0xBB	; 187
    2556:	3f 4f       	sbci	r19, 0xFF	; 255
    2558:	8a a5       	ldd	r24, Y+42	; 0x2a
    255a:	9b a5       	ldd	r25, Y+43	; 0x2b
    255c:	4a 81       	ldd	r20, Y+2	; 0x02
    255e:	b9 01       	movw	r22, r18
    2560:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    2564:	1c 86       	std	Y+12, r1	; 0x0c
    2566:	1b 86       	std	Y+11, r1	; 0x0b
    2568:	24 c0       	rjmp	.+72     	; 0x25b2 <main+0x432>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    256a:	8b 85       	ldd	r24, Y+11	; 0x0b
    256c:	68 2f       	mov	r22, r24
    256e:	62 95       	swap	r22
    2570:	60 7f       	andi	r22, 0xF0	; 240
    2572:	9e 01       	movw	r18, r28
    2574:	2b 5b       	subi	r18, 0xBB	; 187
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	8b 85       	ldd	r24, Y+11	; 0x0b
    257a:	9c 85       	ldd	r25, Y+12	; 0x0c
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	fc 01       	movw	r30, r24
    2582:	50 81       	ld	r21, Z
    2584:	28 ad       	ldd	r18, Y+56	; 0x38
    2586:	39 ad       	ldd	r19, Y+57	; 0x39
    2588:	4a ad       	ldd	r20, Y+58	; 0x3a
    258a:	8b ad       	ldd	r24, Y+59	; 0x3b
    258c:	9c ad       	ldd	r25, Y+60	; 0x3c
    258e:	ad ad       	ldd	r26, Y+61	; 0x3d
    2590:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2592:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2594:	59 01       	movw	r10, r18
    2596:	c4 2e       	mov	r12, r20
    2598:	7c 01       	movw	r14, r24
    259a:	0a 2f       	mov	r16, r26
    259c:	26 2f       	mov	r18, r22
    259e:	44 e2       	ldi	r20, 0x24	; 36
    25a0:	65 2f       	mov	r22, r21
    25a2:	cf 01       	movw	r24, r30
    25a4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, f, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    25a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	9c 87       	std	Y+12, r25	; 0x0c
    25b0:	8b 87       	std	Y+11, r24	; 0x0b
    25b2:	ce 01       	movw	r24, r28
    25b4:	8b 5b       	subi	r24, 0xBB	; 187
    25b6:	9f 4f       	sbci	r25, 0xFF	; 255
    25b8:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    25bc:	9c 01       	movw	r18, r24
    25be:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	88 f2       	brcs	.-94     	; 0x256a <main+0x3ea>
    25c8:	7a c0       	rjmp	.+244    	; 0x26be <main+0x53e>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

			} else {
				curVfo = vfoB;
    25ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    25cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    25ce:	98 87       	std	Y+8, r25	; 0x08
    25d0:	8f 83       	std	Y+7, r24	; 0x07
				vfoA->getTxDisplayFreq(buf, band);
    25d2:	9e 01       	movw	r18, r28
    25d4:	2b 5b       	subi	r18, 0xBB	; 187
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	88 a5       	ldd	r24, Y+40	; 0x28
    25da:	99 a5       	ldd	r25, Y+41	; 0x29
    25dc:	4a 81       	ldd	r20, Y+2	; 0x02
    25de:	b9 01       	movw	r22, r18
    25e0:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    25e4:	1e 86       	std	Y+14, r1	; 0x0e
    25e6:	1d 86       	std	Y+13, r1	; 0x0d
    25e8:	24 c0       	rjmp	.+72     	; 0x2632 <main+0x4b2>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
    25ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ec:	68 2f       	mov	r22, r24
    25ee:	62 95       	swap	r22
    25f0:	60 7f       	andi	r22, 0xF0	; 240
    25f2:	9e 01       	movw	r18, r28
    25f4:	2b 5b       	subi	r18, 0xBB	; 187
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	82 0f       	add	r24, r18
    25fe:	93 1f       	adc	r25, r19
    2600:	fc 01       	movw	r30, r24
    2602:	50 81       	ld	r21, Z
    2604:	28 ad       	ldd	r18, Y+56	; 0x38
    2606:	39 ad       	ldd	r19, Y+57	; 0x39
    2608:	4a ad       	ldd	r20, Y+58	; 0x3a
    260a:	8b ad       	ldd	r24, Y+59	; 0x3b
    260c:	9c ad       	ldd	r25, Y+60	; 0x3c
    260e:	ad ad       	ldd	r26, Y+61	; 0x3d
    2610:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2612:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2614:	59 01       	movw	r10, r18
    2616:	c4 2e       	mov	r12, r20
    2618:	7c 01       	movw	r14, r24
    261a:	0a 2f       	mov	r16, r26
    261c:	26 2f       	mov	r18, r22
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	65 2f       	mov	r22, r21
    2622:	cf 01       	movw	r24, r30
    2624:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				}

			} else {
				curVfo = vfoB;
				vfoA->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	9e 87       	std	Y+14, r25	; 0x0e
    2630:	8d 87       	std	Y+13, r24	; 0x0d
    2632:	ce 01       	movw	r24, r28
    2634:	8b 5b       	subi	r24, 0xBB	; 187
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    263c:	9c 01       	movw	r18, r24
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	82 17       	cp	r24, r18
    2644:	93 07       	cpc	r25, r19
    2646:	88 f2       	brcs	.-94     	; 0x25ea <main+0x46a>
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
    2648:	9e 01       	movw	r18, r28
    264a:	2b 5b       	subi	r18, 0xBB	; 187
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2650:	9b a5       	ldd	r25, Y+43	; 0x2b
    2652:	4a 81       	ldd	r20, Y+2	; 0x02
    2654:	b9 01       	movw	r22, r18
    2656:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
				for (size_t i = 0; i < strlen(buf); i++) {
    265a:	18 8a       	std	Y+16, r1	; 0x10
    265c:	1f 86       	std	Y+15, r1	; 0x0f
    265e:	24 c0       	rjmp	.+72     	; 0x26a8 <main+0x528>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
    2660:	8f 85       	ldd	r24, Y+15	; 0x0f
    2662:	68 2f       	mov	r22, r24
    2664:	62 95       	swap	r22
    2666:	60 7f       	andi	r22, 0xF0	; 240
    2668:	9e 01       	movw	r18, r28
    266a:	2b 5b       	subi	r18, 0xBB	; 187
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2670:	98 89       	ldd	r25, Y+16	; 0x10
    2672:	82 0f       	add	r24, r18
    2674:	93 1f       	adc	r25, r19
    2676:	fc 01       	movw	r30, r24
    2678:	50 81       	ld	r21, Z
    267a:	28 ad       	ldd	r18, Y+56	; 0x38
    267c:	39 ad       	ldd	r19, Y+57	; 0x39
    267e:	4a ad       	ldd	r20, Y+58	; 0x3a
    2680:	8a a9       	ldd	r24, Y+50	; 0x32
    2682:	9b a9       	ldd	r25, Y+51	; 0x33
    2684:	ac a9       	ldd	r26, Y+52	; 0x34
    2686:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2688:	fd 8d       	ldd	r31, Y+29	; 0x1d
    268a:	59 01       	movw	r10, r18
    268c:	c4 2e       	mov	r12, r20
    268e:	7c 01       	movw	r14, r24
    2690:	0a 2f       	mov	r16, r26
    2692:	26 2f       	mov	r18, r22
    2694:	44 e2       	ldi	r20, 0x24	; 36
    2696:	65 2f       	mov	r22, r21
    2698:	cf 01       	movw	r24, r30
    269a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
				for (size_t i = 0; i < strlen(buf); i++) {
					g->draw2xChar(buf[i], VFOA_LINE, i*2*CHAR_WIDTH, fg_grey, b);
				}

				vfoB->getTxDisplayFreq(buf, band);
				for (size_t i = 0; i < strlen(buf); i++) {
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	98 89       	ldd	r25, Y+16	; 0x10
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
    26a8:	ce 01       	movw	r24, r28
    26aa:	8b 5b       	subi	r24, 0xBB	; 187
    26ac:	9f 4f       	sbci	r25, 0xFF	; 255
    26ae:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    26b2:	9c 01       	movw	r18, r24
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	98 89       	ldd	r25, Y+16	; 0x10
    26b8:	82 17       	cp	r24, r18
    26ba:	93 07       	cpc	r25, r19
    26bc:	88 f2       	brcs	.-94     	; 0x2660 <main+0x4e0>
					g->draw2xChar(buf[i], VFOB_LINE, i*2*CHAR_WIDTH, f, b);
				}

			}
			curVfo->setStep(param->getStep());
    26be:	8c a5       	ldd	r24, Y+44	; 0x2c
    26c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    26c2:	1c d4       	rcall	.+2104   	; 0x2efc <_ZN6params7getStepEv>
    26c4:	28 2f       	mov	r18, r24
    26c6:	8f 81       	ldd	r24, Y+7	; 0x07
    26c8:	98 85       	ldd	r25, Y+8	; 0x08
    26ca:	62 2f       	mov	r22, r18
    26cc:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <_ZN3vfo7setStepE6step_t>
			if (param->getActiveVfo() == RX) {
    26d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    26d4:	43 d4       	rcall	.+2182   	; 0x2f5c <_ZN6params12getActiveVfoEv>
    26d6:	98 2f       	mov	r25, r24
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	99 23       	and	r25, r25
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <main+0x560>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	88 23       	and	r24, r24
    26e2:	e1 f0       	breq	.+56     	; 0x271c <main+0x59c>
				freq = curVfo->getRxFreq(band);
    26e4:	8f 81       	ldd	r24, Y+7	; 0x07
    26e6:	98 85       	ldd	r25, Y+8	; 0x08
    26e8:	6a 81       	ldd	r22, Y+2	; 0x02
    26ea:	0e 94 c5 21 	call	0x438a	; 0x438a <_ZN3vfo9getRxFreqE5_band>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9e 01       	movw	r18, r28
    26f4:	2f 5b       	subi	r18, 0xBF	; 191
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	f9 01       	movw	r30, r18
    26fa:	80 83       	st	Z, r24
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	a2 83       	std	Z+2, r26	; 0x02
    2700:	b3 83       	std	Z+3, r27	; 0x03
				dds(freq);
    2702:	ce 01       	movw	r24, r28
    2704:	8f 5b       	subi	r24, 0xBF	; 191
    2706:	9f 4f       	sbci	r25, 0xFF	; 255
    2708:	fc 01       	movw	r30, r24
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	a2 81       	ldd	r26, Z+2	; 0x02
    2710:	b3 81       	ldd	r27, Z+3	; 0x03
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>
    271a:	19 c0       	rjmp	.+50     	; 0x274e <main+0x5ce>
			} else {
				freq - curVfo->getTxFreq(band);
    271c:	ce 01       	movw	r24, r28
    271e:	8f 5b       	subi	r24, 0xBF	; 191
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	fc 01       	movw	r30, r24
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	a2 81       	ldd	r26, Z+2	; 0x02
    272a:	b3 81       	ldd	r27, Z+3	; 0x03
    272c:	8f 81       	ldd	r24, Y+7	; 0x07
    272e:	98 85       	ldd	r25, Y+8	; 0x08
    2730:	6a 81       	ldd	r22, Y+2	; 0x02
    2732:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN3vfo9getTxFreqE5_band>
				dds(freq);
    2736:	ce 01       	movw	r24, r28
    2738:	8f 5b       	subi	r24, 0xBF	; 191
    273a:	9f 4f       	sbci	r25, 0xFF	; 255
    273c:	fc 01       	movw	r30, r24
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	a2 81       	ldd	r26, Z+2	; 0x02
    2744:	b3 81       	ldd	r27, Z+3	; 0x03
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>
			}
			curMode = newMode;
    274e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	bf c0       	rjmp	.+382    	; 0x28d2 <main+0x752>

		} else if ((newMode == MODE_PARAMS) && (curMode == MODE_NORMAL)) {
    2754:	8e a5       	ldd	r24, Y+46	; 0x2e
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	79 f4       	brne	.+30     	; 0x2778 <main+0x5f8>
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	88 23       	and	r24, r24
    275e:	61 f4       	brne	.+24     	; 0x2778 <main+0x5f8>
				param->updateEnter(enc, pb, l);
    2760:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2762:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2764:	4c a1       	ldd	r20, Y+36	; 0x24
    2766:	5d a1       	ldd	r21, Y+37	; 0x25
    2768:	6e a1       	ldd	r22, Y+38	; 0x26
    276a:	7f a1       	ldd	r23, Y+39	; 0x27
    276c:	8c a5       	ldd	r24, Y+44	; 0x2c
    276e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2770:	a6 d4       	rcall	.+2380   	; 0x30be <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>
				curMode = newMode;
    2772:	8e a5       	ldd	r24, Y+46	; 0x2e
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	ad c0       	rjmp	.+346    	; 0x28d2 <main+0x752>

		} else {

			curMode = newMode;
    2778:	8e a5       	ldd	r24, Y+46	; 0x2e
    277a:	89 83       	std	Y+1, r24	; 0x01
		
			switch (curMode) {
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	91 05       	cpc	r25, r1
    2786:	39 f0       	breq	.+14     	; 0x2796 <main+0x616>
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	91 05       	cpc	r25, r1
    278c:	09 f4       	brne	.+2      	; 0x2790 <main+0x610>
    278e:	a0 c0       	rjmp	.+320    	; 0x28d0 <main+0x750>
    2790:	89 2b       	or	r24, r25
    2792:	59 f0       	breq	.+22     	; 0x27aa <main+0x62a>
    2794:	9e c0       	rjmp	.+316    	; 0x28d2 <main+0x752>

				case MODE_PARAMS:
					param->update(enc, pb, l);
    2796:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2798:	3b 8d       	ldd	r19, Y+27	; 0x1b
    279a:	4c a1       	ldd	r20, Y+36	; 0x24
    279c:	5d a1       	ldd	r21, Y+37	; 0x25
    279e:	6e a1       	ldd	r22, Y+38	; 0x26
    27a0:	7f a1       	ldd	r23, Y+39	; 0x27
    27a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    27a6:	3a d5       	rcall	.+2676   	; 0x321c <_ZN6params6updateEP7EncoderP2SwP3Lcd>
					break;
    27a8:	94 c0       	rjmp	.+296    	; 0x28d2 <main+0x752>
				//
				// for now, no keyer, just straight key
				//

				case MODE_NORMAL:
					if (pb->hasEvent()) {
    27aa:	8c a1       	ldd	r24, Y+36	; 0x24
    27ac:	9d a1       	ldd	r25, Y+37	; 0x25
    27ae:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN2Sw8hasEventEv>
    27b2:	88 23       	and	r24, r24
    27b4:	f9 f0       	breq	.+62     	; 0x27f4 <main+0x674>
						if (pb->getEvent() == EV_CLOSE) {
    27b6:	8c a1       	ldd	r24, Y+36	; 0x24
    27b8:	9d a1       	ldd	r25, Y+37	; 0x25
    27ba:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
    27be:	98 2f       	mov	r25, r24
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	92 30       	cpi	r25, 0x02	; 2
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <main+0x648>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	88 23       	and	r24, r24
    27ca:	79 f4       	brne	.+30     	; 0x27ea <main+0x66a>

						} else if (pb->getEvent() == EV_OPEN) {
    27cc:	8c a1       	ldd	r24, Y+36	; 0x24
    27ce:	9d a1       	ldd	r25, Y+37	; 0x25
    27d0:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
    27d4:	98 2f       	mov	r25, r24
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	91 30       	cpi	r25, 0x01	; 1
    27da:	09 f0       	breq	.+2      	; 0x27de <main+0x65e>
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	88 23       	and	r24, r24
    27e0:	21 f0       	breq	.+8      	; 0x27ea <main+0x66a>
							param->setMode(MODE_PARAMS);
    27e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    27e6:	61 e0       	ldi	r22, 0x01	; 1
    27e8:	d9 d3       	rcall	.+1970   	; 0x2f9c <_ZN6params7setModeE7_mode_t>
						}
						pb->clearEvent();
    27ea:	8c a1       	ldd	r24, Y+36	; 0x24
    27ec:	9d a1       	ldd	r25, Y+37	; 0x25
    27ee:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN2Sw10clearEventEv>
						break;
    27f2:	6f c0       	rjmp	.+222    	; 0x28d2 <main+0x752>
					}

					if (enc->hasEvent()) {
    27f4:	8e a1       	ldd	r24, Y+38	; 0x26
    27f6:	9f a1       	ldd	r25, Y+39	; 0x27
    27f8:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN7Encoder8hasEventEv>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <main+0x682>
    2800:	66 c0       	rjmp	.+204    	; 0x28ce <main+0x74e>
						uint16_t line;
						curVfo->update(band);
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	98 85       	ldd	r25, Y+8	; 0x08
    2806:	6a 81       	ldd	r22, Y+2	; 0x02
    2808:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN3vfo6updateEh>
						enc->clearEvent();
    280c:	8e a1       	ldd	r24, Y+38	; 0x26
    280e:	9f a1       	ldd	r25, Y+39	; 0x27
    2810:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN7Encoder10clearEventEv>

	freq = curVfo->getTxFreq(band);
    2814:	8f 81       	ldd	r24, Y+7	; 0x07
    2816:	98 85       	ldd	r25, Y+8	; 0x08
    2818:	6a 81       	ldd	r22, Y+2	; 0x02
    281a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN3vfo9getTxFreqE5_band>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 01       	movw	r18, r28
    2824:	2f 5b       	subi	r18, 0xBF	; 191
    2826:	3f 4f       	sbci	r19, 0xFF	; 255
    2828:	f9 01       	movw	r30, r18
    282a:	80 83       	st	Z, r24
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	a2 83       	std	Z+2, r26	; 0x02
    2830:	b3 83       	std	Z+3, r27	; 0x03
	dds(freq);
    2832:	ce 01       	movw	r24, r28
    2834:	8f 5b       	subi	r24, 0xBF	; 191
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	fc 01       	movw	r30, r24
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	a2 81       	ldd	r26, Z+2	; 0x02
    2840:	b3 81       	ldd	r27, Z+3	; 0x03
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>

						curVfo->getTxDisplayFreq(buf, band);
    284a:	9e 01       	movw	r18, r28
    284c:	2b 5b       	subi	r18, 0xBB	; 187
    284e:	3f 4f       	sbci	r19, 0xFF	; 255
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	4a 81       	ldd	r20, Y+2	; 0x02
    2856:	b9 01       	movw	r22, r18
    2858:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZN3vfo16getTxDisplayFreqEPc5_band>
						line = curVfo->getLine();
    285c:	8f 81       	ldd	r24, Y+7	; 0x07
    285e:	98 85       	ldd	r25, Y+8	; 0x08
    2860:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <_ZN3vfo7getLineEv>
    2864:	98 ab       	std	Y+48, r25	; 0x30
    2866:	8f a7       	std	Y+47, r24	; 0x2f
						for (size_t i = 0; i < strlen(buf); i++) {
    2868:	1a 8a       	std	Y+18, r1	; 0x12
    286a:	19 8a       	std	Y+17, r1	; 0x11
    286c:	25 c0       	rjmp	.+74     	; 0x28b8 <main+0x738>
							g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f, b);
    286e:	89 89       	ldd	r24, Y+17	; 0x11
    2870:	78 2f       	mov	r23, r24
    2872:	72 95       	swap	r23
    2874:	70 7f       	andi	r23, 0xF0	; 240
    2876:	6f a5       	ldd	r22, Y+47	; 0x2f
    2878:	9e 01       	movw	r18, r28
    287a:	2b 5b       	subi	r18, 0xBB	; 187
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	89 89       	ldd	r24, Y+17	; 0x11
    2880:	9a 89       	ldd	r25, Y+18	; 0x12
    2882:	82 0f       	add	r24, r18
    2884:	93 1f       	adc	r25, r19
    2886:	fc 01       	movw	r30, r24
    2888:	50 81       	ld	r21, Z
    288a:	28 ad       	ldd	r18, Y+56	; 0x38
    288c:	39 ad       	ldd	r19, Y+57	; 0x39
    288e:	4a ad       	ldd	r20, Y+58	; 0x3a
    2890:	8a a9       	ldd	r24, Y+50	; 0x32
    2892:	9b a9       	ldd	r25, Y+51	; 0x33
    2894:	ac a9       	ldd	r26, Y+52	; 0x34
    2896:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2898:	fd 8d       	ldd	r31, Y+29	; 0x1d
    289a:	59 01       	movw	r10, r18
    289c:	c4 2e       	mov	r12, r20
    289e:	7c 01       	movw	r14, r24
    28a0:	0a 2f       	mov	r16, r26
    28a2:	27 2f       	mov	r18, r23
    28a4:	46 2f       	mov	r20, r22
    28a6:	65 2f       	mov	r22, r21
    28a8:	cf 01       	movw	r24, r30
    28aa:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN8Graphics10draw2xCharEchh9_pixColorS0_>
	freq = curVfo->getTxFreq(band);
	dds(freq);

						curVfo->getTxDisplayFreq(buf, band);
						line = curVfo->getLine();
						for (size_t i = 0; i < strlen(buf); i++) {
    28ae:	89 89       	ldd	r24, Y+17	; 0x11
    28b0:	9a 89       	ldd	r25, Y+18	; 0x12
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	9a 8b       	std	Y+18, r25	; 0x12
    28b6:	89 8b       	std	Y+17, r24	; 0x11
    28b8:	ce 01       	movw	r24, r28
    28ba:	8b 5b       	subi	r24, 0xBB	; 187
    28bc:	9f 4f       	sbci	r25, 0xFF	; 255
    28be:	0e 94 65 28 	call	0x50ca	; 0x50ca <strlen>
    28c2:	9c 01       	movw	r18, r24
    28c4:	89 89       	ldd	r24, Y+17	; 0x11
    28c6:	9a 89       	ldd	r25, Y+18	; 0x12
    28c8:	82 17       	cp	r24, r18
    28ca:	93 07       	cpc	r25, r19
    28cc:	80 f2       	brcs	.-96     	; 0x286e <main+0x6ee>
							g->draw2xChar(buf[i], line, i*2*CHAR_WIDTH, f, b);
						}
					}
					break;
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <main+0x752>

				case MODE_SETUP:
					break;
    28d0:	00 00       	nop
			}
		}

		if (dot->hasEvent()) {
    28d2:	88 a1       	ldd	r24, Y+32	; 0x20
    28d4:	99 a1       	ldd	r25, Y+33	; 0x21
    28d6:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN2Sw8hasEventEv>
    28da:	88 23       	and	r24, r24
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <main+0x760>
    28de:	64 c0       	rjmp	.+200    	; 0x29a8 <main+0x828>
			if (dot->getEvent() == EV_CLOSE) {
    28e0:	88 a1       	ldd	r24, Y+32	; 0x20
    28e2:	99 a1       	ldd	r25, Y+33	; 0x21
    28e4:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
    28e8:	98 2f       	mov	r25, r24
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	92 30       	cpi	r25, 0x02	; 2
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <main+0x772>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	88 23       	and	r24, r24
    28f4:	59 f1       	breq	.+86     	; 0x294c <main+0x7cc>
				freq = curVfo->getTxFreq(band);
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	98 85       	ldd	r25, Y+8	; 0x08
    28fa:	6a 81       	ldd	r22, Y+2	; 0x02
    28fc:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN3vfo9getTxFreqE5_band>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 01       	movw	r18, r28
    2906:	2f 5b       	subi	r18, 0xBF	; 191
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	f9 01       	movw	r30, r18
    290c:	80 83       	st	Z, r24
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	a2 83       	std	Z+2, r26	; 0x02
    2912:	b3 83       	std	Z+3, r27	; 0x03
				dds(freq);
    2914:	ce 01       	movw	r24, r28
    2916:	8f 5b       	subi	r24, 0xBF	; 191
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	fc 01       	movw	r30, r24
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	a2 81       	ldd	r26, Z+2	; 0x02
    2922:	b3 81       	ldd	r27, Z+3	; 0x03
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>
				reg = PORTD;
    292c:	8b e2       	ldi	r24, 0x2B	; 43
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	fc 01       	movw	r30, r24
    2932:	80 81       	ld	r24, Z
    2934:	89 ab       	std	Y+49, r24	; 0x31
				PORTD = reg | RLY_MSK;
    2936:	8b e2       	ldi	r24, 0x2B	; 43
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	29 a9       	ldd	r18, Y+49	; 0x31
    293c:	20 64       	ori	r18, 0x40	; 64
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
				param->setActiveVfo(TX);
    2942:	8c a5       	ldd	r24, Y+44	; 0x2c
    2944:	9d a5       	ldd	r25, Y+45	; 0x2d
    2946:	61 e0       	ldi	r22, 0x01	; 1
    2948:	3d d3       	rcall	.+1658   	; 0x2fc4 <_ZN6params12setActiveVfoE10vfo_actv_t>
    294a:	2a c0       	rjmp	.+84     	; 0x29a0 <main+0x820>
			} else {
				freq = curVfo->getRxFreq(band);
    294c:	8f 81       	ldd	r24, Y+7	; 0x07
    294e:	98 85       	ldd	r25, Y+8	; 0x08
    2950:	6a 81       	ldd	r22, Y+2	; 0x02
    2952:	0e 94 c5 21 	call	0x438a	; 0x438a <_ZN3vfo9getRxFreqE5_band>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e 01       	movw	r18, r28
    295c:	2f 5b       	subi	r18, 0xBF	; 191
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	f9 01       	movw	r30, r18
    2962:	80 83       	st	Z, r24
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	a2 83       	std	Z+2, r26	; 0x02
    2968:	b3 83       	std	Z+3, r27	; 0x03
				dds(freq);
    296a:	ce 01       	movw	r24, r28
    296c:	8f 5b       	subi	r24, 0xBF	; 191
    296e:	9f 4f       	sbci	r25, 0xFF	; 255
    2970:	fc 01       	movw	r30, r24
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	a2 81       	ldd	r26, Z+2	; 0x02
    2978:	b3 81       	ldd	r27, Z+3	; 0x03
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <dds>
				reg = PORTD;
    2982:	8b e2       	ldi	r24, 0x2B	; 43
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	fc 01       	movw	r30, r24
    2988:	80 81       	ld	r24, Z
    298a:	89 ab       	std	Y+49, r24	; 0x31
				PORTD = reg & ~RLY_MSK;
    298c:	8b e2       	ldi	r24, 0x2B	; 43
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	29 a9       	ldd	r18, Y+49	; 0x31
    2992:	2f 7b       	andi	r18, 0xBF	; 191
    2994:	fc 01       	movw	r30, r24
    2996:	20 83       	st	Z, r18
				param->setActiveVfo(RX);
    2998:	8c a5       	ldd	r24, Y+44	; 0x2c
    299a:	9d a5       	ldd	r25, Y+45	; 0x2d
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	12 d3       	rcall	.+1572   	; 0x2fc4 <_ZN6params12setActiveVfoE10vfo_actv_t>
			}
			dot->clearEvent();
    29a0:	88 a1       	ldd	r24, Y+32	; 0x20
    29a2:	99 a1       	ldd	r25, Y+33	; 0x21
    29a4:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN2Sw10clearEventEv>
		}

		if (dash->hasEvent()) {
    29a8:	8a a1       	ldd	r24, Y+34	; 0x22
    29aa:	9b a1       	ldd	r25, Y+35	; 0x23
    29ac:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN2Sw8hasEventEv>
    29b0:	88 23       	and	r24, r24
    29b2:	91 f1       	breq	.+100    	; 0x2a18 <main+0x898>
			if (dash->getEvent() == EV_CLOSE) {
    29b4:	8a a1       	ldd	r24, Y+34	; 0x22
    29b6:	9b a1       	ldd	r25, Y+35	; 0x23
    29b8:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN2Sw8getEventEv>
    29bc:	98 2f       	mov	r25, r24
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	92 30       	cpi	r25, 0x02	; 2
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <main+0x846>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	88 23       	and	r24, r24
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <main+0x862>
				sprintf(buf,"DASH_CLOSE");
    29ca:	ce 01       	movw	r24, r28
    29cc:	8b 5b       	subi	r24, 0xBB	; 187
    29ce:	9f 4f       	sbci	r25, 0xFF	; 255
    29d0:	2b e0       	ldi	r18, 0x0B	; 11
    29d2:	ee e4       	ldi	r30, 0x4E	; 78
    29d4:	f2 e0       	ldi	r31, 0x02	; 2
    29d6:	dc 01       	movw	r26, r24
    29d8:	01 90       	ld	r0, Z+
    29da:	0d 92       	st	X+, r0
    29dc:	2a 95       	dec	r18
    29de:	e1 f7       	brne	.-8      	; 0x29d8 <main+0x858>
    29e0:	0b c0       	rjmp	.+22     	; 0x29f8 <main+0x878>
				} else {
				sprintf(buf,"DASH_OPEN ");
    29e2:	ce 01       	movw	r24, r28
    29e4:	8b 5b       	subi	r24, 0xBB	; 187
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	2b e0       	ldi	r18, 0x0B	; 11
    29ea:	e9 e5       	ldi	r30, 0x59	; 89
    29ec:	f2 e0       	ldi	r31, 0x02	; 2
    29ee:	dc 01       	movw	r26, r24
    29f0:	01 90       	ld	r0, Z+
    29f2:	0d 92       	st	X+, r0
    29f4:	2a 95       	dec	r18
    29f6:	e1 f7       	brne	.-8      	; 0x29f0 <main+0x870>
			}
			dash->clearEvent();
    29f8:	8a a1       	ldd	r24, Y+34	; 0x22
    29fa:	9b a1       	ldd	r25, Y+35	; 0x23
    29fc:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN2Sw10clearEventEv>
			l->gotoxy(9,0);
    2a00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	69 e0       	ldi	r22, 0x09	; 9
    2a08:	b0 da       	rcall	.-2720   	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
			l->puts(buf);
    2a0a:	9e 01       	movw	r18, r28
    2a0c:	2b 5b       	subi	r18, 0xBB	; 187
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a12:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a14:	b9 01       	movw	r22, r18
    2a16:	1c da       	rcall	.-3016   	; 0x1e50 <_ZN3Lcd4putsEPKc>
			g->gotoxy(9,12);
			fprintf(lcdfp, "%02d:%02d:%02d", hours,mins, secs);
		}
#endif

	}
    2a18:	42 cd       	rjmp	.-1404   	; 0x249e <main+0x31e>

00002a1a <_Z6memcpyPvPKvj>:
{PARAM_KEY_SPEED,{7,14},"SPD ",		{7,18}	},
{PARAM_ACT_VFO,	{8,0},	"MODE ",	{8,5}	}
};


void * memcpy(void *dest, const void* src, size_t cnt) {
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	2a 97       	sbiw	r28, 0x0a	; 10
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
    2a32:	78 87       	std	Y+8, r23	; 0x08
    2a34:	6f 83       	std	Y+7, r22	; 0x07
    2a36:	5a 87       	std	Y+10, r21	; 0x0a
    2a38:	49 87       	std	Y+9, r20	; 0x09
	char *pdst = (char *) dest;
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	9a 83       	std	Y+2, r25	; 0x02
    2a40:	89 83       	std	Y+1, r24	; 0x01
	char *psrc = (char *)src;
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	98 85       	ldd	r25, Y+8	; 0x08
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03

	while (cnt--) {
    2a4a:	12 c0       	rjmp	.+36     	; 0x2a70 <_Z6memcpyPvPKvj+0x56>
		*pdst++ = *psrc++;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	9c 01       	movw	r18, r24
    2a52:	2f 5f       	subi	r18, 0xFF	; 255
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	3a 83       	std	Y+2, r19	; 0x02
    2a58:	29 83       	std	Y+1, r18	; 0x01
    2a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a5e:	a9 01       	movw	r20, r18
    2a60:	4f 5f       	subi	r20, 0xFF	; 255
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	5c 83       	std	Y+4, r21	; 0x04
    2a66:	4b 83       	std	Y+3, r20	; 0x03
    2a68:	f9 01       	movw	r30, r18
    2a6a:	20 81       	ld	r18, Z
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	20 83       	st	Z, r18

void * memcpy(void *dest, const void* src, size_t cnt) {
	char *pdst = (char *) dest;
	char *psrc = (char *)src;

	while (cnt--) {
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	9c 01       	movw	r18, r24
    2a76:	21 50       	subi	r18, 0x01	; 1
    2a78:	31 09       	sbc	r19, r1
    2a7a:	3a 87       	std	Y+10, r19	; 0x0a
    2a7c:	29 87       	std	Y+9, r18	; 0x09
    2a7e:	21 e0       	ldi	r18, 0x01	; 1
    2a80:	89 2b       	or	r24, r25
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <_Z6memcpyPvPKvj+0x6c>
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	22 23       	and	r18, r18
    2a88:	09 f7       	brne	.-62     	; 0x2a4c <_Z6memcpyPvPKvj+0x32>
		*pdst++ = *psrc++;
	}
	return dest;
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2a8e:	2a 96       	adiw	r28, 0x0a	; 10
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	08 95       	ret

00002aa0 <_ZN6paramsC1EP8Graphics>:
	return c;
}



params::params(Graphics *l) {
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <_ZN6paramsC1EP8Graphics+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <_ZN6paramsC1EP8Graphics+0x8>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	7c 83       	std	Y+4, r23	; 0x04
    2ab2:	6b 83       	std	Y+3, r22	; 0x03
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN8CallbackC1Ev>
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	22 ef       	ldi	r18, 0xF2	; 242
    2ac2:	32 e0       	ldi	r19, 0x02	; 2
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	31 83       	std	Z+1, r19	; 0x01
    2ac8:	20 83       	st	Z, r18
	step = STEP_100HZ;
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	21 e0       	ldi	r18, 0x01	; 1
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	22 83       	std	Z+2, r18	; 0x02
	band = BAND_40;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad8:	22 e0       	ldi	r18, 0x02	; 2
    2ada:	fc 01       	movw	r30, r24
    2adc:	23 83       	std	Z+3, r18	; 0x03
	vfo = VFOA;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	14 82       	std	Z+4, r1	; 0x04
	activeVfo = RX;
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	fc 01       	movw	r30, r24
    2aec:	15 82       	std	Z+5, r1	; 0x05
	mode = MODE_NORMAL;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	fc 01       	movw	r30, r24
    2af4:	16 82       	std	Z+6, r1	; 0x06
	key = KEY_ST;
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	fc 01       	movw	r30, r24
    2afc:	17 82       	std	Z+7, r1	; 0x07
	speed = 18;
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	22 e1       	ldi	r18, 0x12	; 18
    2b04:	fc 01       	movw	r30, r24
    2b06:	20 87       	std	Z+8, r18	; 0x08
	exitParamMode = false;
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	84 5b       	subi	r24, 0xB4	; 180
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	fc 01       	movw	r30, r24
    2b12:	10 82       	st	Z, r1
	lcd = l;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	80 5b       	subi	r24, 0xB0	; 176
    2b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b20:	fc 01       	movw	r30, r24
    2b22:	31 83       	std	Z+1, r19	; 0x01
    2b24:	20 83       	st	Z, r18
	tc = BLACK;
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2a:	88 5a       	subi	r24, 0xA8	; 168
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	fc 01       	movw	r30, r24
    2b30:	10 82       	st	Z, r1
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	87 5a       	subi	r24, 0xA7	; 167
    2b38:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	10 82       	st	Z, r1
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	86 5a       	subi	r24, 0xA6	; 166
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	fc 01       	movw	r30, r24
    2b48:	10 82       	st	Z, r1
	fgc = WHITE;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	8e 5a       	subi	r24, 0xAE	; 174
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	2c ef       	ldi	r18, 0xFC	; 252
    2b54:	fc 01       	movw	r30, r24
    2b56:	20 83       	st	Z, r18
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5c:	8d 5a       	subi	r24, 0xAD	; 173
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	2c ef       	ldi	r18, 0xFC	; 252
    2b62:	fc 01       	movw	r30, r24
    2b64:	20 83       	st	Z, r18
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	8c 5a       	subi	r24, 0xAC	; 172
    2b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6e:	2c ef       	ldi	r18, 0xFC	; 252
    2b70:	fc 01       	movw	r30, r24
    2b72:	20 83       	st	Z, r18
	bgc = LTGREEN;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	8b 5a       	subi	r24, 0xAB	; 171
    2b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	10 82       	st	Z, r1
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	8a 5a       	subi	r24, 0xAA	; 170
    2b86:	9f 4f       	sbci	r25, 0xFF	; 255
    2b88:	fc 01       	movw	r30, r24
    2b8a:	10 82       	st	Z, r1
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	89 5a       	subi	r24, 0xA9	; 169
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	2c e4       	ldi	r18, 0x4C	; 76
    2b96:	fc 01       	movw	r30, r24
    2b98:	20 83       	st	Z, r18

	memcpy(param_display,default_param_display, sizeof(param_display));
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	09 96       	adiw	r24, 0x09	; 9
    2ba0:	42 e4       	ldi	r20, 0x42	; 66
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	60 e5       	ldi	r22, 0x50	; 80
    2ba6:	71 e0       	ldi	r23, 0x01	; 1
    2ba8:	38 df       	rcall	.-400    	; 0x2a1a <_Z6memcpyPvPKvj>
	initParams(l);
    2baa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bac:	3c 81       	ldd	r19, Y+4	; 0x04
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	b9 01       	movw	r22, r18
    2bb4:	1a d0       	rcall	.+52     	; 0x2bea <_ZN6params10initParamsEP3Lcd>
}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	08 95       	ret

00002bc4 <_ZN6params8callbackEv>:


void params::callback(void) {
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <_ZN6params8callbackEv+0x6>
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	exitParamMode = true;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	84 5b       	subi	r24, 0xB4	; 180
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	21 e0       	ldi	r18, 0x01	; 1
    2bdc:	fc 01       	movw	r30, r24
    2bde:	20 83       	st	Z, r18
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	08 95       	ret

00002bea <_ZN6params10initParamsEP3Lcd>:

void params::initParams(Lcd *lcd) {
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	6a 97       	sbiw	r28, 0x1a	; 26
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	98 8f       	std	Y+24, r25	; 0x18
    2c06:	8f 8b       	std	Y+23, r24	; 0x17
    2c08:	7a 8f       	std	Y+26, r23	; 0x1a
    2c0a:	69 8f       	std	Y+25, r22	; 0x19
	uint16_t line;
	uint16_t col;
	const char *valp = NULL;
    2c0c:	1a 82       	std	Y+2, r1	; 0x02
    2c0e:	19 82       	std	Y+1, r1	; 0x01
	char buf[16];

	curParam = PARAM_STEP;
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	85 5b       	subi	r24, 0xB5	; 181
    2c16:	9f 4f       	sbci	r25, 0xFF	; 255
    2c18:	fc 01       	movw	r30, r24
    2c1a:	10 82       	st	Z, r1

	while (curParam != PARAM_END) {
    2c1c:	54 c1       	rjmp	.+680    	; 0x2ec6 <_ZN6params10initParamsEP3Lcd+0x2dc>
		line = param_display[curParam].label_psn.line;
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	85 5b       	subi	r24, 0xB5	; 181
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	fc 01       	movw	r30, r24
    2c28:	80 81       	ld	r24, Z
    2c2a:	48 2f       	mov	r20, r24
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	2f 89       	ldd	r18, Y+23	; 0x17
    2c30:	38 8d       	ldd	r19, Y+24	; 0x18
    2c32:	6b e0       	ldi	r22, 0x0B	; 11
    2c34:	64 9f       	mul	r22, r20
    2c36:	c0 01       	movw	r24, r0
    2c38:	65 9f       	mul	r22, r21
    2c3a:	90 0d       	add	r25, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	82 0f       	add	r24, r18
    2c40:	93 1f       	adc	r25, r19
    2c42:	0a 96       	adiw	r24, 0x0a	; 10
    2c44:	fc 01       	movw	r30, r24
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
		col =  param_display[curParam].label_psn.col;
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	85 5b       	subi	r24, 0xB5	; 181
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	fc 01       	movw	r30, r24
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	2f 89       	ldd	r18, Y+23	; 0x17
    2c60:	38 8d       	ldd	r19, Y+24	; 0x18
    2c62:	6b e0       	ldi	r22, 0x0B	; 11
    2c64:	64 9f       	mul	r22, r20
    2c66:	c0 01       	movw	r24, r0
    2c68:	65 9f       	mul	r22, r21
    2c6a:	90 0d       	add	r25, r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	0c 96       	adiw	r24, 0x0c	; 12
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
		lcd->gotoxy(line,col);
    2c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c80:	2b 81       	ldd	r18, Y+3	; 0x03
    2c82:	89 8d       	ldd	r24, Y+25	; 0x19
    2c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c86:	43 2f       	mov	r20, r19
    2c88:	62 2f       	mov	r22, r18
    2c8a:	6f d9       	rcall	.-3362   	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	85 5b       	subi	r24, 0xB5	; 181
    2c92:	9f 4f       	sbci	r25, 0xFF	; 255
    2c94:	fc 01       	movw	r30, r24
    2c96:	80 81       	ld	r24, Z
    2c98:	48 2f       	mov	r20, r24
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	2f 89       	ldd	r18, Y+23	; 0x17
    2c9e:	38 8d       	ldd	r19, Y+24	; 0x18
    2ca0:	6b e0       	ldi	r22, 0x0B	; 11
    2ca2:	64 9f       	mul	r22, r20
    2ca4:	c0 01       	movw	r24, r0
    2ca6:	65 9f       	mul	r22, r21
    2ca8:	90 0d       	add	r25, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	82 0f       	add	r24, r18
    2cae:	93 1f       	adc	r25, r19
    2cb0:	0e 96       	adiw	r24, 0x0e	; 14
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	8b 5a       	subi	r24, 0xAB	; 171
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	20 81       	ld	r18, Z
    2cc4:	31 81       	ldd	r19, Z+1	; 0x01
    2cc6:	42 81       	ldd	r20, Z+2	; 0x02
    2cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ccc:	8e 5a       	subi	r24, 0xAE	; 174
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	a2 81       	ldd	r26, Z+2	; 0x02
    2cd8:	e9 8d       	ldd	r30, Y+25	; 0x19
    2cda:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2cdc:	79 01       	movw	r14, r18
    2cde:	04 2f       	mov	r16, r20
    2ce0:	9c 01       	movw	r18, r24
    2ce2:	4a 2f       	mov	r20, r26
    2ce4:	cf 01       	movw	r24, r30
    2ce6:	e8 d8       	rcall	.-3632   	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>

		line = param_display[curParam].val_psn.line;
    2ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cea:	98 8d       	ldd	r25, Y+24	; 0x18
    2cec:	85 5b       	subi	r24, 0xB5	; 181
    2cee:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	80 81       	ld	r24, Z
    2cf4:	48 2f       	mov	r20, r24
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	2f 89       	ldd	r18, Y+23	; 0x17
    2cfa:	38 8d       	ldd	r19, Y+24	; 0x18
    2cfc:	6b e0       	ldi	r22, 0x0B	; 11
    2cfe:	64 9f       	mul	r22, r20
    2d00:	c0 01       	movw	r24, r0
    2d02:	65 9f       	mul	r22, r21
    2d04:	90 0d       	add	r25, r0
    2d06:	11 24       	eor	r1, r1
    2d08:	82 0f       	add	r24, r18
    2d0a:	93 1f       	adc	r25, r19
    2d0c:	40 96       	adiw	r24, 0x10	; 16
    2d0e:	fc 01       	movw	r30, r24
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
		col =  param_display[curParam].val_psn.col;
    2d18:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1c:	85 5b       	subi	r24, 0xB5	; 181
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	fc 01       	movw	r30, r24
    2d22:	80 81       	ld	r24, Z
    2d24:	48 2f       	mov	r20, r24
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	2f 89       	ldd	r18, Y+23	; 0x17
    2d2a:	38 8d       	ldd	r19, Y+24	; 0x18
    2d2c:	6b e0       	ldi	r22, 0x0B	; 11
    2d2e:	64 9f       	mul	r22, r20
    2d30:	c0 01       	movw	r24, r0
    2d32:	65 9f       	mul	r22, r21
    2d34:	90 0d       	add	r25, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	82 0f       	add	r24, r18
    2d3a:	93 1f       	adc	r25, r19
    2d3c:	42 96       	adiw	r24, 0x12	; 18
    2d3e:	fc 01       	movw	r30, r24
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
		lcd->gotoxy(line,col);
    2d48:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d50:	43 2f       	mov	r20, r19
    2d52:	62 2f       	mov	r22, r18
    2d54:	0a d9       	rcall	.-3564   	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
		switch(curParam) {
    2d56:	8f 89       	ldd	r24, Y+23	; 0x17
    2d58:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5a:	85 5b       	subi	r24, 0xB5	; 181
    2d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5e:	fc 01       	movw	r30, r24
    2d60:	80 81       	ld	r24, Z
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	82 30       	cpi	r24, 0x02	; 2
    2d68:	91 05       	cpc	r25, r1
    2d6a:	99 f1       	breq	.+102    	; 0x2dd2 <_ZN6params10initParamsEP3Lcd+0x1e8>
    2d6c:	83 30       	cpi	r24, 0x03	; 3
    2d6e:	91 05       	cpc	r25, r1
    2d70:	2c f4       	brge	.+10     	; 0x2d7c <_ZN6params10initParamsEP3Lcd+0x192>
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	71 f0       	breq	.+28     	; 0x2d92 <_ZN6params10initParamsEP3Lcd+0x1a8>
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	e1 f0       	breq	.+56     	; 0x2db2 <_ZN6params10initParamsEP3Lcd+0x1c8>
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
				break;
						
			default:
				break;
    2d7a:	7d c0       	rjmp	.+250    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
		lcd->puts(param_display[curParam].label, fgc, bgc);

		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
    2d7c:	84 30       	cpi	r24, 0x04	; 4
    2d7e:	91 05       	cpc	r25, r1
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <_ZN6params10initParamsEP3Lcd+0x19a>
    2d82:	47 c0       	rjmp	.+142    	; 0x2e12 <_ZN6params10initParamsEP3Lcd+0x228>
    2d84:	84 30       	cpi	r24, 0x04	; 4
    2d86:	91 05       	cpc	r25, r1
    2d88:	a4 f1       	brlt	.+104    	; 0x2df2 <_ZN6params10initParamsEP3Lcd+0x208>
    2d8a:	05 97       	sbiw	r24, 0x05	; 5
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <_ZN6params10initParamsEP3Lcd+0x1a6>
    2d8e:	63 c0       	rjmp	.+198    	; 0x2e56 <_ZN6params10initParamsEP3Lcd+0x26c>
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
				break;
						
			default:
				break;
    2d90:	72 c0       	rjmp	.+228    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
		line = param_display[curParam].val_psn.line;
		col =  param_display[curParam].val_psn.col;
		lcd->gotoxy(line,col);
		switch(curParam) {
			case PARAM_STEP:
				valp = step_strings[step];
    2d92:	8f 89       	ldd	r24, Y+23	; 0x17
    2d94:	98 8d       	ldd	r25, Y+24	; 0x18
    2d96:	fc 01       	movw	r30, r24
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	8a 5c       	subi	r24, 0xCA	; 202
    2da4:	9e 4f       	sbci	r25, 0xFE	; 254
    2da6:	fc 01       	movw	r30, r24
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
				break;	
    2db0:	62 c0       	rjmp	.+196    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
				
			case PARAM_BAND:
				valp = band_strings[band];
    2db2:	8f 89       	ldd	r24, Y+23	; 0x17
    2db4:	98 8d       	ldd	r25, Y+24	; 0x18
    2db6:	fc 01       	movw	r30, r24
    2db8:	83 81       	ldd	r24, Z+3	; 0x03
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	8c 5d       	subi	r24, 0xDC	; 220
    2dc4:	9e 4f       	sbci	r25, 0xFE	; 254
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
				break;
    2dd0:	52 c0       	rjmp	.+164    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
				
			case PARAM_VFO:
				valp = vfo_strings[vfo];
    2dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	84 81       	ldd	r24, Z+4	; 0x04
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	80 5c       	subi	r24, 0xC0	; 192
    2de4:	9e 4f       	sbci	r25, 0xFE	; 254
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	91 81       	ldd	r25, Z+1	; 0x01
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
				break;
    2df0:	42 c0       	rjmp	.+132    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
			
			case PARAM_KEY:
				valp = key_strings[key];
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	98 8d       	ldd	r25, Y+24	; 0x18
    2df6:	fc 01       	movw	r30, r24
    2df8:	87 81       	ldd	r24, Z+7	; 0x07
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	86 5b       	subi	r24, 0xB6	; 182
    2e04:	9e 4f       	sbci	r25, 0xFE	; 254
    2e06:	fc 01       	movw	r30, r24
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
				break;
    2e10:	32 c0       	rjmp	.+100    	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
				
			case PARAM_KEY_SPEED:
				sprintf(buf,"%d", speed);
    2e12:	8f 89       	ldd	r24, Y+23	; 0x17
    2e14:	98 8d       	ldd	r25, Y+24	; 0x18
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 85       	ldd	r24, Z+8	; 0x08
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	29 2f       	mov	r18, r25
    2e20:	2f 93       	push	r18
    2e22:	8f 93       	push	r24
    2e24:	85 ed       	ldi	r24, 0xD5	; 213
    2e26:	92 e0       	ldi	r25, 0x02	; 2
    2e28:	89 2f       	mov	r24, r25
    2e2a:	8f 93       	push	r24
    2e2c:	85 ed       	ldi	r24, 0xD5	; 213
    2e2e:	92 e0       	ldi	r25, 0x02	; 2
    2e30:	8f 93       	push	r24
    2e32:	ce 01       	movw	r24, r28
    2e34:	07 96       	adiw	r24, 0x07	; 7
    2e36:	29 2f       	mov	r18, r25
    2e38:	2f 93       	push	r18
    2e3a:	8f 93       	push	r24
    2e3c:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <sprintf>
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
				valp = buf;
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	07 96       	adiw	r24, 0x07	; 7
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
				break;
    2e54:	10 c0       	rjmp	.+32     	; 0x2e76 <_ZN6params10initParamsEP3Lcd+0x28c>
				
			case PARAM_ACT_VFO:
				valp =  vfoact_strings[activeVfo];
    2e56:	8f 89       	ldd	r24, Y+23	; 0x17
    2e58:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	85 81       	ldd	r24, Z+5	; 0x05
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	8a 5b       	subi	r24, 0xBA	; 186
    2e68:	9e 4f       	sbci	r25, 0xFE	; 254
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
				break;
    2e74:	00 00       	nop
						
			default:
				break;
		}
		lcd->puts(valp, fgc,bgc);
    2e76:	8f 89       	ldd	r24, Y+23	; 0x17
    2e78:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7a:	8b 5a       	subi	r24, 0xAB	; 171
    2e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 81       	ld	r18, Z
    2e82:	31 81       	ldd	r19, Z+1	; 0x01
    2e84:	42 81       	ldd	r20, Z+2	; 0x02
    2e86:	8f 89       	ldd	r24, Y+23	; 0x17
    2e88:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8a:	8e 5a       	subi	r24, 0xAE	; 174
    2e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8e:	fc 01       	movw	r30, r24
    2e90:	80 81       	ld	r24, Z
    2e92:	91 81       	ldd	r25, Z+1	; 0x01
    2e94:	a2 81       	ldd	r26, Z+2	; 0x02
    2e96:	69 81       	ldd	r22, Y+1	; 0x01
    2e98:	7a 81       	ldd	r23, Y+2	; 0x02
    2e9a:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e9c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e9e:	79 01       	movw	r14, r18
    2ea0:	04 2f       	mov	r16, r20
    2ea2:	9c 01       	movw	r18, r24
    2ea4:	4a 2f       	mov	r20, r26
    2ea6:	cf 01       	movw	r24, r30
    2ea8:	07 d8       	rcall	.-4082   	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
		curParam = (param_t)((int)curParam + 1);
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	85 5b       	subi	r24, 0xB5	; 181
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	80 81       	ld	r24, Z
    2eb6:	21 e0       	ldi	r18, 0x01	; 1
    2eb8:	28 0f       	add	r18, r24
    2eba:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebe:	85 5b       	subi	r24, 0xB5	; 181
    2ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	20 83       	st	Z, r18
	const char *valp = NULL;
	char buf[16];

	curParam = PARAM_STEP;

	while (curParam != PARAM_END) {
    2ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eca:	85 5b       	subi	r24, 0xB5	; 181
    2ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ece:	fc 01       	movw	r30, r24
    2ed0:	80 81       	ld	r24, Z
    2ed2:	86 30       	cpi	r24, 0x06	; 6
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <_ZN6params10initParamsEP3Lcd+0x2ee>
    2ed6:	a3 ce       	rjmp	.-698    	; 0x2c1e <_ZN6params10initParamsEP3Lcd+0x34>
				break;
		}
		lcd->puts(valp, fgc,bgc);
		curParam = (param_t)((int)curParam + 1);
	}	
	curParam = PARAM_STEP;
    2ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eda:	98 8d       	ldd	r25, Y+24	; 0x18
    2edc:	85 5b       	subi	r24, 0xB5	; 181
    2ede:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	10 82       	st	Z, r1
}
    2ee4:	6a 96       	adiw	r28, 0x1a	; 26
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	08 95       	ret

00002efc <_ZN6params7getStepEv>:

step_t params::getStep(void) {
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <_ZN6params7getStepEv+0x6>
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	9a 83       	std	Y+2, r25	; 0x02
    2f08:	89 83       	std	Y+1, r24	; 0x01
	return step;
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	fc 01       	movw	r30, r24
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <_ZN6params7getBandEv>:
 	
	
band_t params::getBand(void) {
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <_ZN6params7getBandEv+0x6>
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
	return band;
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	fc 01       	movw	r30, r24
    2f30:	83 81       	ldd	r24, Z+3	; 0x03
}
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <_ZN6params6getVfoEv>:
 	
	
vfo_select_t params::getVfo(void) {
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <_ZN6params6getVfoEv+0x6>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
	return vfo;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	fc 01       	movw	r30, r24
    2f50:	84 81       	ldd	r24, Z+4	; 0x04
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <_ZN6params12getActiveVfoEv>:


vfo_actv_t params::getActiveVfo(void) {
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <_ZN6params12getActiveVfoEv+0x6>
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	return activeVfo;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6e:	fc 01       	movw	r30, r24
    2f70:	85 81       	ldd	r24, Z+5	; 0x05
}
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <_ZN6params7getModeEv>:
 	
	
mode_t	params::getMode(void) {
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <_ZN6params7getModeEv+0x6>
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01
	return mode;
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	fc 01       	movw	r30, r24
    2f90:	86 81       	ldd	r24, Z+6	; 0x06
}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <_ZN6params7setModeE7_mode_t>:


void	params::setMode(mode_t newMode) {
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <_ZN6params7setModeE7_mode_t+0x6>
    2fa2:	1f 92       	push	r1
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	6b 83       	std	Y+3, r22	; 0x03
	mode = newMode;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	26 83       	std	Z+6, r18	; 0x06
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	08 95       	ret

00002fc4 <_ZN6params12setActiveVfoE10vfo_actv_t>:

void params::setActiveVfo(vfo_actv_t rxtx) {
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	2c 97       	sbiw	r28, 0x0c	; 12
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	9b 87       	std	Y+11, r25	; 0x0b
    2fe0:	8a 87       	std	Y+10, r24	; 0x0a
    2fe2:	6c 87       	std	Y+12, r22	; 0x0c
const char *valp = NULL;
    2fe4:	1a 82       	std	Y+2, r1	; 0x02
    2fe6:	19 82       	std	Y+1, r1	; 0x01
uint16_t line;
uint16_t col;
pixColor pc;
	activeVfo = rxtx;
    2fe8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fec:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fee:	dc 01       	movw	r26, r24
    2ff0:	15 96       	adiw	r26, 0x05	; 5
    2ff2:	2c 93       	st	X, r18
	valp =  vfoact_strings[activeVfo];
    2ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	85 81       	ldd	r24, Z+5	; 0x05
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	8a 5b       	subi	r24, 0xBA	; 186
    3006:	9e 4f       	sbci	r25, 0xFE	; 254
    3008:	dc 01       	movw	r26, r24
    300a:	8d 91       	ld	r24, X+
    300c:	9c 91       	ld	r25, X
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	89 83       	std	Y+1, r24	; 0x01
	line = param_display[PARAM_ACT_VFO].val_psn.line;
    3012:	8a 85       	ldd	r24, Y+10	; 0x0a
    3014:	9b 85       	ldd	r25, Y+11	; 0x0b
    3016:	89 5b       	subi	r24, 0xB9	; 185
    3018:	9f 4f       	sbci	r25, 0xFF	; 255
    301a:	fc 01       	movw	r30, r24
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	9c 83       	std	Y+4, r25	; 0x04
    3022:	8b 83       	std	Y+3, r24	; 0x03
	col =  param_display[PARAM_ACT_VFO].val_psn.col;
    3024:	8a 85       	ldd	r24, Y+10	; 0x0a
    3026:	9b 85       	ldd	r25, Y+11	; 0x0b
    3028:	87 5b       	subi	r24, 0xB7	; 183
    302a:	9f 4f       	sbci	r25, 0xFF	; 255
    302c:	dc 01       	movw	r26, r24
    302e:	8d 91       	ld	r24, X+
    3030:	9c 91       	ld	r25, X
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
	lcd->gotoxy(line,col);
    3036:	3d 81       	ldd	r19, Y+5	; 0x05
    3038:	2b 81       	ldd	r18, Y+3	; 0x03
    303a:	8a 85       	ldd	r24, Y+10	; 0x0a
    303c:	9b 85       	ldd	r25, Y+11	; 0x0b
    303e:	80 5b       	subi	r24, 0xB0	; 176
    3040:	9f 4f       	sbci	r25, 0xFF	; 255
    3042:	fc 01       	movw	r30, r24
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	43 2f       	mov	r20, r19
    304a:	62 2f       	mov	r22, r18
    304c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
	if (activeVfo == RX) {
    3050:	8a 85       	ldd	r24, Y+10	; 0x0a
    3052:	9b 85       	ldd	r25, Y+11	; 0x0b
    3054:	dc 01       	movw	r26, r24
    3056:	15 96       	adiw	r26, 0x05	; 5
    3058:	8c 91       	ld	r24, X
    305a:	88 23       	and	r24, r24
    305c:	29 f4       	brne	.+10     	; 0x3068 <_ZN6params12setActiveVfoE10vfo_actv_t+0xa4>
		pc = GREEN;
    305e:	1f 82       	std	Y+7, r1	; 0x07
    3060:	8c ef       	ldi	r24, 0xFC	; 252
    3062:	88 87       	std	Y+8, r24	; 0x08
    3064:	19 86       	std	Y+9, r1	; 0x09
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <_ZN6params12setActiveVfoE10vfo_actv_t+0xac>
	} else {
		pc = RED;
    3068:	8c ef       	ldi	r24, 0xFC	; 252
    306a:	8f 83       	std	Y+7, r24	; 0x07
    306c:	18 86       	std	Y+8, r1	; 0x08
    306e:	19 86       	std	Y+9, r1	; 0x09
	}
	lcd->puts(valp,pc,bgc);
    3070:	8a 85       	ldd	r24, Y+10	; 0x0a
    3072:	9b 85       	ldd	r25, Y+11	; 0x0b
    3074:	80 5b       	subi	r24, 0xB0	; 176
    3076:	9f 4f       	sbci	r25, 0xFF	; 255
    3078:	dc 01       	movw	r26, r24
    307a:	ed 91       	ld	r30, X+
    307c:	fc 91       	ld	r31, X
    307e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3080:	9b 85       	ldd	r25, Y+11	; 0x0b
    3082:	8b 5a       	subi	r24, 0xAB	; 171
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	dc 01       	movw	r26, r24
    3088:	2d 91       	ld	r18, X+
    308a:	3d 91       	ld	r19, X+
    308c:	4c 91       	ld	r20, X
    308e:	8f 81       	ldd	r24, Y+7	; 0x07
    3090:	98 85       	ldd	r25, Y+8	; 0x08
    3092:	a9 85       	ldd	r26, Y+9	; 0x09
    3094:	69 81       	ldd	r22, Y+1	; 0x01
    3096:	7a 81       	ldd	r23, Y+2	; 0x02
    3098:	79 01       	movw	r14, r18
    309a:	04 2f       	mov	r16, r20
    309c:	9c 01       	movw	r18, r24
    309e:	4a 2f       	mov	r20, r26
    30a0:	cf 01       	movw	r24, r30
    30a2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
} 
    30a6:	2c 96       	adiw	r28, 0x0c	; 12
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	0f 91       	pop	r16
    30b8:	ff 90       	pop	r15
    30ba:	ef 90       	pop	r14
    30bc:	08 95       	ret

000030be <_ZN6params11updateEnterEP7EncoderP2SwP3Lcd>:


 	
void params::updateEnter(Encoder *enc, Sw *pb, Lcd *lcd) {
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	2c 97       	sbiw	r28, 0x0c	; 12
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	78 87       	std	Y+8, r23	; 0x08
    30de:	6f 83       	std	Y+7, r22	; 0x07
    30e0:	5a 87       	std	Y+10, r21	; 0x0a
    30e2:	49 87       	std	Y+9, r20	; 0x09
    30e4:	3c 87       	std	Y+12, r19	; 0x0c
    30e6:	2b 87       	std	Y+11, r18	; 0x0b
	//
	// hilight current parameter on entry to update
	//
	uint16_t line = param_display[curParam].label_psn.line;
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	85 5b       	subi	r24, 0xB5	; 181
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	fc 01       	movw	r30, r24
    30f2:	80 81       	ld	r24, Z
    30f4:	48 2f       	mov	r20, r24
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	2d 81       	ldd	r18, Y+5	; 0x05
    30fa:	3e 81       	ldd	r19, Y+6	; 0x06
    30fc:	6b e0       	ldi	r22, 0x0B	; 11
    30fe:	64 9f       	mul	r22, r20
    3100:	c0 01       	movw	r24, r0
    3102:	65 9f       	mul	r22, r21
    3104:	90 0d       	add	r25, r0
    3106:	11 24       	eor	r1, r1
    3108:	82 0f       	add	r24, r18
    310a:	93 1f       	adc	r25, r19
    310c:	0a 96       	adiw	r24, 0x0a	; 10
    310e:	fc 01       	movw	r30, r24
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
	uint16_t col =  param_display[curParam].label_psn.col;
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	85 5b       	subi	r24, 0xB5	; 181
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	fc 01       	movw	r30, r24
    3122:	80 81       	ld	r24, Z
    3124:	48 2f       	mov	r20, r24
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	2d 81       	ldd	r18, Y+5	; 0x05
    312a:	3e 81       	ldd	r19, Y+6	; 0x06
    312c:	6b e0       	ldi	r22, 0x0B	; 11
    312e:	64 9f       	mul	r22, r20
    3130:	c0 01       	movw	r24, r0
    3132:	65 9f       	mul	r22, r21
    3134:	90 0d       	add	r25, r0
    3136:	11 24       	eor	r1, r1
    3138:	82 0f       	add	r24, r18
    313a:	93 1f       	adc	r25, r19
    313c:	0c 96       	adiw	r24, 0x0c	; 12
    313e:	fc 01       	movw	r30, r24
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03

	tc = RED;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	88 5a       	subi	r24, 0xA8	; 168
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	2c ef       	ldi	r18, 0xFC	; 252
    3152:	fc 01       	movw	r30, r24
    3154:	20 83       	st	Z, r18
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	87 5a       	subi	r24, 0xA7	; 167
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	fc 01       	movw	r30, r24
    3160:	10 82       	st	Z, r1
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	86 5a       	subi	r24, 0xA6	; 166
    3168:	9f 4f       	sbci	r25, 0xFF	; 255
    316a:	fc 01       	movw	r30, r24
    316c:	10 82       	st	Z, r1
	lcd->gotoxy(line,col);
    316e:	3b 81       	ldd	r19, Y+3	; 0x03
    3170:	29 81       	ldd	r18, Y+1	; 0x01
    3172:	8b 85       	ldd	r24, Y+11	; 0x0b
    3174:	9c 85       	ldd	r25, Y+12	; 0x0c
    3176:	43 2f       	mov	r20, r19
    3178:	62 2f       	mov	r22, r18
    317a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
	lcd->puts(param_display[curParam].label, tc, bgc);
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	85 5b       	subi	r24, 0xB5	; 181
    3184:	9f 4f       	sbci	r25, 0xFF	; 255
    3186:	fc 01       	movw	r30, r24
    3188:	80 81       	ld	r24, Z
    318a:	48 2f       	mov	r20, r24
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	2d 81       	ldd	r18, Y+5	; 0x05
    3190:	3e 81       	ldd	r19, Y+6	; 0x06
    3192:	6b e0       	ldi	r22, 0x0B	; 11
    3194:	64 9f       	mul	r22, r20
    3196:	c0 01       	movw	r24, r0
    3198:	65 9f       	mul	r22, r21
    319a:	90 0d       	add	r25, r0
    319c:	11 24       	eor	r1, r1
    319e:	82 0f       	add	r24, r18
    31a0:	93 1f       	adc	r25, r19
    31a2:	0e 96       	adiw	r24, 0x0e	; 14
    31a4:	fc 01       	movw	r30, r24
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	8b 5a       	subi	r24, 0xAB	; 171
    31b0:	9f 4f       	sbci	r25, 0xFF	; 255
    31b2:	fc 01       	movw	r30, r24
    31b4:	20 81       	ld	r18, Z
    31b6:	31 81       	ldd	r19, Z+1	; 0x01
    31b8:	42 81       	ldd	r20, Z+2	; 0x02
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	88 5a       	subi	r24, 0xA8	; 168
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	fc 01       	movw	r30, r24
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	a2 81       	ldd	r26, Z+2	; 0x02
    31ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    31cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    31ce:	79 01       	movw	r14, r18
    31d0:	04 2f       	mov	r16, r20
    31d2:	9c 01       	movw	r18, r24
    31d4:	4a 2f       	mov	r20, r26
    31d6:	cf 01       	movw	r24, r30
    31d8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
	enc->setEventRate(1);
    31dc:	8f 81       	ldd	r24, Y+7	; 0x07
    31de:	98 85       	ldd	r25, Y+8	; 0x08
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN7Encoder12setEventRateEh>
	waitForOpen = false;
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	81 5b       	subi	r24, 0xB1	; 177
    31ec:	9f 4f       	sbci	r25, 0xFF	; 255
    31ee:	fc 01       	movw	r30, r24
    31f0:	10 82       	st	Z, r1
	update(enc, pb, lcd);	
    31f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    31f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    31f6:	49 85       	ldd	r20, Y+9	; 0x09
    31f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	0c d0       	rcall	.+24     	; 0x321c <_ZN6params6updateEP7EncoderP2SwP3Lcd>
}
    3204:	2c 96       	adiw	r28, 0x0c	; 12
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	08 95       	ret

0000321c <_ZN6params6updateEP7EncoderP2SwP3Lcd>:


void params::update(Encoder *enc, Sw *pb, Lcd *lcd) {
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	a6 97       	sbiw	r28, 0x26	; 38
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	98 a3       	std	Y+32, r25	; 0x20
    3238:	8f 8f       	std	Y+31, r24	; 0x1f
    323a:	7a a3       	std	Y+34, r23	; 0x22
    323c:	69 a3       	std	Y+33, r22	; 0x21
    323e:	5c a3       	std	Y+36, r21	; 0x24
    3240:	4b a3       	std	Y+35, r20	; 0x23
    3242:	3e a3       	std	Y+38, r19	; 0x26
    3244:	2d a3       	std	Y+37, r18	; 0x25
	uint16_t line;
	uint16_t col;
	const char *valp = NULL;
    3246:	1a 82       	std	Y+2, r1	; 0x02
    3248:	19 82       	std	Y+1, r1	; 0x01
	char buf[16];

	tc = RED;
    324a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    324c:	98 a1       	ldd	r25, Y+32	; 0x20
    324e:	88 5a       	subi	r24, 0xA8	; 168
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	2c ef       	ldi	r18, 0xFC	; 252
    3254:	fc 01       	movw	r30, r24
    3256:	20 83       	st	Z, r18
    3258:	8f 8d       	ldd	r24, Y+31	; 0x1f
    325a:	98 a1       	ldd	r25, Y+32	; 0x20
    325c:	87 5a       	subi	r24, 0xA7	; 167
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	fc 01       	movw	r30, r24
    3262:	10 82       	st	Z, r1
    3264:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3266:	98 a1       	ldd	r25, Y+32	; 0x20
    3268:	86 5a       	subi	r24, 0xA6	; 166
    326a:	9f 4f       	sbci	r25, 0xFF	; 255
    326c:	fc 01       	movw	r30, r24
    326e:	10 82       	st	Z, r1
	if(exitParamMode) {
    3270:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3272:	98 a1       	ldd	r25, Y+32	; 0x20
    3274:	84 5b       	subi	r24, 0xB4	; 180
    3276:	9f 4f       	sbci	r25, 0xFF	; 255
    3278:	fc 01       	movw	r30, r24
    327a:	80 81       	ld	r24, Z
    327c:	88 23       	and	r24, r24
    327e:	09 f4       	brne	.+2      	; 0x3282 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x66>
    3280:	79 c0       	rjmp	.+242    	; 0x3374 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x158>
		exitParamMode = false;
    3282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3284:	98 a1       	ldd	r25, Y+32	; 0x20
    3286:	84 5b       	subi	r24, 0xB4	; 180
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	fc 01       	movw	r30, r24
    328c:	10 82       	st	Z, r1
		uint16_t line = param_display[curParam].label_psn.line;
    328e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3290:	98 a1       	ldd	r25, Y+32	; 0x20
    3292:	85 5b       	subi	r24, 0xB5	; 181
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	fc 01       	movw	r30, r24
    3298:	80 81       	ld	r24, Z
    329a:	48 2f       	mov	r20, r24
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    32a0:	38 a1       	ldd	r19, Y+32	; 0x20
    32a2:	6b e0       	ldi	r22, 0x0B	; 11
    32a4:	64 9f       	mul	r22, r20
    32a6:	c0 01       	movw	r24, r0
    32a8:	65 9f       	mul	r22, r21
    32aa:	90 0d       	add	r25, r0
    32ac:	11 24       	eor	r1, r1
    32ae:	82 0f       	add	r24, r18
    32b0:	93 1f       	adc	r25, r19
    32b2:	0a 96       	adiw	r24, 0x0a	; 10
    32b4:	fc 01       	movw	r30, r24
    32b6:	80 81       	ld	r24, Z
    32b8:	91 81       	ldd	r25, Z+1	; 0x01
    32ba:	9c 83       	std	Y+4, r25	; 0x04
    32bc:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t col =  param_display[curParam].label_psn.col;
    32be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c0:	98 a1       	ldd	r25, Y+32	; 0x20
    32c2:	85 5b       	subi	r24, 0xB5	; 181
    32c4:	9f 4f       	sbci	r25, 0xFF	; 255
    32c6:	fc 01       	movw	r30, r24
    32c8:	80 81       	ld	r24, Z
    32ca:	48 2f       	mov	r20, r24
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	2f 8d       	ldd	r18, Y+31	; 0x1f
    32d0:	38 a1       	ldd	r19, Y+32	; 0x20
    32d2:	6b e0       	ldi	r22, 0x0B	; 11
    32d4:	64 9f       	mul	r22, r20
    32d6:	c0 01       	movw	r24, r0
    32d8:	65 9f       	mul	r22, r21
    32da:	90 0d       	add	r25, r0
    32dc:	11 24       	eor	r1, r1
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	0c 96       	adiw	r24, 0x0c	; 12
    32e4:	fc 01       	movw	r30, r24
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05

		lcd->gotoxy(line,col);
    32ee:	3d 81       	ldd	r19, Y+5	; 0x05
    32f0:	2b 81       	ldd	r18, Y+3	; 0x03
    32f2:	8d a1       	ldd	r24, Y+37	; 0x25
    32f4:	9e a1       	ldd	r25, Y+38	; 0x26
    32f6:	43 2f       	mov	r20, r19
    32f8:	62 2f       	mov	r22, r18
    32fa:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
		lcd->puts(param_display[curParam].label, fgc, bgc);
    32fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3300:	98 a1       	ldd	r25, Y+32	; 0x20
    3302:	85 5b       	subi	r24, 0xB5	; 181
    3304:	9f 4f       	sbci	r25, 0xFF	; 255
    3306:	fc 01       	movw	r30, r24
    3308:	80 81       	ld	r24, Z
    330a:	48 2f       	mov	r20, r24
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3310:	38 a1       	ldd	r19, Y+32	; 0x20
    3312:	6b e0       	ldi	r22, 0x0B	; 11
    3314:	64 9f       	mul	r22, r20
    3316:	c0 01       	movw	r24, r0
    3318:	65 9f       	mul	r22, r21
    331a:	90 0d       	add	r25, r0
    331c:	11 24       	eor	r1, r1
    331e:	82 0f       	add	r24, r18
    3320:	93 1f       	adc	r25, r19
    3322:	0e 96       	adiw	r24, 0x0e	; 14
    3324:	fc 01       	movw	r30, r24
    3326:	60 81       	ld	r22, Z
    3328:	71 81       	ldd	r23, Z+1	; 0x01
    332a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    332c:	98 a1       	ldd	r25, Y+32	; 0x20
    332e:	8b 5a       	subi	r24, 0xAB	; 171
    3330:	9f 4f       	sbci	r25, 0xFF	; 255
    3332:	fc 01       	movw	r30, r24
    3334:	20 81       	ld	r18, Z
    3336:	31 81       	ldd	r19, Z+1	; 0x01
    3338:	42 81       	ldd	r20, Z+2	; 0x02
    333a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    333c:	98 a1       	ldd	r25, Y+32	; 0x20
    333e:	8e 5a       	subi	r24, 0xAE	; 174
    3340:	9f 4f       	sbci	r25, 0xFF	; 255
    3342:	fc 01       	movw	r30, r24
    3344:	80 81       	ld	r24, Z
    3346:	91 81       	ldd	r25, Z+1	; 0x01
    3348:	a2 81       	ldd	r26, Z+2	; 0x02
    334a:	ed a1       	ldd	r30, Y+37	; 0x25
    334c:	fe a1       	ldd	r31, Y+38	; 0x26
    334e:	79 01       	movw	r14, r18
    3350:	04 2f       	mov	r16, r20
    3352:	9c 01       	movw	r18, r24
    3354:	4a 2f       	mov	r20, r26
    3356:	cf 01       	movw	r24, r30
    3358:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
		waitForOpen = true;
    335c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    335e:	98 a1       	ldd	r25, Y+32	; 0x20
    3360:	81 5b       	subi	r24, 0xB1	; 177
    3362:	9f 4f       	sbci	r25, 0xFF	; 255
    3364:	21 e0       	ldi	r18, 0x01	; 1
    3366:	fc 01       	movw	r30, r24
    3368:	20 83       	st	Z, r18
		enc->setEventRate(4);
    336a:	89 a1       	ldd	r24, Y+33	; 0x21
    336c:	9a a1       	ldd	r25, Y+34	; 0x22
    336e:	64 e0       	ldi	r22, 0x04	; 4
    3370:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN7Encoder12setEventRateEh>
	}

	if (pb->hasEvent()) {
    3374:	8b a1       	ldd	r24, Y+35	; 0x23
    3376:	9c a1       	ldd	r25, Y+36	; 0x24
    3378:	94 d4       	rcall	.+2344   	; 0x3ca2 <_ZN2Sw8hasEventEv>
    337a:	88 23       	and	r24, r24
    337c:	09 f4       	brne	.+2      	; 0x3380 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x164>
    337e:	36 c1       	rjmp	.+620    	; 0x35ec <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d0>
		if (pb->getEvent() == EV_CLOSE) {
    3380:	8b a1       	ldd	r24, Y+35	; 0x23
    3382:	9c a1       	ldd	r25, Y+36	; 0x24
    3384:	a3 d4       	rcall	.+2374   	; 0x3ccc <_ZN2Sw8getEventEv>
    3386:	98 2f       	mov	r25, r24
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	92 30       	cpi	r25, 0x02	; 2
    338c:	09 f0       	breq	.+2      	; 0x3390 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x174>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	88 23       	and	r24, r24
    3392:	c1 f0       	breq	.+48     	; 0x33c4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1a8>
			pb->clearEvent();
    3394:	8b a1       	ldd	r24, Y+35	; 0x23
    3396:	9c a1       	ldd	r25, Y+36	; 0x24
    3398:	a9 d4       	rcall	.+2386   	; 0x3cec <_ZN2Sw10clearEventEv>
			timerHandle = Clock::registerOneshot(this,TWO_SEC);
    339a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    339c:	98 a1       	ldd	r25, Y+32	; 0x20
    339e:	68 ec       	ldi	r22, 0xC8	; 200
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN5Clock15registerOneshotEP8Callbackj>
    33a6:	9c 01       	movw	r18, r24
    33a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33aa:	98 a1       	ldd	r25, Y+32	; 0x20
    33ac:	83 5b       	subi	r24, 0xB3	; 179
    33ae:	9f 4f       	sbci	r25, 0xFF	; 255
    33b0:	fc 01       	movw	r30, r24
    33b2:	31 83       	std	Z+1, r19	; 0x01
    33b4:	20 83       	st	Z, r18
			exitParamMode = false;
    33b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33b8:	98 a1       	ldd	r25, Y+32	; 0x20
    33ba:	84 5b       	subi	r24, 0xB4	; 180
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	fc 01       	movw	r30, r24
    33c0:	10 82       	st	Z, r1
    33c2:	14 c1       	rjmp	.+552    	; 0x35ec <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d0>

		} else if (pb->getEvent() == EV_OPEN) {
    33c4:	8b a1       	ldd	r24, Y+35	; 0x23
    33c6:	9c a1       	ldd	r25, Y+36	; 0x24
    33c8:	81 d4       	rcall	.+2306   	; 0x3ccc <_ZN2Sw8getEventEv>
    33ca:	98 2f       	mov	r25, r24
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	91 30       	cpi	r25, 0x01	; 1
    33d0:	09 f0       	breq	.+2      	; 0x33d4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1b8>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	88 23       	and	r24, r24
    33d6:	09 f4       	brne	.+2      	; 0x33da <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1be>
    33d8:	09 c1       	rjmp	.+530    	; 0x35ec <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3d0>
			pb->clearEvent();
    33da:	8b a1       	ldd	r24, Y+35	; 0x23
    33dc:	9c a1       	ldd	r25, Y+36	; 0x24
    33de:	86 d4       	rcall	.+2316   	; 0x3cec <_ZN2Sw10clearEventEv>
			if (waitForOpen) {
    33e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e2:	98 a1       	ldd	r25, Y+32	; 0x20
    33e4:	81 5b       	subi	r24, 0xB1	; 177
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	fc 01       	movw	r30, r24
    33ea:	80 81       	ld	r24, Z
    33ec:	88 23       	and	r24, r24
    33ee:	59 f0       	breq	.+22     	; 0x3406 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x1ea>
				waitForOpen = false;
    33f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33f2:	98 a1       	ldd	r25, Y+32	; 0x20
    33f4:	81 5b       	subi	r24, 0xB1	; 177
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	fc 01       	movw	r30, r24
    33fa:	10 82       	st	Z, r1
				mode = MODE_NORMAL;
    33fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3400:	fc 01       	movw	r30, r24
    3402:	16 82       	std	Z+6, r1	; 0x06
				return;
    3404:	44 c3       	rjmp	.+1672   	; 0x3a8e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x872>

			} else {
				Clock::cancelOneshot(timerHandle);
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	98 a1       	ldd	r25, Y+32	; 0x20
    340a:	83 5b       	subi	r24, 0xB3	; 179
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	fc 01       	movw	r30, r24
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN5Clock13cancelOneshotEi>
				uint16_t line = param_display[curParam].label_psn.line;
    3418:	8f 8d       	ldd	r24, Y+31	; 0x1f
    341a:	98 a1       	ldd	r25, Y+32	; 0x20
    341c:	85 5b       	subi	r24, 0xB5	; 181
    341e:	9f 4f       	sbci	r25, 0xFF	; 255
    3420:	fc 01       	movw	r30, r24
    3422:	80 81       	ld	r24, Z
    3424:	48 2f       	mov	r20, r24
    3426:	50 e0       	ldi	r21, 0x00	; 0
    3428:	2f 8d       	ldd	r18, Y+31	; 0x1f
    342a:	38 a1       	ldd	r19, Y+32	; 0x20
    342c:	6b e0       	ldi	r22, 0x0B	; 11
    342e:	64 9f       	mul	r22, r20
    3430:	c0 01       	movw	r24, r0
    3432:	65 9f       	mul	r22, r21
    3434:	90 0d       	add	r25, r0
    3436:	11 24       	eor	r1, r1
    3438:	82 0f       	add	r24, r18
    343a:	93 1f       	adc	r25, r19
    343c:	0a 96       	adiw	r24, 0x0a	; 10
    343e:	fc 01       	movw	r30, r24
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	98 87       	std	Y+8, r25	; 0x08
    3446:	8f 83       	std	Y+7, r24	; 0x07
				uint16_t col =  param_display[curParam].label_psn.col;
    3448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    344a:	98 a1       	ldd	r25, Y+32	; 0x20
    344c:	85 5b       	subi	r24, 0xB5	; 181
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	fc 01       	movw	r30, r24
    3452:	80 81       	ld	r24, Z
    3454:	48 2f       	mov	r20, r24
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	2f 8d       	ldd	r18, Y+31	; 0x1f
    345a:	38 a1       	ldd	r19, Y+32	; 0x20
    345c:	6b e0       	ldi	r22, 0x0B	; 11
    345e:	64 9f       	mul	r22, r20
    3460:	c0 01       	movw	r24, r0
    3462:	65 9f       	mul	r22, r21
    3464:	90 0d       	add	r25, r0
    3466:	11 24       	eor	r1, r1
    3468:	82 0f       	add	r24, r18
    346a:	93 1f       	adc	r25, r19
    346c:	0c 96       	adiw	r24, 0x0c	; 12
    346e:	fc 01       	movw	r30, r24
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	9a 87       	std	Y+10, r25	; 0x0a
    3476:	89 87       	std	Y+9, r24	; 0x09

				lcd->gotoxy(line,col);
    3478:	39 85       	ldd	r19, Y+9	; 0x09
    347a:	2f 81       	ldd	r18, Y+7	; 0x07
    347c:	8d a1       	ldd	r24, Y+37	; 0x25
    347e:	9e a1       	ldd	r25, Y+38	; 0x26
    3480:	43 2f       	mov	r20, r19
    3482:	62 2f       	mov	r22, r18
    3484:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, fgc, bgc);
    3488:	8f 8d       	ldd	r24, Y+31	; 0x1f
    348a:	98 a1       	ldd	r25, Y+32	; 0x20
    348c:	85 5b       	subi	r24, 0xB5	; 181
    348e:	9f 4f       	sbci	r25, 0xFF	; 255
    3490:	fc 01       	movw	r30, r24
    3492:	80 81       	ld	r24, Z
    3494:	48 2f       	mov	r20, r24
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	2f 8d       	ldd	r18, Y+31	; 0x1f
    349a:	38 a1       	ldd	r19, Y+32	; 0x20
    349c:	6b e0       	ldi	r22, 0x0B	; 11
    349e:	64 9f       	mul	r22, r20
    34a0:	c0 01       	movw	r24, r0
    34a2:	65 9f       	mul	r22, r21
    34a4:	90 0d       	add	r25, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	82 0f       	add	r24, r18
    34aa:	93 1f       	adc	r25, r19
    34ac:	0e 96       	adiw	r24, 0x0e	; 14
    34ae:	fc 01       	movw	r30, r24
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b6:	98 a1       	ldd	r25, Y+32	; 0x20
    34b8:	8b 5a       	subi	r24, 0xAB	; 171
    34ba:	9f 4f       	sbci	r25, 0xFF	; 255
    34bc:	fc 01       	movw	r30, r24
    34be:	20 81       	ld	r18, Z
    34c0:	31 81       	ldd	r19, Z+1	; 0x01
    34c2:	42 81       	ldd	r20, Z+2	; 0x02
    34c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34c6:	98 a1       	ldd	r25, Y+32	; 0x20
    34c8:	8e 5a       	subi	r24, 0xAE	; 174
    34ca:	9f 4f       	sbci	r25, 0xFF	; 255
    34cc:	fc 01       	movw	r30, r24
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	a2 81       	ldd	r26, Z+2	; 0x02
    34d4:	ed a1       	ldd	r30, Y+37	; 0x25
    34d6:	fe a1       	ldd	r31, Y+38	; 0x26
    34d8:	79 01       	movw	r14, r18
    34da:	04 2f       	mov	r16, r20
    34dc:	9c 01       	movw	r18, r24
    34de:	4a 2f       	mov	r20, r26
    34e0:	cf 01       	movw	r24, r30
    34e2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
				curParam = (param_t)((int)curParam + 1);
    34e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34e8:	98 a1       	ldd	r25, Y+32	; 0x20
    34ea:	85 5b       	subi	r24, 0xB5	; 181
    34ec:	9f 4f       	sbci	r25, 0xFF	; 255
    34ee:	fc 01       	movw	r30, r24
    34f0:	80 81       	ld	r24, Z
    34f2:	21 e0       	ldi	r18, 0x01	; 1
    34f4:	28 0f       	add	r18, r24
    34f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f8:	98 a1       	ldd	r25, Y+32	; 0x20
    34fa:	85 5b       	subi	r24, 0xB5	; 181
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	fc 01       	movw	r30, r24
    3500:	20 83       	st	Z, r18
				if (curParam == PARAM_END) {
    3502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3504:	98 a1       	ldd	r25, Y+32	; 0x20
    3506:	85 5b       	subi	r24, 0xB5	; 181
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	fc 01       	movw	r30, r24
    350c:	80 81       	ld	r24, Z
    350e:	86 30       	cpi	r24, 0x06	; 6
    3510:	31 f4       	brne	.+12     	; 0x351e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x302>
					curParam = PARAM_STEP;
    3512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3514:	98 a1       	ldd	r25, Y+32	; 0x20
    3516:	85 5b       	subi	r24, 0xB5	; 181
    3518:	9f 4f       	sbci	r25, 0xFF	; 255
    351a:	fc 01       	movw	r30, r24
    351c:	10 82       	st	Z, r1
				}					
				line = param_display[curParam].label_psn.line;
    351e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3520:	98 a1       	ldd	r25, Y+32	; 0x20
    3522:	85 5b       	subi	r24, 0xB5	; 181
    3524:	9f 4f       	sbci	r25, 0xFF	; 255
    3526:	fc 01       	movw	r30, r24
    3528:	80 81       	ld	r24, Z
    352a:	48 2f       	mov	r20, r24
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3530:	38 a1       	ldd	r19, Y+32	; 0x20
    3532:	6b e0       	ldi	r22, 0x0B	; 11
    3534:	64 9f       	mul	r22, r20
    3536:	c0 01       	movw	r24, r0
    3538:	65 9f       	mul	r22, r21
    353a:	90 0d       	add	r25, r0
    353c:	11 24       	eor	r1, r1
    353e:	82 0f       	add	r24, r18
    3540:	93 1f       	adc	r25, r19
    3542:	0a 96       	adiw	r24, 0x0a	; 10
    3544:	fc 01       	movw	r30, r24
    3546:	80 81       	ld	r24, Z
    3548:	91 81       	ldd	r25, Z+1	; 0x01
    354a:	98 87       	std	Y+8, r25	; 0x08
    354c:	8f 83       	std	Y+7, r24	; 0x07
				col =  param_display[curParam].label_psn.col;
    354e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3550:	98 a1       	ldd	r25, Y+32	; 0x20
    3552:	85 5b       	subi	r24, 0xB5	; 181
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	fc 01       	movw	r30, r24
    3558:	80 81       	ld	r24, Z
    355a:	48 2f       	mov	r20, r24
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3560:	38 a1       	ldd	r19, Y+32	; 0x20
    3562:	6b e0       	ldi	r22, 0x0B	; 11
    3564:	64 9f       	mul	r22, r20
    3566:	c0 01       	movw	r24, r0
    3568:	65 9f       	mul	r22, r21
    356a:	90 0d       	add	r25, r0
    356c:	11 24       	eor	r1, r1
    356e:	82 0f       	add	r24, r18
    3570:	93 1f       	adc	r25, r19
    3572:	0c 96       	adiw	r24, 0x0c	; 12
    3574:	fc 01       	movw	r30, r24
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	9a 87       	std	Y+10, r25	; 0x0a
    357c:	89 87       	std	Y+9, r24	; 0x09
				lcd->gotoxy(line,col);
    357e:	39 85       	ldd	r19, Y+9	; 0x09
    3580:	2f 81       	ldd	r18, Y+7	; 0x07
    3582:	8d a1       	ldd	r24, Y+37	; 0x25
    3584:	9e a1       	ldd	r25, Y+38	; 0x26
    3586:	43 2f       	mov	r20, r19
    3588:	62 2f       	mov	r22, r18
    358a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
				lcd->puts(param_display[curParam].label, tc, bgc);
    358e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3590:	98 a1       	ldd	r25, Y+32	; 0x20
    3592:	85 5b       	subi	r24, 0xB5	; 181
    3594:	9f 4f       	sbci	r25, 0xFF	; 255
    3596:	fc 01       	movw	r30, r24
    3598:	80 81       	ld	r24, Z
    359a:	48 2f       	mov	r20, r24
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    35a0:	38 a1       	ldd	r19, Y+32	; 0x20
    35a2:	6b e0       	ldi	r22, 0x0B	; 11
    35a4:	64 9f       	mul	r22, r20
    35a6:	c0 01       	movw	r24, r0
    35a8:	65 9f       	mul	r22, r21
    35aa:	90 0d       	add	r25, r0
    35ac:	11 24       	eor	r1, r1
    35ae:	82 0f       	add	r24, r18
    35b0:	93 1f       	adc	r25, r19
    35b2:	0e 96       	adiw	r24, 0x0e	; 14
    35b4:	fc 01       	movw	r30, r24
    35b6:	60 81       	ld	r22, Z
    35b8:	71 81       	ldd	r23, Z+1	; 0x01
    35ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35bc:	98 a1       	ldd	r25, Y+32	; 0x20
    35be:	8b 5a       	subi	r24, 0xAB	; 171
    35c0:	9f 4f       	sbci	r25, 0xFF	; 255
    35c2:	fc 01       	movw	r30, r24
    35c4:	20 81       	ld	r18, Z
    35c6:	31 81       	ldd	r19, Z+1	; 0x01
    35c8:	42 81       	ldd	r20, Z+2	; 0x02
    35ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35cc:	98 a1       	ldd	r25, Y+32	; 0x20
    35ce:	88 5a       	subi	r24, 0xA8	; 168
    35d0:	9f 4f       	sbci	r25, 0xFF	; 255
    35d2:	fc 01       	movw	r30, r24
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	a2 81       	ldd	r26, Z+2	; 0x02
    35da:	ed a1       	ldd	r30, Y+37	; 0x25
    35dc:	fe a1       	ldd	r31, Y+38	; 0x26
    35de:	79 01       	movw	r14, r18
    35e0:	04 2f       	mov	r16, r20
    35e2:	9c 01       	movw	r18, r24
    35e4:	4a 2f       	mov	r20, r26
    35e6:	cf 01       	movw	r24, r30
    35e8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
		}
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
    35ec:	89 a1       	ldd	r24, Y+33	; 0x21
    35ee:	9a a1       	ldd	r25, Y+34	; 0x22
    35f0:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN7Encoder8hasEventEv>
    35f4:	88 23       	and	r24, r24
    35f6:	09 f4       	brne	.+2      	; 0x35fa <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3de>
    35f8:	4a c2       	rjmp	.+1172   	; 0x3a8e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x872>
		switch(curParam) {
    35fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35fc:	98 a1       	ldd	r25, Y+32	; 0x20
    35fe:	85 5b       	subi	r24, 0xB5	; 181
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	fc 01       	movw	r30, r24
    3604:	80 81       	ld	r24, Z
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	82 30       	cpi	r24, 0x02	; 2
    360c:	91 05       	cpc	r25, r1
    360e:	09 f4       	brne	.+2      	; 0x3612 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x3f6>
    3610:	b7 c0       	rjmp	.+366    	; 0x3780 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x564>
    3612:	83 30       	cpi	r24, 0x03	; 3
    3614:	91 05       	cpc	r25, r1
    3616:	34 f4       	brge	.+12     	; 0x3624 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x408>
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	81 f0       	breq	.+32     	; 0x363c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x420>
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	09 f4       	brne	.+2      	; 0x3622 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x406>
    3620:	5e c0       	rjmp	.+188    	; 0x36de <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4c2>
				}
				valp =  vfoact_strings[activeVfo];
				break;

			default:
				break;
    3622:	de c1       	rjmp	.+956    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>
	}
	//		
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
		switch(curParam) {
    3624:	84 30       	cpi	r24, 0x04	; 4
    3626:	91 05       	cpc	r25, r1
    3628:	09 f4       	brne	.+2      	; 0x362c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x410>
    362a:	4c c1       	rjmp	.+664    	; 0x38c4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6a8>
    362c:	84 30       	cpi	r24, 0x04	; 4
    362e:	91 05       	cpc	r25, r1
    3630:	0c f4       	brge	.+2      	; 0x3634 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x418>
    3632:	f7 c0       	rjmp	.+494    	; 0x3822 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x606>
    3634:	05 97       	sbiw	r24, 0x05	; 5
    3636:	09 f4       	brne	.+2      	; 0x363a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x41e>
    3638:	a8 c1       	rjmp	.+848    	; 0x398a <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x76e>
				}
				valp =  vfoact_strings[activeVfo];
				break;

			default:
				break;
    363a:	d2 c1       	rjmp	.+932    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>
	// now process encoder events which change the actual parameter value
	//
	if (enc->hasEvent()) {
		switch(curParam) {
			case PARAM_STEP:
				if (enc->getEvent() == ENC_CW_EVENT) {
    363c:	89 a1       	ldd	r24, Y+33	; 0x21
    363e:	9a a1       	ldd	r25, Y+34	; 0x22
    3640:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    3644:	98 2f       	mov	r25, r24
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	91 30       	cpi	r25, 0x01	; 1
    364a:	09 f0       	breq	.+2      	; 0x364e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x432>
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	88 23       	and	r24, r24
    3650:	a9 f0       	breq	.+42     	; 0x367c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x460>
					step = (step_t)((int)step + 1);
    3652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3654:	98 a1       	ldd	r25, Y+32	; 0x20
    3656:	fc 01       	movw	r30, r24
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	21 e0       	ldi	r18, 0x01	; 1
    365c:	28 0f       	add	r18, r24
    365e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3660:	98 a1       	ldd	r25, Y+32	; 0x20
    3662:	fc 01       	movw	r30, r24
    3664:	22 83       	std	Z+2, r18	; 0x02
					if (step == END_OF_STEP) {
    3666:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3668:	98 a1       	ldd	r25, Y+32	; 0x20
    366a:	fc 01       	movw	r30, r24
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	85 30       	cpi	r24, 0x05	; 5
    3670:	31 f5       	brne	.+76     	; 0x36be <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4a2>
						step = STEP_10HZ;
    3672:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3674:	98 a1       	ldd	r25, Y+32	; 0x20
    3676:	fc 01       	movw	r30, r24
    3678:	12 82       	std	Z+2, r1	; 0x02
    367a:	21 c0       	rjmp	.+66     	; 0x36be <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4a2>
					}

				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    367c:	89 a1       	ldd	r24, Y+33	; 0x21
    367e:	9a a1       	ldd	r25, Y+34	; 0x22
    3680:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    3684:	98 2f       	mov	r25, r24
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	92 30       	cpi	r25, 0x02	; 2
    368a:	09 f0       	breq	.+2      	; 0x368e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x472>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	88 23       	and	r24, r24
    3690:	b1 f0       	breq	.+44     	; 0x36be <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4a2>
					if (step == STEP_10HZ) {
    3692:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3694:	98 a1       	ldd	r25, Y+32	; 0x20
    3696:	fc 01       	movw	r30, r24
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	88 23       	and	r24, r24
    369c:	31 f4       	brne	.+12     	; 0x36aa <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x48e>
						step = STEP_1MHZ;
    369e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36a0:	98 a1       	ldd	r25, Y+32	; 0x20
    36a2:	24 e0       	ldi	r18, 0x04	; 4
    36a4:	fc 01       	movw	r30, r24
    36a6:	22 83       	std	Z+2, r18	; 0x02
    36a8:	0a c0       	rjmp	.+20     	; 0x36be <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4a2>
					} else {
						step = (step_t)((int)step - 1);
    36aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ac:	98 a1       	ldd	r25, Y+32	; 0x20
    36ae:	fc 01       	movw	r30, r24
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	2f ef       	ldi	r18, 0xFF	; 255
    36b4:	28 0f       	add	r18, r24
    36b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36b8:	98 a1       	ldd	r25, Y+32	; 0x20
    36ba:	fc 01       	movw	r30, r24
    36bc:	22 83       	std	Z+2, r18	; 0x02
					}
				}
				valp = step_strings[step];
    36be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36c0:	98 a1       	ldd	r25, Y+32	; 0x20
    36c2:	fc 01       	movw	r30, r24
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	88 2f       	mov	r24, r24
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	88 0f       	add	r24, r24
    36cc:	99 1f       	adc	r25, r25
    36ce:	8a 5c       	subi	r24, 0xCA	; 202
    36d0:	9e 4f       	sbci	r25, 0xFE	; 254
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	9a 83       	std	Y+2, r25	; 0x02
    36da:	89 83       	std	Y+1, r24	; 0x01
				break;
    36dc:	81 c1       	rjmp	.+770    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>

			case PARAM_BAND:
				if (enc->getEvent() == ENC_CW_EVENT) {
    36de:	89 a1       	ldd	r24, Y+33	; 0x21
    36e0:	9a a1       	ldd	r25, Y+34	; 0x22
    36e2:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    36e6:	98 2f       	mov	r25, r24
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	91 30       	cpi	r25, 0x01	; 1
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x4d4>
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	88 23       	and	r24, r24
    36f2:	a9 f0       	breq	.+42     	; 0x371e <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x502>
					band = (band_t)((int)band + 1);
    36f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36f6:	98 a1       	ldd	r25, Y+32	; 0x20
    36f8:	fc 01       	movw	r30, r24
    36fa:	83 81       	ldd	r24, Z+3	; 0x03
    36fc:	21 e0       	ldi	r18, 0x01	; 1
    36fe:	28 0f       	add	r18, r24
    3700:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3702:	98 a1       	ldd	r25, Y+32	; 0x20
    3704:	fc 01       	movw	r30, r24
    3706:	23 83       	std	Z+3, r18	; 0x03
					if (band == END_OF_BAND) {
    3708:	8f 8d       	ldd	r24, Y+31	; 0x1f
    370a:	98 a1       	ldd	r25, Y+32	; 0x20
    370c:	fc 01       	movw	r30, r24
    370e:	83 81       	ldd	r24, Z+3	; 0x03
    3710:	89 30       	cpi	r24, 0x09	; 9
    3712:	31 f5       	brne	.+76     	; 0x3760 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x544>
						band = BAND_160;
    3714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3716:	98 a1       	ldd	r25, Y+32	; 0x20
    3718:	fc 01       	movw	r30, r24
    371a:	13 82       	std	Z+3, r1	; 0x03
    371c:	21 c0       	rjmp	.+66     	; 0x3760 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x544>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    371e:	89 a1       	ldd	r24, Y+33	; 0x21
    3720:	9a a1       	ldd	r25, Y+34	; 0x22
    3722:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    3726:	98 2f       	mov	r25, r24
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	92 30       	cpi	r25, 0x02	; 2
    372c:	09 f0       	breq	.+2      	; 0x3730 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x514>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	88 23       	and	r24, r24
    3732:	b1 f0       	breq	.+44     	; 0x3760 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x544>
					if (band == BAND_160) {
    3734:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3736:	98 a1       	ldd	r25, Y+32	; 0x20
    3738:	fc 01       	movw	r30, r24
    373a:	83 81       	ldd	r24, Z+3	; 0x03
    373c:	88 23       	and	r24, r24
    373e:	31 f4       	brne	.+12     	; 0x374c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x530>
						band = BAND_10;
    3740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3742:	98 a1       	ldd	r25, Y+32	; 0x20
    3744:	28 e0       	ldi	r18, 0x08	; 8
    3746:	fc 01       	movw	r30, r24
    3748:	23 83       	std	Z+3, r18	; 0x03
    374a:	0a c0       	rjmp	.+20     	; 0x3760 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x544>
					} else {
						band = (band_t)((int)band - 1);
    374c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    374e:	98 a1       	ldd	r25, Y+32	; 0x20
    3750:	fc 01       	movw	r30, r24
    3752:	83 81       	ldd	r24, Z+3	; 0x03
    3754:	2f ef       	ldi	r18, 0xFF	; 255
    3756:	28 0f       	add	r18, r24
    3758:	8f 8d       	ldd	r24, Y+31	; 0x1f
    375a:	98 a1       	ldd	r25, Y+32	; 0x20
    375c:	fc 01       	movw	r30, r24
    375e:	23 83       	std	Z+3, r18	; 0x03
					}
				}
				valp = band_strings[band];
    3760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3762:	98 a1       	ldd	r25, Y+32	; 0x20
    3764:	fc 01       	movw	r30, r24
    3766:	83 81       	ldd	r24, Z+3	; 0x03
    3768:	88 2f       	mov	r24, r24
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	88 0f       	add	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	8c 5d       	subi	r24, 0xDC	; 220
    3772:	9e 4f       	sbci	r25, 0xFE	; 254
    3774:	fc 01       	movw	r30, r24
    3776:	80 81       	ld	r24, Z
    3778:	91 81       	ldd	r25, Z+1	; 0x01
    377a:	9a 83       	std	Y+2, r25	; 0x02
    377c:	89 83       	std	Y+1, r24	; 0x01
				break;
    377e:	30 c1       	rjmp	.+608    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>

			case PARAM_VFO:
				if (enc->getEvent() == ENC_CW_EVENT) {
    3780:	89 a1       	ldd	r24, Y+33	; 0x21
    3782:	9a a1       	ldd	r25, Y+34	; 0x22
    3784:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    3788:	98 2f       	mov	r25, r24
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	91 30       	cpi	r25, 0x01	; 1
    378e:	09 f0       	breq	.+2      	; 0x3792 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x576>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	88 23       	and	r24, r24
    3794:	a9 f0       	breq	.+42     	; 0x37c0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5a4>
					vfo = (vfo_select_t)((int)vfo + 1);
    3796:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3798:	98 a1       	ldd	r25, Y+32	; 0x20
    379a:	fc 01       	movw	r30, r24
    379c:	84 81       	ldd	r24, Z+4	; 0x04
    379e:	21 e0       	ldi	r18, 0x01	; 1
    37a0:	28 0f       	add	r18, r24
    37a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37a4:	98 a1       	ldd	r25, Y+32	; 0x20
    37a6:	fc 01       	movw	r30, r24
    37a8:	24 83       	std	Z+4, r18	; 0x04
					if (vfo == END_OF_VFO) {
    37aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37ac:	98 a1       	ldd	r25, Y+32	; 0x20
    37ae:	fc 01       	movw	r30, r24
    37b0:	84 81       	ldd	r24, Z+4	; 0x04
    37b2:	83 30       	cpi	r24, 0x03	; 3
    37b4:	31 f5       	brne	.+76     	; 0x3802 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5e6>
						vfo = VFOA;
    37b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37b8:	98 a1       	ldd	r25, Y+32	; 0x20
    37ba:	fc 01       	movw	r30, r24
    37bc:	14 82       	std	Z+4, r1	; 0x04
    37be:	21 c0       	rjmp	.+66     	; 0x3802 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5e6>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    37c0:	89 a1       	ldd	r24, Y+33	; 0x21
    37c2:	9a a1       	ldd	r25, Y+34	; 0x22
    37c4:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    37c8:	98 2f       	mov	r25, r24
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	92 30       	cpi	r25, 0x02	; 2
    37ce:	09 f0       	breq	.+2      	; 0x37d2 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5b6>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	88 23       	and	r24, r24
    37d4:	b1 f0       	breq	.+44     	; 0x3802 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5e6>
					if (vfo == VFOA) {
    37d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37d8:	98 a1       	ldd	r25, Y+32	; 0x20
    37da:	fc 01       	movw	r30, r24
    37dc:	84 81       	ldd	r24, Z+4	; 0x04
    37de:	88 23       	and	r24, r24
    37e0:	31 f4       	brne	.+12     	; 0x37ee <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5d2>
						vfo = SPLIT;
    37e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37e4:	98 a1       	ldd	r25, Y+32	; 0x20
    37e6:	22 e0       	ldi	r18, 0x02	; 2
    37e8:	fc 01       	movw	r30, r24
    37ea:	24 83       	std	Z+4, r18	; 0x04
    37ec:	0a c0       	rjmp	.+20     	; 0x3802 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x5e6>
					} else {
						vfo = (vfo_select_t)((int)vfo - 1);
    37ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37f0:	98 a1       	ldd	r25, Y+32	; 0x20
    37f2:	fc 01       	movw	r30, r24
    37f4:	84 81       	ldd	r24, Z+4	; 0x04
    37f6:	2f ef       	ldi	r18, 0xFF	; 255
    37f8:	28 0f       	add	r18, r24
    37fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37fc:	98 a1       	ldd	r25, Y+32	; 0x20
    37fe:	fc 01       	movw	r30, r24
    3800:	24 83       	std	Z+4, r18	; 0x04
					}
				}
				valp = vfo_strings[vfo];
    3802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3804:	98 a1       	ldd	r25, Y+32	; 0x20
    3806:	fc 01       	movw	r30, r24
    3808:	84 81       	ldd	r24, Z+4	; 0x04
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	80 5c       	subi	r24, 0xC0	; 192
    3814:	9e 4f       	sbci	r25, 0xFE	; 254
    3816:	fc 01       	movw	r30, r24
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
				break;
    3820:	df c0       	rjmp	.+446    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>

			case PARAM_KEY:
				if (enc->getEvent() == ENC_CW_EVENT) {
    3822:	89 a1       	ldd	r24, Y+33	; 0x21
    3824:	9a a1       	ldd	r25, Y+34	; 0x22
    3826:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    382a:	98 2f       	mov	r25, r24
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	91 30       	cpi	r25, 0x01	; 1
    3830:	09 f0       	breq	.+2      	; 0x3834 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x618>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	88 23       	and	r24, r24
    3836:	a9 f0       	breq	.+42     	; 0x3862 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x646>
					key = (key_t)((int)key + 1);
    3838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    383a:	98 a1       	ldd	r25, Y+32	; 0x20
    383c:	fc 01       	movw	r30, r24
    383e:	87 81       	ldd	r24, Z+7	; 0x07
    3840:	21 e0       	ldi	r18, 0x01	; 1
    3842:	28 0f       	add	r18, r24
    3844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3846:	98 a1       	ldd	r25, Y+32	; 0x20
    3848:	fc 01       	movw	r30, r24
    384a:	27 83       	std	Z+7, r18	; 0x07
					if (key == END_OF_KEY) {
    384c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    384e:	98 a1       	ldd	r25, Y+32	; 0x20
    3850:	fc 01       	movw	r30, r24
    3852:	87 81       	ldd	r24, Z+7	; 0x07
    3854:	83 30       	cpi	r24, 0x03	; 3
    3856:	31 f5       	brne	.+76     	; 0x38a4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x688>
						key = KEY_ST;
    3858:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385a:	98 a1       	ldd	r25, Y+32	; 0x20
    385c:	fc 01       	movw	r30, r24
    385e:	17 82       	std	Z+7, r1	; 0x07
    3860:	21 c0       	rjmp	.+66     	; 0x38a4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x688>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    3862:	89 a1       	ldd	r24, Y+33	; 0x21
    3864:	9a a1       	ldd	r25, Y+34	; 0x22
    3866:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    386a:	98 2f       	mov	r25, r24
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	92 30       	cpi	r25, 0x02	; 2
    3870:	09 f0       	breq	.+2      	; 0x3874 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x658>
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	88 23       	and	r24, r24
    3876:	b1 f0       	breq	.+44     	; 0x38a4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x688>
					if (key == KEY_ST) {
    3878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    387a:	98 a1       	ldd	r25, Y+32	; 0x20
    387c:	fc 01       	movw	r30, r24
    387e:	87 81       	ldd	r24, Z+7	; 0x07
    3880:	88 23       	and	r24, r24
    3882:	31 f4       	brne	.+12     	; 0x3890 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x674>
						key = KEY_PDLS;
    3884:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3886:	98 a1       	ldd	r25, Y+32	; 0x20
    3888:	22 e0       	ldi	r18, 0x02	; 2
    388a:	fc 01       	movw	r30, r24
    388c:	27 83       	std	Z+7, r18	; 0x07
    388e:	0a c0       	rjmp	.+20     	; 0x38a4 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x688>
					} else {
						key = (key_t)((int)key - 1);
    3890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3892:	98 a1       	ldd	r25, Y+32	; 0x20
    3894:	fc 01       	movw	r30, r24
    3896:	87 81       	ldd	r24, Z+7	; 0x07
    3898:	2f ef       	ldi	r18, 0xFF	; 255
    389a:	28 0f       	add	r18, r24
    389c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    389e:	98 a1       	ldd	r25, Y+32	; 0x20
    38a0:	fc 01       	movw	r30, r24
    38a2:	27 83       	std	Z+7, r18	; 0x07
					}
				}
				valp = key_strings[key];
    38a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38a6:	98 a1       	ldd	r25, Y+32	; 0x20
    38a8:	fc 01       	movw	r30, r24
    38aa:	87 81       	ldd	r24, Z+7	; 0x07
    38ac:	88 2f       	mov	r24, r24
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	88 0f       	add	r24, r24
    38b2:	99 1f       	adc	r25, r25
    38b4:	86 5b       	subi	r24, 0xB6	; 182
    38b6:	9e 4f       	sbci	r25, 0xFE	; 254
    38b8:	fc 01       	movw	r30, r24
    38ba:	80 81       	ld	r24, Z
    38bc:	91 81       	ldd	r25, Z+1	; 0x01
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	89 83       	std	Y+1, r24	; 0x01
				break;
    38c2:	8e c0       	rjmp	.+284    	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>

			case PARAM_KEY_SPEED:
				if (enc->getEvent() == ENC_CW_EVENT) {
    38c4:	89 a1       	ldd	r24, Y+33	; 0x21
    38c6:	9a a1       	ldd	r25, Y+34	; 0x22
    38c8:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    38cc:	98 2f       	mov	r25, r24
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	91 30       	cpi	r25, 0x01	; 1
    38d2:	09 f0       	breq	.+2      	; 0x38d6 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6ba>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	88 23       	and	r24, r24
    38d8:	b1 f0       	breq	.+44     	; 0x3906 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6ea>
					speed++;
    38da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38dc:	98 a1       	ldd	r25, Y+32	; 0x20
    38de:	fc 01       	movw	r30, r24
    38e0:	80 85       	ldd	r24, Z+8	; 0x08
    38e2:	21 e0       	ldi	r18, 0x01	; 1
    38e4:	28 0f       	add	r18, r24
    38e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38e8:	98 a1       	ldd	r25, Y+32	; 0x20
    38ea:	fc 01       	movw	r30, r24
    38ec:	20 87       	std	Z+8, r18	; 0x08
					if (speed > 25) {
    38ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f0:	98 a1       	ldd	r25, Y+32	; 0x20
    38f2:	fc 01       	movw	r30, r24
    38f4:	80 85       	ldd	r24, Z+8	; 0x08
    38f6:	8a 31       	cpi	r24, 0x1A	; 26
    38f8:	30 f1       	brcs	.+76     	; 0x3946 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x72a>
						speed = 25;
    38fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38fc:	98 a1       	ldd	r25, Y+32	; 0x20
    38fe:	29 e1       	ldi	r18, 0x19	; 25
    3900:	fc 01       	movw	r30, r24
    3902:	20 87       	std	Z+8, r18	; 0x08
    3904:	20 c0       	rjmp	.+64     	; 0x3946 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x72a>
					}
				} else if (enc->getEvent() == ENC_CCW_EVENT) {
    3906:	89 a1       	ldd	r24, Y+33	; 0x21
    3908:	9a a1       	ldd	r25, Y+34	; 0x22
    390a:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    390e:	98 2f       	mov	r25, r24
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	92 30       	cpi	r25, 0x02	; 2
    3914:	09 f0       	breq	.+2      	; 0x3918 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x6fc>
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	88 23       	and	r24, r24
    391a:	a9 f0       	breq	.+42     	; 0x3946 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x72a>
					speed--;
    391c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    391e:	98 a1       	ldd	r25, Y+32	; 0x20
    3920:	fc 01       	movw	r30, r24
    3922:	80 85       	ldd	r24, Z+8	; 0x08
    3924:	2f ef       	ldi	r18, 0xFF	; 255
    3926:	28 0f       	add	r18, r24
    3928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    392a:	98 a1       	ldd	r25, Y+32	; 0x20
    392c:	fc 01       	movw	r30, r24
    392e:	20 87       	std	Z+8, r18	; 0x08
					if (speed < 5) {
    3930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3932:	98 a1       	ldd	r25, Y+32	; 0x20
    3934:	fc 01       	movw	r30, r24
    3936:	80 85       	ldd	r24, Z+8	; 0x08
    3938:	85 30       	cpi	r24, 0x05	; 5
    393a:	28 f4       	brcc	.+10     	; 0x3946 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x72a>
						speed = 5;
    393c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    393e:	98 a1       	ldd	r25, Y+32	; 0x20
    3940:	25 e0       	ldi	r18, 0x05	; 5
    3942:	fc 01       	movw	r30, r24
    3944:	20 87       	std	Z+8, r18	; 0x08
					}
				}
				sprintf(buf,"%2i", speed);
    3946:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3948:	98 a1       	ldd	r25, Y+32	; 0x20
    394a:	fc 01       	movw	r30, r24
    394c:	80 85       	ldd	r24, Z+8	; 0x08
    394e:	88 2f       	mov	r24, r24
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	29 2f       	mov	r18, r25
    3954:	2f 93       	push	r18
    3956:	8f 93       	push	r24
    3958:	88 ed       	ldi	r24, 0xD8	; 216
    395a:	92 e0       	ldi	r25, 0x02	; 2
    395c:	89 2f       	mov	r24, r25
    395e:	8f 93       	push	r24
    3960:	88 ed       	ldi	r24, 0xD8	; 216
    3962:	92 e0       	ldi	r25, 0x02	; 2
    3964:	8f 93       	push	r24
    3966:	ce 01       	movw	r24, r28
    3968:	0f 96       	adiw	r24, 0x0f	; 15
    396a:	29 2f       	mov	r18, r25
    396c:	2f 93       	push	r18
    396e:	8f 93       	push	r24
    3970:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <sprintf>
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
				valp = buf;
    3980:	ce 01       	movw	r24, r28
    3982:	0f 96       	adiw	r24, 0x0f	; 15
    3984:	9a 83       	std	Y+2, r25	; 0x02
    3986:	89 83       	std	Y+1, r24	; 0x01
				break;
    3988:	2b c0       	rjmp	.+86     	; 0x39e0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7c4>

			case PARAM_ACT_VFO:
				if (enc->getEvent() != ENC_NO_EVENT) {
    398a:	89 a1       	ldd	r24, Y+33	; 0x21
    398c:	9a a1       	ldd	r25, Y+34	; 0x22
    398e:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    3992:	98 2f       	mov	r25, r24
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	99 23       	and	r25, r25
    3998:	09 f4       	brne	.+2      	; 0x399c <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x780>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	88 23       	and	r24, r24
    399e:	81 f0       	breq	.+32     	; 0x39c0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7a4>
					if (activeVfo == RX) {
    39a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39a2:	98 a1       	ldd	r25, Y+32	; 0x20
    39a4:	fc 01       	movw	r30, r24
    39a6:	85 81       	ldd	r24, Z+5	; 0x05
    39a8:	88 23       	and	r24, r24
    39aa:	31 f4       	brne	.+12     	; 0x39b8 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x79c>
						activeVfo = TX;
    39ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ae:	98 a1       	ldd	r25, Y+32	; 0x20
    39b0:	21 e0       	ldi	r18, 0x01	; 1
    39b2:	fc 01       	movw	r30, r24
    39b4:	25 83       	std	Z+5, r18	; 0x05
    39b6:	04 c0       	rjmp	.+8      	; 0x39c0 <_ZN6params6updateEP7EncoderP2SwP3Lcd+0x7a4>
					} else {
						activeVfo = RX;
    39b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ba:	98 a1       	ldd	r25, Y+32	; 0x20
    39bc:	fc 01       	movw	r30, r24
    39be:	15 82       	std	Z+5, r1	; 0x05
					}
				}
				valp =  vfoact_strings[activeVfo];
    39c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39c2:	98 a1       	ldd	r25, Y+32	; 0x20
    39c4:	fc 01       	movw	r30, r24
    39c6:	85 81       	ldd	r24, Z+5	; 0x05
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	8a 5b       	subi	r24, 0xBA	; 186
    39d2:	9e 4f       	sbci	r25, 0xFE	; 254
    39d4:	fc 01       	movw	r30, r24
    39d6:	80 81       	ld	r24, Z
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
				break;
    39de:	00 00       	nop

			default:
				break;
		}
		enc->clearEvent();
    39e0:	89 a1       	ldd	r24, Y+33	; 0x21
    39e2:	9a a1       	ldd	r25, Y+34	; 0x22
    39e4:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN7Encoder10clearEventEv>
		line = param_display[curParam].val_psn.line;
    39e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ea:	98 a1       	ldd	r25, Y+32	; 0x20
    39ec:	85 5b       	subi	r24, 0xB5	; 181
    39ee:	9f 4f       	sbci	r25, 0xFF	; 255
    39f0:	fc 01       	movw	r30, r24
    39f2:	80 81       	ld	r24, Z
    39f4:	48 2f       	mov	r20, r24
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    39fa:	38 a1       	ldd	r19, Y+32	; 0x20
    39fc:	6b e0       	ldi	r22, 0x0B	; 11
    39fe:	64 9f       	mul	r22, r20
    3a00:	c0 01       	movw	r24, r0
    3a02:	65 9f       	mul	r22, r21
    3a04:	90 0d       	add	r25, r0
    3a06:	11 24       	eor	r1, r1
    3a08:	82 0f       	add	r24, r18
    3a0a:	93 1f       	adc	r25, r19
    3a0c:	40 96       	adiw	r24, 0x10	; 16
    3a0e:	fc 01       	movw	r30, r24
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	9c 87       	std	Y+12, r25	; 0x0c
    3a16:	8b 87       	std	Y+11, r24	; 0x0b
		col =  param_display[curParam].val_psn.col;
    3a18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a1a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a1c:	85 5b       	subi	r24, 0xB5	; 181
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	fc 01       	movw	r30, r24
    3a22:	80 81       	ld	r24, Z
    3a24:	48 2f       	mov	r20, r24
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a2a:	38 a1       	ldd	r19, Y+32	; 0x20
    3a2c:	6b e0       	ldi	r22, 0x0B	; 11
    3a2e:	64 9f       	mul	r22, r20
    3a30:	c0 01       	movw	r24, r0
    3a32:	65 9f       	mul	r22, r21
    3a34:	90 0d       	add	r25, r0
    3a36:	11 24       	eor	r1, r1
    3a38:	82 0f       	add	r24, r18
    3a3a:	93 1f       	adc	r25, r19
    3a3c:	42 96       	adiw	r24, 0x12	; 18
    3a3e:	fc 01       	movw	r30, r24
    3a40:	80 81       	ld	r24, Z
    3a42:	91 81       	ldd	r25, Z+1	; 0x01
    3a44:	9e 87       	std	Y+14, r25	; 0x0e
    3a46:	8d 87       	std	Y+13, r24	; 0x0d
		lcd->gotoxy(line,col);
    3a48:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a50:	43 2f       	mov	r20, r19
    3a52:	62 2f       	mov	r22, r18
    3a54:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN3Lcd6gotoxyEhh>
		lcd->puts(valp, fgc, bgc);
    3a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a5c:	8b 5a       	subi	r24, 0xAB	; 171
    3a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a60:	fc 01       	movw	r30, r24
    3a62:	20 81       	ld	r18, Z
    3a64:	31 81       	ldd	r19, Z+1	; 0x01
    3a66:	42 81       	ldd	r20, Z+2	; 0x02
    3a68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a6a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a6c:	8e 5a       	subi	r24, 0xAE	; 174
    3a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a70:	fc 01       	movw	r30, r24
    3a72:	80 81       	ld	r24, Z
    3a74:	91 81       	ldd	r25, Z+1	; 0x01
    3a76:	a2 81       	ldd	r26, Z+2	; 0x02
    3a78:	69 81       	ldd	r22, Y+1	; 0x01
    3a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    3a7c:	ed a1       	ldd	r30, Y+37	; 0x25
    3a7e:	fe a1       	ldd	r31, Y+38	; 0x26
    3a80:	79 01       	movw	r14, r18
    3a82:	04 2f       	mov	r16, r20
    3a84:	9c 01       	movw	r18, r24
    3a86:	4a 2f       	mov	r20, r26
    3a88:	cf 01       	movw	r24, r30
    3a8a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN3Lcd4putsEPKc9_pixColorS2_>
	}


}
    3a8e:	a6 96       	adiw	r28, 0x26	; 38
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 90       	pop	r15
    3aa2:	ef 90       	pop	r14
    3aa4:	08 95       	ret

00003aa6 <_ZN2SwC1Ehh>:


//
// initialize switches
//
Sw::Sw(uint8_t s, volatile uint8_t p) {
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <_ZN2SwC1Ehh+0x6>
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <_ZN2SwC1Ehh+0x8>
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <_ZN2SwC1Ehh+0xa>
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	9c 83       	std	Y+4, r25	; 0x04
    3ab6:	8b 83       	std	Y+3, r24	; 0x03
    3ab8:	6d 83       	std	Y+5, r22	; 0x05
    3aba:	4e 83       	std	Y+6, r20	; 0x06
    3abc:	8b 81       	ldd	r24, Y+3	; 0x03
    3abe:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac0:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN8CallbackC1Ev>
    3ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac8:	28 ef       	ldi	r18, 0xF8	; 248
    3aca:	32 e0       	ldi	r19, 0x02	; 2
    3acc:	fc 01       	movw	r30, r24
    3ace:	31 83       	std	Z+1, r19	; 0x01
    3ad0:	20 83       	st	Z, r18
	uint8_t temp;
	uint8_t msk = (1 << s);
    3ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad4:	28 2f       	mov	r18, r24
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <_ZN2SwC1Ehh+0x3c>
    3ade:	88 0f       	add	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	2a 95       	dec	r18
    3ae4:	e2 f7       	brpl	.-8      	; 0x3ade <_ZN2SwC1Ehh+0x38>
    3ae6:	89 83       	std	Y+1, r24	; 0x01

	port = (volatile uint8_t *)p;
    3ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    3aea:	88 2f       	mov	r24, r24
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9c 01       	movw	r18, r24
    3af0:	8b 81       	ldd	r24, Y+3	; 0x03
    3af2:	9c 81       	ldd	r25, Y+4	; 0x04
    3af4:	fc 01       	movw	r30, r24
    3af6:	34 83       	std	Z+4, r19	; 0x04
    3af8:	23 83       	std	Z+3, r18	; 0x03
	pin = (volatile uint8_t *)(p-2);
    3afa:	8e 81       	ldd	r24, Y+6	; 0x06
    3afc:	88 2f       	mov	r24, r24
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	02 97       	sbiw	r24, 0x02	; 2
    3b02:	9c 01       	movw	r18, r24
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	9c 81       	ldd	r25, Y+4	; 0x04
    3b08:	fc 01       	movw	r30, r24
    3b0a:	36 83       	std	Z+6, r19	; 0x06
    3b0c:	25 83       	std	Z+5, r18	; 0x05
	ddr = (volatile uint8_t *)(p-1);
    3b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b10:	88 2f       	mov	r24, r24
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	9c 01       	movw	r18, r24
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	30 87       	std	Z+8, r19	; 0x08
    3b20:	27 83       	std	Z+7, r18	; 0x07
	swNum = s;
    3b22:	8b 81       	ldd	r24, Y+3	; 0x03
    3b24:	9c 81       	ldd	r25, Y+4	; 0x04
    3b26:	2d 81       	ldd	r18, Y+5	; 0x05
    3b28:	fc 01       	movw	r30, r24
    3b2a:	22 83       	std	Z+2, r18	; 0x02

	// set bit as input
	temp = *ddr;
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	fc 01       	movw	r30, r24
    3b32:	87 81       	ldd	r24, Z+7	; 0x07
    3b34:	90 85       	ldd	r25, Z+8	; 0x08
    3b36:	fc 01       	movw	r30, r24
    3b38:	80 81       	ld	r24, Z
    3b3a:	8a 83       	std	Y+2, r24	; 0x02
	temp &= ~msk;
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	98 2f       	mov	r25, r24
    3b40:	90 95       	com	r25
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	89 23       	and	r24, r25
    3b46:	8a 83       	std	Y+2, r24	; 0x02
	*ddr = temp;
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	87 81       	ldd	r24, Z+7	; 0x07
    3b50:	90 85       	ldd	r25, Z+8	; 0x08
    3b52:	2a 81       	ldd	r18, Y+2	; 0x02
    3b54:	fc 01       	movw	r30, r24
    3b56:	20 83       	st	Z, r18

	// enable input pullup
	temp = *port;
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	83 81       	ldd	r24, Z+3	; 0x03
    3b60:	94 81       	ldd	r25, Z+4	; 0x04
    3b62:	fc 01       	movw	r30, r24
    3b64:	80 81       	ld	r24, Z
    3b66:	8a 83       	std	Y+2, r24	; 0x02
	temp |= msk;
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	89 2b       	or	r24, r25
    3b6e:	8a 83       	std	Y+2, r24	; 0x02
	*port = temp;
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	fc 01       	movw	r30, r24
    3b76:	83 81       	ldd	r24, Z+3	; 0x03
    3b78:	94 81       	ldd	r25, Z+4	; 0x04
    3b7a:	2a 81       	ldd	r18, Y+2	; 0x02
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	20 83       	st	Z, r18

	// get the current state of the switch
	temp = *pin & msk;
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	9c 81       	ldd	r25, Y+4	; 0x04
    3b84:	fc 01       	movw	r30, r24
    3b86:	85 81       	ldd	r24, Z+5	; 0x05
    3b88:	96 81       	ldd	r25, Z+6	; 0x06
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	90 81       	ld	r25, Z
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	89 23       	and	r24, r25
    3b92:	8a 83       	std	Y+2, r24	; 0x02
	if (temp) {
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	88 23       	and	r24, r24
    3b98:	29 f0       	breq	.+10     	; 0x3ba4 <_ZN2SwC1Ehh+0xfe>
		state = PB_OPEN;
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	11 86       	std	Z+9, r1	; 0x09
    3ba2:	05 c0       	rjmp	.+10     	; 0x3bae <_ZN2SwC1Ehh+0x108>
	}	else {
		state = PB_CLOSE;
    3ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba8:	22 e0       	ldi	r18, 0x02	; 2
    3baa:	fc 01       	movw	r30, r24
    3bac:	21 87       	std	Z+9, r18	; 0x09
	}
	lastEvent = EV_NONE;
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	12 86       	std	Z+10, r1	; 0x0a
	Clock::registerPeriodic(this, TEN_MSEC);
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN5Clock16registerPeriodicEP8Callbackj>
}
    3bc2:	26 96       	adiw	r28, 0x06	; 6
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	08 95       	ret

00003bd4 <_ZN2Sw6updateEv>:


void Sw::update(void) {
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <_ZN2Sw6updateEv+0x6>
    3bda:	1f 92       	push	r1
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	9b 83       	std	Y+3, r25	; 0x03
    3be2:	8a 83       	std	Y+2, r24	; 0x02

uint8_t temp = *pin & (1 << swNum);
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	9b 81       	ldd	r25, Y+3	; 0x03
    3be8:	fc 01       	movw	r30, r24
    3bea:	85 81       	ldd	r24, Z+5	; 0x05
    3bec:	96 81       	ldd	r25, Z+6	; 0x06
    3bee:	fc 01       	movw	r30, r24
    3bf0:	80 81       	ld	r24, Z
    3bf2:	48 2f       	mov	r20, r24
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <_ZN2Sw6updateEv+0x36>
    3c06:	88 0f       	add	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	2a 95       	dec	r18
    3c0c:	e2 f7       	brpl	.-8      	; 0x3c06 <_ZN2Sw6updateEv+0x32>
    3c0e:	84 23       	and	r24, r20
    3c10:	89 83       	std	Y+1, r24	; 0x01

	switch (state) {
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	9b 81       	ldd	r25, Y+3	; 0x03
    3c16:	fc 01       	movw	r30, r24
    3c18:	81 85       	ldd	r24, Z+9	; 0x09
    3c1a:	88 2f       	mov	r24, r24
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	81 30       	cpi	r24, 0x01	; 1
    3c20:	91 05       	cpc	r25, r1
    3c22:	a9 f0       	breq	.+42     	; 0x3c4e <_ZN2Sw6updateEv+0x7a>
    3c24:	82 30       	cpi	r24, 0x02	; 2
    3c26:	91 05       	cpc	r25, r1
    3c28:	1c f4       	brge	.+6      	; 0x3c30 <_ZN2Sw6updateEv+0x5c>
    3c2a:	89 2b       	or	r24, r25
    3c2c:	39 f0       	breq	.+14     	; 0x3c3c <_ZN2Sw6updateEv+0x68>
    3c2e:	33 c0       	rjmp	.+102    	; 0x3c96 <_ZN2Sw6updateEv+0xc2>
    3c30:	82 30       	cpi	r24, 0x02	; 2
    3c32:	91 05       	cpc	r25, r1
    3c34:	d1 f0       	breq	.+52     	; 0x3c6a <_ZN2Sw6updateEv+0x96>
    3c36:	03 97       	sbiw	r24, 0x03	; 3
    3c38:	09 f1       	breq	.+66     	; 0x3c7c <_ZN2Sw6updateEv+0xa8>
    3c3a:	2d c0       	rjmp	.+90     	; 0x3c96 <_ZN2Sw6updateEv+0xc2>
	
		case PB_OPEN:
			if (!temp) {
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	88 23       	and	r24, r24
    3c40:	29 f4       	brne	.+10     	; 0x3c4c <_ZN2Sw6updateEv+0x78>
				state = PB_CLOSE_DLY;
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	9b 81       	ldd	r25, Y+3	; 0x03
    3c46:	21 e0       	ldi	r18, 0x01	; 1
    3c48:	fc 01       	movw	r30, r24
    3c4a:	21 87       	std	Z+9, r18	; 0x09
			}
			break;
    3c4c:	24 c0       	rjmp	.+72     	; 0x3c96 <_ZN2Sw6updateEv+0xc2>

		case PB_CLOSE_DLY:
			if (!temp) {
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	88 23       	and	r24, r24
    3c52:	51 f4       	brne	.+20     	; 0x3c68 <_ZN2Sw6updateEv+0x94>
				state = PB_CLOSE;
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	9b 81       	ldd	r25, Y+3	; 0x03
    3c58:	22 e0       	ldi	r18, 0x02	; 2
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	21 87       	std	Z+9, r18	; 0x09
				lastEvent = EV_CLOSE;
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	9b 81       	ldd	r25, Y+3	; 0x03
    3c62:	22 e0       	ldi	r18, 0x02	; 2
    3c64:	fc 01       	movw	r30, r24
    3c66:	22 87       	std	Z+10, r18	; 0x0a
			}
			break;	
    3c68:	16 c0       	rjmp	.+44     	; 0x3c96 <_ZN2Sw6updateEv+0xc2>
	
		case PB_CLOSE:
			if (temp) {
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	88 23       	and	r24, r24
    3c6e:	29 f0       	breq	.+10     	; 0x3c7a <_ZN2Sw6updateEv+0xa6>
				state = PB_OPEN_DLY;
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	9b 81       	ldd	r25, Y+3	; 0x03
    3c74:	23 e0       	ldi	r18, 0x03	; 3
    3c76:	fc 01       	movw	r30, r24
    3c78:	21 87       	std	Z+9, r18	; 0x09
			}	
			break;
    3c7a:	0d c0       	rjmp	.+26     	; 0x3c96 <_ZN2Sw6updateEv+0xc2>

		case PB_OPEN_DLY:
			if (temp) {
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	88 23       	and	r24, r24
    3c80:	49 f0       	breq	.+18     	; 0x3c94 <_ZN2Sw6updateEv+0xc0>
				state = PB_OPEN;
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	9b 81       	ldd	r25, Y+3	; 0x03
    3c86:	fc 01       	movw	r30, r24
    3c88:	11 86       	std	Z+9, r1	; 0x09
				lastEvent = EV_OPEN;
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8e:	21 e0       	ldi	r18, 0x01	; 1
    3c90:	fc 01       	movw	r30, r24
    3c92:	22 87       	std	Z+10, r18	; 0x0a
			}
			break;
    3c94:	00 00       	nop
	}				
	
}
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	08 95       	ret

00003ca2 <_ZN2Sw8hasEventEv>:


bool	Sw::hasEvent(void) {
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <_ZN2Sw8hasEventEv+0x6>
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	9a 83       	std	Y+2, r25	; 0x02
    3cae:	89 83       	std	Y+1, r24	; 0x01
	if (lastEvent != EV_NONE) {
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	82 85       	ldd	r24, Z+10	; 0x0a
    3cb8:	88 23       	and	r24, r24
    3cba:	11 f0       	breq	.+4      	; 0x3cc0 <_ZN2Sw8hasEventEv+0x1e>
		return true;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <_ZN2Sw8hasEventEv+0x20>
	}
	return false;
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
}
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

00003ccc <_ZN2Sw8getEventEv>:


event Sw::getEvent(void) {
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <_ZN2Sw8getEventEv+0x6>
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
	return lastEvent;
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	fc 01       	movw	r30, r24
    3ce0:	82 85       	ldd	r24, Z+10	; 0x0a
}
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	08 95       	ret

00003cec <_ZN2Sw10clearEventEv>:

void Sw::clearEvent(void) {
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <_ZN2Sw10clearEventEv+0x6>
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	9a 83       	std	Y+2, r25	; 0x02
    3cf8:	89 83       	std	Y+1, r24	; 0x01
	lastEvent = EV_NONE;
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	fc 01       	movw	r30, r24
    3d00:	12 86       	std	Z+10, r1	; 0x0a
}
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <_ZN2Sw8callbackEv>:


void Sw::callback(void) {
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <_ZN2Sw8callbackEv+0x6>
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    3d16:	9a 83       	std	Y+2, r25	; 0x02
    3d18:	89 83       	std	Y+1, r24	; 0x01
	update();
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1e:	5a df       	rcall	.-332    	; 0x3bd4 <_ZN2Sw6updateEv>
}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <_ZN2Sw8isClosedEv>:


bool Sw::isClosed(void) {
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <_ZN2Sw8isClosedEv+0x6>
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 83       	std	Y+1, r24	; 0x01

	return ((state == PB_CLOSE) || (state == PB_OPEN_DLY));
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	81 85       	ldd	r24, Z+9	; 0x09
    3d40:	82 30       	cpi	r24, 0x02	; 2
    3d42:	31 f0       	breq	.+12     	; 0x3d50 <_ZN2Sw8isClosedEv+0x26>
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	fc 01       	movw	r30, r24
    3d4a:	81 85       	ldd	r24, Z+9	; 0x09
    3d4c:	83 30       	cpi	r24, 0x03	; 3
    3d4e:	11 f4       	brne	.+4      	; 0x3d54 <_ZN2Sw8isClosedEv+0x2a>
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <_ZN2Sw8isClosedEv+0x2c>
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	08 95       	ret

00003d60 <uart_init>:
 #include "uart.h"



 void uart_init( void)
 {
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
 
 //  Set baud rate for 115200 
 	 UBRR0H = (uint8_t)( UBRR_115200 >> 8);
    3d68:	85 ec       	ldi	r24, 0xC5	; 197
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	10 82       	st	Z, r1
	 UBRR0L = (uint8_t) UBRR_115200	;
    3d70:	84 ec       	ldi	r24, 0xC4	; 196
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	28 e0       	ldi	r18, 0x08	; 8
    3d76:	fc 01       	movw	r30, r24
    3d78:	20 83       	st	Z, r18

//	 Enable receiver and transmitter
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    3d7a:	81 ec       	ldi	r24, 0xC1	; 193
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	28 e1       	ldi	r18, 0x18	; 24
    3d80:	fc 01       	movw	r30, r24
    3d82:	20 83       	st	Z, r18

//	8data, 2 stop bits
	 UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    3d84:	82 ec       	ldi	r24, 0xC2	; 194
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	2e e0       	ldi	r18, 0x0E	; 14
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	20 83       	st	Z, r18
}
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	08 95       	ret

00003d94 <uart_getc>:

int uart_getc(FILE *f) {
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <uart_getc+0x6>
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
    3d9e:	9a 83       	std	Y+2, r25	; 0x02
    3da0:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << RXC0)));
    3da2:	00 00       	nop
    3da4:	80 ec       	ldi	r24, 0xC0	; 192
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	fc 01       	movw	r30, r24
    3daa:	80 81       	ld	r24, Z
    3dac:	80 95       	com	r24
    3dae:	88 1f       	adc	r24, r24
    3db0:	88 27       	eor	r24, r24
    3db2:	88 1f       	adc	r24, r24
    3db4:	88 23       	and	r24, r24
    3db6:	b1 f7       	brne	.-20     	; 0x3da4 <uart_getc+0x10>
	return UDR0;
    3db8:	86 ec       	ldi	r24, 0xC6	; 198
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	80 81       	ld	r24, Z
    3dc0:	88 2f       	mov	r24, r24
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
}
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <uart_putc>:


int  uart_putc(char c, FILE *f) {
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <uart_putc+0x6>
    3dd4:	1f 92       	push	r1
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	89 83       	std	Y+1, r24	; 0x01
    3ddc:	7b 83       	std	Y+3, r23	; 0x03
    3dde:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') {
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	8a 30       	cpi	r24, 0x0A	; 10
    3de4:	29 f4       	brne	.+10     	; 0x3df0 <uart_putc+0x22>
		uart_putc('\r', f);
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dea:	bc 01       	movw	r22, r24
    3dec:	8d e0       	ldi	r24, 0x0D	; 13
    3dee:	ef df       	rcall	.-34     	; 0x3dce <uart_putc>
	}
	while (!(UCSR0A & (1 << UDRE0)));
    3df0:	00 00       	nop
    3df2:	80 ec       	ldi	r24, 0xC0	; 192
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	fc 01       	movw	r30, r24
    3df8:	80 81       	ld	r24, Z
    3dfa:	88 2f       	mov	r24, r24
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	80 72       	andi	r24, 0x20	; 32
    3e00:	99 27       	eor	r25, r25
    3e02:	21 e0       	ldi	r18, 0x01	; 1
    3e04:	89 2b       	or	r24, r25
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <uart_putc+0x3c>
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	22 23       	and	r18, r18
    3e0c:	91 f7       	brne	.-28     	; 0x3df2 <uart_putc+0x24>
	UDR0 = c;
    3e0e:	86 ec       	ldi	r24, 0xC6	; 198
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	29 81       	ldd	r18, Y+1	; 0x01
    3e14:	fc 01       	movw	r30, r24
    3e16:	20 83       	st	Z, r18
	return 0;
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
}
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	08 95       	ret

00003e28 <_ZN3vfoC1EP7EncoderP13vfoParametersj>:
	1000000
};



vfo::vfo(Encoder *enc, vfoParameters *vf, uint16_t l) {
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	2a 97       	sbiw	r28, 0x0a	; 10
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	9c 83       	std	Y+4, r25	; 0x04
    3e3e:	8b 83       	std	Y+3, r24	; 0x03
    3e40:	7e 83       	std	Y+6, r23	; 0x06
    3e42:	6d 83       	std	Y+5, r22	; 0x05
    3e44:	58 87       	std	Y+8, r21	; 0x08
    3e46:	4f 83       	std	Y+7, r20	; 0x07
    3e48:	3a 87       	std	Y+10, r19	; 0x0a
    3e4a:	29 87       	std	Y+9, r18	; 0x09

	for (int i=0; i< END_OF_BAND; i++) {
    3e4c:	1a 82       	std	Y+2, r1	; 0x02
    3e4e:	19 82       	std	Y+1, r1	; 0x01
    3e50:	06 c1       	rjmp	.+524    	; 0x405e <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x236>
		vfoData[i].rxFreq = vf[i].rxFreq;
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	9c 01       	movw	r18, r24
    3e5c:	22 0f       	add	r18, r18
    3e5e:	33 1f       	adc	r19, r19
    3e60:	22 0f       	add	r18, r18
    3e62:	33 1f       	adc	r19, r19
    3e64:	22 0f       	add	r18, r18
    3e66:	33 1f       	adc	r19, r19
    3e68:	82 0f       	add	r24, r18
    3e6a:	93 1f       	adc	r25, r19
    3e6c:	2f 81       	ldd	r18, Y+7	; 0x07
    3e6e:	38 85       	ldd	r19, Y+8	; 0x08
    3e70:	82 0f       	add	r24, r18
    3e72:	93 1f       	adc	r25, r19
    3e74:	fc 01       	movw	r30, r24
    3e76:	20 81       	ld	r18, Z
    3e78:	31 81       	ldd	r19, Z+1	; 0x01
    3e7a:	42 81       	ldd	r20, Z+2	; 0x02
    3e7c:	53 81       	ldd	r21, Z+3	; 0x03
    3e7e:	6b 81       	ldd	r22, Y+3	; 0x03
    3e80:	7c 81       	ldd	r23, Y+4	; 0x04
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	9a 81       	ldd	r25, Y+2	; 0x02
    3e86:	88 0f       	add	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	ee 0f       	add	r30, r30
    3e8e:	ff 1f       	adc	r31, r31
    3e90:	ee 0f       	add	r30, r30
    3e92:	ff 1f       	adc	r31, r31
    3e94:	ee 0f       	add	r30, r30
    3e96:	ff 1f       	adc	r31, r31
    3e98:	8e 0f       	add	r24, r30
    3e9a:	9f 1f       	adc	r25, r31
    3e9c:	86 0f       	add	r24, r22
    3e9e:	97 1f       	adc	r25, r23
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	20 83       	st	Z, r18
    3ea4:	31 83       	std	Z+1, r19	; 0x01
    3ea6:	42 83       	std	Z+2, r20	; 0x02
    3ea8:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].rxOffset = vf[i].rxOffset;
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	9a 81       	ldd	r25, Y+2	; 0x02
    3eae:	88 0f       	add	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	22 0f       	add	r18, r18
    3eb6:	33 1f       	adc	r19, r19
    3eb8:	22 0f       	add	r18, r18
    3eba:	33 1f       	adc	r19, r19
    3ebc:	22 0f       	add	r18, r18
    3ebe:	33 1f       	adc	r19, r19
    3ec0:	82 0f       	add	r24, r18
    3ec2:	93 1f       	adc	r25, r19
    3ec4:	2f 81       	ldd	r18, Y+7	; 0x07
    3ec6:	38 85       	ldd	r19, Y+8	; 0x08
    3ec8:	82 0f       	add	r24, r18
    3eca:	93 1f       	adc	r25, r19
    3ecc:	fc 01       	movw	r30, r24
    3ece:	24 81       	ldd	r18, Z+4	; 0x04
    3ed0:	35 81       	ldd	r19, Z+5	; 0x05
    3ed2:	46 81       	ldd	r20, Z+6	; 0x06
    3ed4:	57 81       	ldd	r21, Z+7	; 0x07
    3ed6:	6b 81       	ldd	r22, Y+3	; 0x03
    3ed8:	7c 81       	ldd	r23, Y+4	; 0x04
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	ee 0f       	add	r30, r30
    3ee6:	ff 1f       	adc	r31, r31
    3ee8:	ee 0f       	add	r30, r30
    3eea:	ff 1f       	adc	r31, r31
    3eec:	ee 0f       	add	r30, r30
    3eee:	ff 1f       	adc	r31, r31
    3ef0:	8e 0f       	add	r24, r30
    3ef2:	9f 1f       	adc	r25, r31
    3ef4:	86 0f       	add	r24, r22
    3ef6:	97 1f       	adc	r25, r23
    3ef8:	04 96       	adiw	r24, 0x04	; 4
    3efa:	fc 01       	movw	r30, r24
    3efc:	20 83       	st	Z, r18
    3efe:	31 83       	std	Z+1, r19	; 0x01
    3f00:	42 83       	std	Z+2, r20	; 0x02
    3f02:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].rxMult = vf[i].rxMult;
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	9a 81       	ldd	r25, Y+2	; 0x02
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	9c 01       	movw	r18, r24
    3f0e:	22 0f       	add	r18, r18
    3f10:	33 1f       	adc	r19, r19
    3f12:	22 0f       	add	r18, r18
    3f14:	33 1f       	adc	r19, r19
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	82 0f       	add	r24, r18
    3f1c:	93 1f       	adc	r25, r19
    3f1e:	2f 81       	ldd	r18, Y+7	; 0x07
    3f20:	38 85       	ldd	r19, Y+8	; 0x08
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	fc 01       	movw	r30, r24
    3f28:	60 85       	ldd	r22, Z+8	; 0x08
    3f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	ac 01       	movw	r20, r24
    3f38:	44 0f       	add	r20, r20
    3f3a:	55 1f       	adc	r21, r21
    3f3c:	44 0f       	add	r20, r20
    3f3e:	55 1f       	adc	r21, r21
    3f40:	44 0f       	add	r20, r20
    3f42:	55 1f       	adc	r21, r21
    3f44:	84 0f       	add	r24, r20
    3f46:	95 1f       	adc	r25, r21
    3f48:	82 0f       	add	r24, r18
    3f4a:	93 1f       	adc	r25, r19
    3f4c:	08 96       	adiw	r24, 0x08	; 8
    3f4e:	fc 01       	movw	r30, r24
    3f50:	60 83       	st	Z, r22
		vfoData[i].txFreq = vf[i].txFreq;
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	9a 81       	ldd	r25, Y+2	; 0x02
    3f56:	88 0f       	add	r24, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	9c 01       	movw	r18, r24
    3f5c:	22 0f       	add	r18, r18
    3f5e:	33 1f       	adc	r19, r19
    3f60:	22 0f       	add	r18, r18
    3f62:	33 1f       	adc	r19, r19
    3f64:	22 0f       	add	r18, r18
    3f66:	33 1f       	adc	r19, r19
    3f68:	82 0f       	add	r24, r18
    3f6a:	93 1f       	adc	r25, r19
    3f6c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f6e:	38 85       	ldd	r19, Y+8	; 0x08
    3f70:	82 0f       	add	r24, r18
    3f72:	93 1f       	adc	r25, r19
    3f74:	fc 01       	movw	r30, r24
    3f76:	21 85       	ldd	r18, Z+9	; 0x09
    3f78:	32 85       	ldd	r19, Z+10	; 0x0a
    3f7a:	43 85       	ldd	r20, Z+11	; 0x0b
    3f7c:	54 85       	ldd	r21, Z+12	; 0x0c
    3f7e:	6b 81       	ldd	r22, Y+3	; 0x03
    3f80:	7c 81       	ldd	r23, Y+4	; 0x04
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	9a 81       	ldd	r25, Y+2	; 0x02
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	ee 0f       	add	r30, r30
    3f92:	ff 1f       	adc	r31, r31
    3f94:	ee 0f       	add	r30, r30
    3f96:	ff 1f       	adc	r31, r31
    3f98:	8e 0f       	add	r24, r30
    3f9a:	9f 1f       	adc	r25, r31
    3f9c:	86 0f       	add	r24, r22
    3f9e:	97 1f       	adc	r25, r23
    3fa0:	09 96       	adiw	r24, 0x09	; 9
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	20 83       	st	Z, r18
    3fa6:	31 83       	std	Z+1, r19	; 0x01
    3fa8:	42 83       	std	Z+2, r20	; 0x02
    3faa:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].txOffset = vf[i].txOffset;
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	9c 01       	movw	r18, r24
    3fb6:	22 0f       	add	r18, r18
    3fb8:	33 1f       	adc	r19, r19
    3fba:	22 0f       	add	r18, r18
    3fbc:	33 1f       	adc	r19, r19
    3fbe:	22 0f       	add	r18, r18
    3fc0:	33 1f       	adc	r19, r19
    3fc2:	82 0f       	add	r24, r18
    3fc4:	93 1f       	adc	r25, r19
    3fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc8:	38 85       	ldd	r19, Y+8	; 0x08
    3fca:	82 0f       	add	r24, r18
    3fcc:	93 1f       	adc	r25, r19
    3fce:	fc 01       	movw	r30, r24
    3fd0:	25 85       	ldd	r18, Z+13	; 0x0d
    3fd2:	36 85       	ldd	r19, Z+14	; 0x0e
    3fd4:	47 85       	ldd	r20, Z+15	; 0x0f
    3fd6:	50 89       	ldd	r21, Z+16	; 0x10
    3fd8:	6b 81       	ldd	r22, Y+3	; 0x03
    3fda:	7c 81       	ldd	r23, Y+4	; 0x04
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	ee 0f       	add	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	ee 0f       	add	r30, r30
    3ff0:	ff 1f       	adc	r31, r31
    3ff2:	8e 0f       	add	r24, r30
    3ff4:	9f 1f       	adc	r25, r31
    3ff6:	86 0f       	add	r24, r22
    3ff8:	97 1f       	adc	r25, r23
    3ffa:	0d 96       	adiw	r24, 0x0d	; 13
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	20 83       	st	Z, r18
    4000:	31 83       	std	Z+1, r19	; 0x01
    4002:	42 83       	std	Z+2, r20	; 0x02
    4004:	53 83       	std	Z+3, r21	; 0x03
		vfoData[i].txMult = vf[i].txMult;
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	9a 81       	ldd	r25, Y+2	; 0x02
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	9c 01       	movw	r18, r24
    4010:	22 0f       	add	r18, r18
    4012:	33 1f       	adc	r19, r19
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	22 0f       	add	r18, r18
    401a:	33 1f       	adc	r19, r19
    401c:	82 0f       	add	r24, r18
    401e:	93 1f       	adc	r25, r19
    4020:	2f 81       	ldd	r18, Y+7	; 0x07
    4022:	38 85       	ldd	r19, Y+8	; 0x08
    4024:	82 0f       	add	r24, r18
    4026:	93 1f       	adc	r25, r19
    4028:	fc 01       	movw	r30, r24
    402a:	61 89       	ldd	r22, Z+17	; 0x11
    402c:	2b 81       	ldd	r18, Y+3	; 0x03
    402e:	3c 81       	ldd	r19, Y+4	; 0x04
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	9a 81       	ldd	r25, Y+2	; 0x02
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	ac 01       	movw	r20, r24
    403a:	44 0f       	add	r20, r20
    403c:	55 1f       	adc	r21, r21
    403e:	44 0f       	add	r20, r20
    4040:	55 1f       	adc	r21, r21
    4042:	44 0f       	add	r20, r20
    4044:	55 1f       	adc	r21, r21
    4046:	84 0f       	add	r24, r20
    4048:	95 1f       	adc	r25, r21
    404a:	82 0f       	add	r24, r18
    404c:	93 1f       	adc	r25, r19
    404e:	41 96       	adiw	r24, 0x11	; 17
    4050:	fc 01       	movw	r30, r24
    4052:	60 83       	st	Z, r22



vfo::vfo(Encoder *enc, vfoParameters *vf, uint16_t l) {

	for (int i=0; i< END_OF_BAND; i++) {
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	9a 81       	ldd	r25, Y+2	; 0x02
    4058:	01 96       	adiw	r24, 0x01	; 1
    405a:	9a 83       	std	Y+2, r25	; 0x02
    405c:	89 83       	std	Y+1, r24	; 0x01
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	9a 81       	ldd	r25, Y+2	; 0x02
    4062:	09 97       	sbiw	r24, 0x09	; 9
    4064:	0c f4       	brge	.+2      	; 0x4068 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x240>
    4066:	f5 ce       	rjmp	.-534    	; 0x3e52 <_ZN3vfoC1EP7EncoderP13vfoParametersj+0x2a>
		vfoData[i].rxMult = vf[i].rxMult;
		vfoData[i].txFreq = vf[i].txFreq;
		vfoData[i].txOffset = vf[i].txOffset;
		vfoData[i].txMult = vf[i].txMult;
	}
	this->enc = enc;
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
    406a:	9c 81       	ldd	r25, Y+4	; 0x04
    406c:	89 55       	subi	r24, 0x59	; 89
    406e:	9f 4f       	sbci	r25, 0xFF	; 255
    4070:	2d 81       	ldd	r18, Y+5	; 0x05
    4072:	3e 81       	ldd	r19, Y+6	; 0x06
    4074:	fc 01       	movw	r30, r24
    4076:	31 83       	std	Z+1, r19	; 0x01
    4078:	20 83       	st	Z, r18
	fstep = 100;
    407a:	8b 81       	ldd	r24, Y+3	; 0x03
    407c:	9c 81       	ldd	r25, Y+4	; 0x04
    407e:	9c 01       	movw	r18, r24
    4080:	2e 55       	subi	r18, 0x5E	; 94
    4082:	3f 4f       	sbci	r19, 0xFF	; 255
    4084:	84 e6       	ldi	r24, 0x64	; 100
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	a0 e0       	ldi	r26, 0x00	; 0
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	f9 01       	movw	r30, r18
    408e:	80 83       	st	Z, r24
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	a2 83       	std	Z+2, r26	; 0x02
    4094:	b3 83       	std	Z+3, r27	; 0x03
	step = STEP_100HZ;
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	8a 55       	subi	r24, 0x5A	; 90
    409c:	9f 4f       	sbci	r25, 0xFF	; 255
    409e:	21 e0       	ldi	r18, 0x01	; 1
    40a0:	fc 01       	movw	r30, r24
    40a2:	20 83       	st	Z, r18
	line = l;
    40a4:	8b 81       	ldd	r24, Y+3	; 0x03
    40a6:	9c 81       	ldd	r25, Y+4	; 0x04
    40a8:	87 55       	subi	r24, 0x57	; 87
    40aa:	9f 4f       	sbci	r25, 0xFF	; 255
    40ac:	29 85       	ldd	r18, Y+9	; 0x09
    40ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    40b0:	fc 01       	movw	r30, r24
    40b2:	31 83       	std	Z+1, r19	; 0x01
    40b4:	20 83       	st	Z, r18
}
    40b6:	2a 96       	adiw	r28, 0x0a	; 10
    40b8:	0f b6       	in	r0, 0x3f	; 63
    40ba:	f8 94       	cli
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	0f be       	out	0x3f, r0	; 63
    40c0:	cd bf       	out	0x3d, r28	; 61
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <_ZN3vfo6updateEh>:

//
// Process events sent to the vfo page
//

void vfo::update(uint8_t band) {
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	28 97       	sbiw	r28, 0x08	; 8
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	9f 83       	std	Y+7, r25	; 0x07
    40e6:	8e 83       	std	Y+6, r24	; 0x06
    40e8:	68 87       	std	Y+8, r22	; 0x08

	if (enc->hasEvent()) {
    40ea:	8e 81       	ldd	r24, Y+6	; 0x06
    40ec:	9f 81       	ldd	r25, Y+7	; 0x07
    40ee:	89 55       	subi	r24, 0x59	; 89
    40f0:	9f 4f       	sbci	r25, 0xFF	; 255
    40f2:	dc 01       	movw	r26, r24
    40f4:	8d 91       	ld	r24, X+
    40f6:	9c 91       	ld	r25, X
    40f8:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN7Encoder8hasEventEv>
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <_ZN3vfo6updateEh+0x3a>
    4100:	37 c1       	rjmp	.+622    	; 0x4370 <_ZN3vfo6updateEh+0x2a8>
	
		encEvent event = enc->getEvent();
    4102:	8e 81       	ldd	r24, Y+6	; 0x06
    4104:	9f 81       	ldd	r25, Y+7	; 0x07
    4106:	89 55       	subi	r24, 0x59	; 89
    4108:	9f 4f       	sbci	r25, 0xFF	; 255
    410a:	fc 01       	movw	r30, r24
    410c:	80 81       	ld	r24, Z
    410e:	91 81       	ldd	r25, Z+1	; 0x01
    4110:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7Encoder8getEventEv>
    4114:	89 83       	std	Y+1, r24	; 0x01
		uint32_t cnts;

		if (event == ENC_CCW_EVENT) {
    4116:	89 81       	ldd	r24, Y+1	; 0x01
    4118:	82 30       	cpi	r24, 0x02	; 2
    411a:	09 f0       	breq	.+2      	; 0x411e <_ZN3vfo6updateEh+0x56>
    411c:	93 c0       	rjmp	.+294    	; 0x4244 <_ZN3vfo6updateEh+0x17c>
      
			cnts = fstep * (1 + enc->getMissedCcwCount());
    411e:	8e 81       	ldd	r24, Y+6	; 0x06
    4120:	9f 81       	ldd	r25, Y+7	; 0x07
    4122:	8e 55       	subi	r24, 0x5E	; 94
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	dc 01       	movw	r26, r24
    4128:	cd 90       	ld	r12, X+
    412a:	dd 90       	ld	r13, X+
    412c:	ed 90       	ld	r14, X+
    412e:	fc 90       	ld	r15, X
    4130:	8e 81       	ldd	r24, Y+6	; 0x06
    4132:	9f 81       	ldd	r25, Y+7	; 0x07
    4134:	89 55       	subi	r24, 0x59	; 89
    4136:	9f 4f       	sbci	r25, 0xFF	; 255
    4138:	fc 01       	movw	r30, r24
    413a:	80 81       	ld	r24, Z
    413c:	91 81       	ldd	r25, Z+1	; 0x01
    413e:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7Encoder17getMissedCcwCountEv>
    4142:	01 96       	adiw	r24, 0x01	; 1
    4144:	09 2e       	mov	r0, r25
    4146:	00 0c       	add	r0, r0
    4148:	aa 0b       	sbc	r26, r26
    414a:	bb 0b       	sbc	r27, r27
    414c:	a7 01       	movw	r20, r14
    414e:	96 01       	movw	r18, r12
    4150:	bc 01       	movw	r22, r24
    4152:	cd 01       	movw	r24, r26
    4154:	26 d5       	rcall	.+2636   	; 0x4ba2 <__mulsi3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	8a 83       	std	Y+2, r24	; 0x02
    415c:	9b 83       	std	Y+3, r25	; 0x03
    415e:	ac 83       	std	Y+4, r26	; 0x04
    4160:	bd 83       	std	Y+5, r27	; 0x05
			vfoData[band].rxFreq -= cnts;
    4162:	88 85       	ldd	r24, Y+8	; 0x08
    4164:	e8 2f       	mov	r30, r24
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	88 85       	ldd	r24, Y+8	; 0x08
    416a:	88 2f       	mov	r24, r24
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	2e 81       	ldd	r18, Y+6	; 0x06
    4170:	3f 81       	ldd	r19, Y+7	; 0x07
    4172:	88 0f       	add	r24, r24
    4174:	99 1f       	adc	r25, r25
    4176:	ac 01       	movw	r20, r24
    4178:	44 0f       	add	r20, r20
    417a:	55 1f       	adc	r21, r21
    417c:	44 0f       	add	r20, r20
    417e:	55 1f       	adc	r21, r21
    4180:	44 0f       	add	r20, r20
    4182:	55 1f       	adc	r21, r21
    4184:	84 0f       	add	r24, r20
    4186:	95 1f       	adc	r25, r21
    4188:	82 0f       	add	r24, r18
    418a:	93 1f       	adc	r25, r19
    418c:	dc 01       	movw	r26, r24
    418e:	2d 91       	ld	r18, X+
    4190:	3d 91       	ld	r19, X+
    4192:	4d 91       	ld	r20, X+
    4194:	5c 91       	ld	r21, X
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	9b 81       	ldd	r25, Y+3	; 0x03
    419a:	ac 81       	ldd	r26, Y+4	; 0x04
    419c:	bd 81       	ldd	r27, Y+5	; 0x05
    419e:	28 1b       	sub	r18, r24
    41a0:	39 0b       	sbc	r19, r25
    41a2:	4a 0b       	sbc	r20, r26
    41a4:	5b 0b       	sbc	r21, r27
    41a6:	6e 81       	ldd	r22, Y+6	; 0x06
    41a8:	7f 81       	ldd	r23, Y+7	; 0x07
    41aa:	cf 01       	movw	r24, r30
    41ac:	88 0f       	add	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	fc 01       	movw	r30, r24
    41b2:	ee 0f       	add	r30, r30
    41b4:	ff 1f       	adc	r31, r31
    41b6:	ee 0f       	add	r30, r30
    41b8:	ff 1f       	adc	r31, r31
    41ba:	ee 0f       	add	r30, r30
    41bc:	ff 1f       	adc	r31, r31
    41be:	8e 0f       	add	r24, r30
    41c0:	9f 1f       	adc	r25, r31
    41c2:	86 0f       	add	r24, r22
    41c4:	97 1f       	adc	r25, r23
    41c6:	fc 01       	movw	r30, r24
    41c8:	20 83       	st	Z, r18
    41ca:	31 83       	std	Z+1, r19	; 0x01
    41cc:	42 83       	std	Z+2, r20	; 0x02
    41ce:	53 83       	std	Z+3, r21	; 0x03
			vfoData[band].txFreq -= cnts;
    41d0:	88 85       	ldd	r24, Y+8	; 0x08
    41d2:	e8 2f       	mov	r30, r24
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	88 85       	ldd	r24, Y+8	; 0x08
    41d8:	88 2f       	mov	r24, r24
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	2e 81       	ldd	r18, Y+6	; 0x06
    41de:	3f 81       	ldd	r19, Y+7	; 0x07
    41e0:	88 0f       	add	r24, r24
    41e2:	99 1f       	adc	r25, r25
    41e4:	ac 01       	movw	r20, r24
    41e6:	44 0f       	add	r20, r20
    41e8:	55 1f       	adc	r21, r21
    41ea:	44 0f       	add	r20, r20
    41ec:	55 1f       	adc	r21, r21
    41ee:	44 0f       	add	r20, r20
    41f0:	55 1f       	adc	r21, r21
    41f2:	84 0f       	add	r24, r20
    41f4:	95 1f       	adc	r25, r21
    41f6:	82 0f       	add	r24, r18
    41f8:	93 1f       	adc	r25, r19
    41fa:	09 96       	adiw	r24, 0x09	; 9
    41fc:	dc 01       	movw	r26, r24
    41fe:	2d 91       	ld	r18, X+
    4200:	3d 91       	ld	r19, X+
    4202:	4d 91       	ld	r20, X+
    4204:	5c 91       	ld	r21, X
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	9b 81       	ldd	r25, Y+3	; 0x03
    420a:	ac 81       	ldd	r26, Y+4	; 0x04
    420c:	bd 81       	ldd	r27, Y+5	; 0x05
    420e:	28 1b       	sub	r18, r24
    4210:	39 0b       	sbc	r19, r25
    4212:	4a 0b       	sbc	r20, r26
    4214:	5b 0b       	sbc	r21, r27
    4216:	6e 81       	ldd	r22, Y+6	; 0x06
    4218:	7f 81       	ldd	r23, Y+7	; 0x07
    421a:	cf 01       	movw	r24, r30
    421c:	88 0f       	add	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	fc 01       	movw	r30, r24
    4222:	ee 0f       	add	r30, r30
    4224:	ff 1f       	adc	r31, r31
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	ee 0f       	add	r30, r30
    422c:	ff 1f       	adc	r31, r31
    422e:	8e 0f       	add	r24, r30
    4230:	9f 1f       	adc	r25, r31
    4232:	86 0f       	add	r24, r22
    4234:	97 1f       	adc	r25, r23
    4236:	09 96       	adiw	r24, 0x09	; 9
    4238:	fc 01       	movw	r30, r24
    423a:	20 83       	st	Z, r18
    423c:	31 83       	std	Z+1, r19	; 0x01
    423e:	42 83       	std	Z+2, r20	; 0x02
    4240:	53 83       	std	Z+3, r21	; 0x03
    4242:	96 c0       	rjmp	.+300    	; 0x4370 <_ZN3vfo6updateEh+0x2a8>

		} else if (event == ENC_CW_EVENT) {
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	81 30       	cpi	r24, 0x01	; 1
    4248:	09 f0       	breq	.+2      	; 0x424c <_ZN3vfo6updateEh+0x184>
    424a:	92 c0       	rjmp	.+292    	; 0x4370 <_ZN3vfo6updateEh+0x2a8>
			cnts = fstep * (1 + enc->getMissedCwCount());
    424c:	8e 81       	ldd	r24, Y+6	; 0x06
    424e:	9f 81       	ldd	r25, Y+7	; 0x07
    4250:	8e 55       	subi	r24, 0x5E	; 94
    4252:	9f 4f       	sbci	r25, 0xFF	; 255
    4254:	dc 01       	movw	r26, r24
    4256:	cd 90       	ld	r12, X+
    4258:	dd 90       	ld	r13, X+
    425a:	ed 90       	ld	r14, X+
    425c:	fc 90       	ld	r15, X
    425e:	8e 81       	ldd	r24, Y+6	; 0x06
    4260:	9f 81       	ldd	r25, Y+7	; 0x07
    4262:	89 55       	subi	r24, 0x59	; 89
    4264:	9f 4f       	sbci	r25, 0xFF	; 255
    4266:	fc 01       	movw	r30, r24
    4268:	80 81       	ld	r24, Z
    426a:	91 81       	ldd	r25, Z+1	; 0x01
    426c:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN7Encoder16getMissedCwCountEv>
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	09 2e       	mov	r0, r25
    4274:	00 0c       	add	r0, r0
    4276:	aa 0b       	sbc	r26, r26
    4278:	bb 0b       	sbc	r27, r27
    427a:	a7 01       	movw	r20, r14
    427c:	96 01       	movw	r18, r12
    427e:	bc 01       	movw	r22, r24
    4280:	cd 01       	movw	r24, r26
    4282:	8f d4       	rcall	.+2334   	; 0x4ba2 <__mulsi3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	8a 83       	std	Y+2, r24	; 0x02
    428a:	9b 83       	std	Y+3, r25	; 0x03
    428c:	ac 83       	std	Y+4, r26	; 0x04
    428e:	bd 83       	std	Y+5, r27	; 0x05
			vfoData[band].rxFreq += cnts;
    4290:	88 85       	ldd	r24, Y+8	; 0x08
    4292:	e8 2f       	mov	r30, r24
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	88 85       	ldd	r24, Y+8	; 0x08
    4298:	88 2f       	mov	r24, r24
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	2e 81       	ldd	r18, Y+6	; 0x06
    429e:	3f 81       	ldd	r19, Y+7	; 0x07
    42a0:	88 0f       	add	r24, r24
    42a2:	99 1f       	adc	r25, r25
    42a4:	ac 01       	movw	r20, r24
    42a6:	44 0f       	add	r20, r20
    42a8:	55 1f       	adc	r21, r21
    42aa:	44 0f       	add	r20, r20
    42ac:	55 1f       	adc	r21, r21
    42ae:	44 0f       	add	r20, r20
    42b0:	55 1f       	adc	r21, r21
    42b2:	84 0f       	add	r24, r20
    42b4:	95 1f       	adc	r25, r21
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	dc 01       	movw	r26, r24
    42bc:	2d 91       	ld	r18, X+
    42be:	3d 91       	ld	r19, X+
    42c0:	4d 91       	ld	r20, X+
    42c2:	5c 91       	ld	r21, X
    42c4:	8a 81       	ldd	r24, Y+2	; 0x02
    42c6:	9b 81       	ldd	r25, Y+3	; 0x03
    42c8:	ac 81       	ldd	r26, Y+4	; 0x04
    42ca:	bd 81       	ldd	r27, Y+5	; 0x05
    42cc:	28 0f       	add	r18, r24
    42ce:	39 1f       	adc	r19, r25
    42d0:	4a 1f       	adc	r20, r26
    42d2:	5b 1f       	adc	r21, r27
    42d4:	6e 81       	ldd	r22, Y+6	; 0x06
    42d6:	7f 81       	ldd	r23, Y+7	; 0x07
    42d8:	cf 01       	movw	r24, r30
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	fc 01       	movw	r30, r24
    42e0:	ee 0f       	add	r30, r30
    42e2:	ff 1f       	adc	r31, r31
    42e4:	ee 0f       	add	r30, r30
    42e6:	ff 1f       	adc	r31, r31
    42e8:	ee 0f       	add	r30, r30
    42ea:	ff 1f       	adc	r31, r31
    42ec:	8e 0f       	add	r24, r30
    42ee:	9f 1f       	adc	r25, r31
    42f0:	86 0f       	add	r24, r22
    42f2:	97 1f       	adc	r25, r23
    42f4:	fc 01       	movw	r30, r24
    42f6:	20 83       	st	Z, r18
    42f8:	31 83       	std	Z+1, r19	; 0x01
    42fa:	42 83       	std	Z+2, r20	; 0x02
    42fc:	53 83       	std	Z+3, r21	; 0x03
			vfoData[band].txFreq += cnts;
    42fe:	88 85       	ldd	r24, Y+8	; 0x08
    4300:	e8 2f       	mov	r30, r24
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	88 85       	ldd	r24, Y+8	; 0x08
    4306:	88 2f       	mov	r24, r24
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	2e 81       	ldd	r18, Y+6	; 0x06
    430c:	3f 81       	ldd	r19, Y+7	; 0x07
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	ac 01       	movw	r20, r24
    4314:	44 0f       	add	r20, r20
    4316:	55 1f       	adc	r21, r21
    4318:	44 0f       	add	r20, r20
    431a:	55 1f       	adc	r21, r21
    431c:	44 0f       	add	r20, r20
    431e:	55 1f       	adc	r21, r21
    4320:	84 0f       	add	r24, r20
    4322:	95 1f       	adc	r25, r21
    4324:	82 0f       	add	r24, r18
    4326:	93 1f       	adc	r25, r19
    4328:	09 96       	adiw	r24, 0x09	; 9
    432a:	dc 01       	movw	r26, r24
    432c:	2d 91       	ld	r18, X+
    432e:	3d 91       	ld	r19, X+
    4330:	4d 91       	ld	r20, X+
    4332:	5c 91       	ld	r21, X
    4334:	8a 81       	ldd	r24, Y+2	; 0x02
    4336:	9b 81       	ldd	r25, Y+3	; 0x03
    4338:	ac 81       	ldd	r26, Y+4	; 0x04
    433a:	bd 81       	ldd	r27, Y+5	; 0x05
    433c:	28 0f       	add	r18, r24
    433e:	39 1f       	adc	r19, r25
    4340:	4a 1f       	adc	r20, r26
    4342:	5b 1f       	adc	r21, r27
    4344:	6e 81       	ldd	r22, Y+6	; 0x06
    4346:	7f 81       	ldd	r23, Y+7	; 0x07
    4348:	cf 01       	movw	r24, r30
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	fc 01       	movw	r30, r24
    4350:	ee 0f       	add	r30, r30
    4352:	ff 1f       	adc	r31, r31
    4354:	ee 0f       	add	r30, r30
    4356:	ff 1f       	adc	r31, r31
    4358:	ee 0f       	add	r30, r30
    435a:	ff 1f       	adc	r31, r31
    435c:	8e 0f       	add	r24, r30
    435e:	9f 1f       	adc	r25, r31
    4360:	86 0f       	add	r24, r22
    4362:	97 1f       	adc	r25, r23
    4364:	09 96       	adiw	r24, 0x09	; 9
    4366:	fc 01       	movw	r30, r24
    4368:	20 83       	st	Z, r18
    436a:	31 83       	std	Z+1, r19	; 0x01
    436c:	42 83       	std	Z+2, r20	; 0x02
    436e:	53 83       	std	Z+3, r21	; 0x03
		}
	}
}
    4370:	28 96       	adiw	r28, 0x08	; 8
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	df 91       	pop	r29
    437e:	cf 91       	pop	r28
    4380:	ff 90       	pop	r15
    4382:	ef 90       	pop	r14
    4384:	df 90       	pop	r13
    4386:	cf 90       	pop	r12
    4388:	08 95       	ret

0000438a <_ZN3vfo9getRxFreqE5_band>:


float vfo::getRxFreq(band_t band) {
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    4392:	60 97       	sbiw	r28, 0x10	; 16
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	f8 94       	cli
    4398:	de bf       	out	0x3e, r29	; 62
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	cd bf       	out	0x3d, r28	; 61
    439e:	9b 87       	std	Y+11, r25	; 0x0b
    43a0:	8a 87       	std	Y+10, r24	; 0x0a
    43a2:	6c 87       	std	Y+12, r22	; 0x0c

uint32_t vfo_freq;
uint32_t vfo_offset;
uint8_t	vfo_mult;

	vfo_freq = vfoData[band].rxFreq;
    43a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    43a6:	88 2f       	mov	r24, r24
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    43ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    43ae:	88 0f       	add	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	ac 01       	movw	r20, r24
    43b4:	44 0f       	add	r20, r20
    43b6:	55 1f       	adc	r21, r21
    43b8:	44 0f       	add	r20, r20
    43ba:	55 1f       	adc	r21, r21
    43bc:	44 0f       	add	r20, r20
    43be:	55 1f       	adc	r21, r21
    43c0:	84 0f       	add	r24, r20
    43c2:	95 1f       	adc	r25, r21
    43c4:	82 0f       	add	r24, r18
    43c6:	93 1f       	adc	r25, r19
    43c8:	fc 01       	movw	r30, r24
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	a2 81       	ldd	r26, Z+2	; 0x02
    43d0:	b3 81       	ldd	r27, Z+3	; 0x03
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	9a 83       	std	Y+2, r25	; 0x02
    43d6:	ab 83       	std	Y+3, r26	; 0x03
    43d8:	bc 83       	std	Y+4, r27	; 0x04
	vfo_offset = vfoData[band].rxOffset;
    43da:	8c 85       	ldd	r24, Y+12	; 0x0c
    43dc:	88 2f       	mov	r24, r24
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    43e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    43e4:	88 0f       	add	r24, r24
    43e6:	99 1f       	adc	r25, r25
    43e8:	ac 01       	movw	r20, r24
    43ea:	44 0f       	add	r20, r20
    43ec:	55 1f       	adc	r21, r21
    43ee:	44 0f       	add	r20, r20
    43f0:	55 1f       	adc	r21, r21
    43f2:	44 0f       	add	r20, r20
    43f4:	55 1f       	adc	r21, r21
    43f6:	84 0f       	add	r24, r20
    43f8:	95 1f       	adc	r25, r21
    43fa:	82 0f       	add	r24, r18
    43fc:	93 1f       	adc	r25, r19
    43fe:	04 96       	adiw	r24, 0x04	; 4
    4400:	fc 01       	movw	r30, r24
    4402:	80 81       	ld	r24, Z
    4404:	91 81       	ldd	r25, Z+1	; 0x01
    4406:	a2 81       	ldd	r26, Z+2	; 0x02
    4408:	b3 81       	ldd	r27, Z+3	; 0x03
    440a:	8d 83       	std	Y+5, r24	; 0x05
    440c:	9e 83       	std	Y+6, r25	; 0x06
    440e:	af 83       	std	Y+7, r26	; 0x07
    4410:	b8 87       	std	Y+8, r27	; 0x08
	vfo_mult = vfoData[band].rxMult;
    4412:	8c 85       	ldd	r24, Y+12	; 0x0c
    4414:	88 2f       	mov	r24, r24
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	2a 85       	ldd	r18, Y+10	; 0x0a
    441a:	3b 85       	ldd	r19, Y+11	; 0x0b
    441c:	88 0f       	add	r24, r24
    441e:	99 1f       	adc	r25, r25
    4420:	ac 01       	movw	r20, r24
    4422:	44 0f       	add	r20, r20
    4424:	55 1f       	adc	r21, r21
    4426:	44 0f       	add	r20, r20
    4428:	55 1f       	adc	r21, r21
    442a:	44 0f       	add	r20, r20
    442c:	55 1f       	adc	r21, r21
    442e:	84 0f       	add	r24, r20
    4430:	95 1f       	adc	r25, r21
    4432:	82 0f       	add	r24, r18
    4434:	93 1f       	adc	r25, r19
    4436:	08 96       	adiw	r24, 0x08	; 8
    4438:	fc 01       	movw	r30, r24
    443a:	80 81       	ld	r24, Z
    443c:	89 87       	std	Y+9, r24	; 0x09
	vfo_freq += vfo_offset;
    443e:	29 81       	ldd	r18, Y+1	; 0x01
    4440:	3a 81       	ldd	r19, Y+2	; 0x02
    4442:	4b 81       	ldd	r20, Y+3	; 0x03
    4444:	5c 81       	ldd	r21, Y+4	; 0x04
    4446:	8d 81       	ldd	r24, Y+5	; 0x05
    4448:	9e 81       	ldd	r25, Y+6	; 0x06
    444a:	af 81       	ldd	r26, Y+7	; 0x07
    444c:	b8 85       	ldd	r27, Y+8	; 0x08
    444e:	82 0f       	add	r24, r18
    4450:	93 1f       	adc	r25, r19
    4452:	a4 1f       	adc	r26, r20
    4454:	b5 1f       	adc	r27, r21
    4456:	89 83       	std	Y+1, r24	; 0x01
    4458:	9a 83       	std	Y+2, r25	; 0x02
    445a:	ab 83       	std	Y+3, r26	; 0x03
    445c:	bc 83       	std	Y+4, r27	; 0x04
	vfo_freq = vfo_freq / vfo_mult;
    445e:	89 85       	ldd	r24, Y+9	; 0x09
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e0       	ldi	r20, 0x00	; 0
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	89 81       	ldd	r24, Y+1	; 0x01
    446a:	9a 81       	ldd	r25, Y+2	; 0x02
    446c:	ab 81       	ldd	r26, Y+3	; 0x03
    446e:	bc 81       	ldd	r27, Y+4	; 0x04
    4470:	bc 01       	movw	r22, r24
    4472:	cd 01       	movw	r24, r26
    4474:	a5 d3       	rcall	.+1866   	; 0x4bc0 <__udivmodsi4>
    4476:	da 01       	movw	r26, r20
    4478:	c9 01       	movw	r24, r18
    447a:	89 83       	std	Y+1, r24	; 0x01
    447c:	9a 83       	std	Y+2, r25	; 0x02
    447e:	ab 83       	std	Y+3, r26	; 0x03
    4480:	bc 83       	std	Y+4, r27	; 0x04
	return (float)vfo_freq;
    4482:	69 81       	ldd	r22, Y+1	; 0x01
    4484:	7a 81       	ldd	r23, Y+2	; 0x02
    4486:	8b 81       	ldd	r24, Y+3	; 0x03
    4488:	9c 81       	ldd	r25, Y+4	; 0x04
    448a:	01 d4       	rcall	.+2050   	; 0x4c8e <__floatunsisf>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
}
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	60 96       	adiw	r28, 0x10	; 16
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	08 95       	ret

000044a6 <_ZN3vfo9getTxFreqE5_band>:


float vfo::getTxFreq(band_t band) {
    44a6:	cf 93       	push	r28
    44a8:	df 93       	push	r29
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
    44ae:	60 97       	sbiw	r28, 0x10	; 16
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	9b 87       	std	Y+11, r25	; 0x0b
    44bc:	8a 87       	std	Y+10, r24	; 0x0a
    44be:	6c 87       	std	Y+12, r22	; 0x0c

	uint32_t vfo_freq;
	uint32_t vfo_offset;
	uint8_t	vfo_mult;

	vfo_freq = vfoData[band].txFreq;
    44c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    44c2:	88 2f       	mov	r24, r24
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    44c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    44ca:	88 0f       	add	r24, r24
    44cc:	99 1f       	adc	r25, r25
    44ce:	ac 01       	movw	r20, r24
    44d0:	44 0f       	add	r20, r20
    44d2:	55 1f       	adc	r21, r21
    44d4:	44 0f       	add	r20, r20
    44d6:	55 1f       	adc	r21, r21
    44d8:	44 0f       	add	r20, r20
    44da:	55 1f       	adc	r21, r21
    44dc:	84 0f       	add	r24, r20
    44de:	95 1f       	adc	r25, r21
    44e0:	82 0f       	add	r24, r18
    44e2:	93 1f       	adc	r25, r19
    44e4:	09 96       	adiw	r24, 0x09	; 9
    44e6:	fc 01       	movw	r30, r24
    44e8:	80 81       	ld	r24, Z
    44ea:	91 81       	ldd	r25, Z+1	; 0x01
    44ec:	a2 81       	ldd	r26, Z+2	; 0x02
    44ee:	b3 81       	ldd	r27, Z+3	; 0x03
    44f0:	89 83       	std	Y+1, r24	; 0x01
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	ab 83       	std	Y+3, r26	; 0x03
    44f6:	bc 83       	std	Y+4, r27	; 0x04
	vfo_offset = vfoData[band].txOffset;
    44f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    44fa:	88 2f       	mov	r24, r24
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    4500:	3b 85       	ldd	r19, Y+11	; 0x0b
    4502:	88 0f       	add	r24, r24
    4504:	99 1f       	adc	r25, r25
    4506:	ac 01       	movw	r20, r24
    4508:	44 0f       	add	r20, r20
    450a:	55 1f       	adc	r21, r21
    450c:	44 0f       	add	r20, r20
    450e:	55 1f       	adc	r21, r21
    4510:	44 0f       	add	r20, r20
    4512:	55 1f       	adc	r21, r21
    4514:	84 0f       	add	r24, r20
    4516:	95 1f       	adc	r25, r21
    4518:	82 0f       	add	r24, r18
    451a:	93 1f       	adc	r25, r19
    451c:	0d 96       	adiw	r24, 0x0d	; 13
    451e:	fc 01       	movw	r30, r24
    4520:	80 81       	ld	r24, Z
    4522:	91 81       	ldd	r25, Z+1	; 0x01
    4524:	a2 81       	ldd	r26, Z+2	; 0x02
    4526:	b3 81       	ldd	r27, Z+3	; 0x03
    4528:	8d 83       	std	Y+5, r24	; 0x05
    452a:	9e 83       	std	Y+6, r25	; 0x06
    452c:	af 83       	std	Y+7, r26	; 0x07
    452e:	b8 87       	std	Y+8, r27	; 0x08
	vfo_mult = vfoData[band].txMult;
    4530:	8c 85       	ldd	r24, Y+12	; 0x0c
    4532:	88 2f       	mov	r24, r24
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	2a 85       	ldd	r18, Y+10	; 0x0a
    4538:	3b 85       	ldd	r19, Y+11	; 0x0b
    453a:	88 0f       	add	r24, r24
    453c:	99 1f       	adc	r25, r25
    453e:	ac 01       	movw	r20, r24
    4540:	44 0f       	add	r20, r20
    4542:	55 1f       	adc	r21, r21
    4544:	44 0f       	add	r20, r20
    4546:	55 1f       	adc	r21, r21
    4548:	44 0f       	add	r20, r20
    454a:	55 1f       	adc	r21, r21
    454c:	84 0f       	add	r24, r20
    454e:	95 1f       	adc	r25, r21
    4550:	82 0f       	add	r24, r18
    4552:	93 1f       	adc	r25, r19
    4554:	41 96       	adiw	r24, 0x11	; 17
    4556:	fc 01       	movw	r30, r24
    4558:	80 81       	ld	r24, Z
    455a:	89 87       	std	Y+9, r24	; 0x09
	vfo_freq += vfo_offset;
    455c:	29 81       	ldd	r18, Y+1	; 0x01
    455e:	3a 81       	ldd	r19, Y+2	; 0x02
    4560:	4b 81       	ldd	r20, Y+3	; 0x03
    4562:	5c 81       	ldd	r21, Y+4	; 0x04
    4564:	8d 81       	ldd	r24, Y+5	; 0x05
    4566:	9e 81       	ldd	r25, Y+6	; 0x06
    4568:	af 81       	ldd	r26, Y+7	; 0x07
    456a:	b8 85       	ldd	r27, Y+8	; 0x08
    456c:	82 0f       	add	r24, r18
    456e:	93 1f       	adc	r25, r19
    4570:	a4 1f       	adc	r26, r20
    4572:	b5 1f       	adc	r27, r21
    4574:	89 83       	std	Y+1, r24	; 0x01
    4576:	9a 83       	std	Y+2, r25	; 0x02
    4578:	ab 83       	std	Y+3, r26	; 0x03
    457a:	bc 83       	std	Y+4, r27	; 0x04
	vfo_freq = vfo_freq / vfo_mult;
    457c:	89 85       	ldd	r24, Y+9	; 0x09
    457e:	28 2f       	mov	r18, r24
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e0       	ldi	r20, 0x00	; 0
    4584:	50 e0       	ldi	r21, 0x00	; 0
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	9a 81       	ldd	r25, Y+2	; 0x02
    458a:	ab 81       	ldd	r26, Y+3	; 0x03
    458c:	bc 81       	ldd	r27, Y+4	; 0x04
    458e:	bc 01       	movw	r22, r24
    4590:	cd 01       	movw	r24, r26
    4592:	16 d3       	rcall	.+1580   	; 0x4bc0 <__udivmodsi4>
    4594:	da 01       	movw	r26, r20
    4596:	c9 01       	movw	r24, r18
    4598:	89 83       	std	Y+1, r24	; 0x01
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	ab 83       	std	Y+3, r26	; 0x03
    459e:	bc 83       	std	Y+4, r27	; 0x04
	return (float)vfo_freq;
    45a0:	69 81       	ldd	r22, Y+1	; 0x01
    45a2:	7a 81       	ldd	r23, Y+2	; 0x02
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	9c 81       	ldd	r25, Y+4	; 0x04
    45a8:	72 d3       	rcall	.+1764   	; 0x4c8e <__floatunsisf>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
}
    45ae:	bc 01       	movw	r22, r24
    45b0:	cd 01       	movw	r24, r26
    45b2:	60 96       	adiw	r28, 0x10	; 16
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	08 95       	ret

000045c4 <_ZN3vfo7setStepE6step_t>:


void vfo::setStep(step_t step) {
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	00 d0       	rcall	.+0      	; 0x45ca <_ZN3vfo7setStepE6step_t+0x6>
    45ca:	1f 92       	push	r1
    45cc:	cd b7       	in	r28, 0x3d	; 61
    45ce:	de b7       	in	r29, 0x3e	; 62
    45d0:	9a 83       	std	Y+2, r25	; 0x02
    45d2:	89 83       	std	Y+1, r24	; 0x01
    45d4:	6b 83       	std	Y+3, r22	; 0x03
	this->step = step;
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	9a 81       	ldd	r25, Y+2	; 0x02
    45da:	8a 55       	subi	r24, 0x5A	; 90
    45dc:	9f 4f       	sbci	r25, 0xFF	; 255
    45de:	2b 81       	ldd	r18, Y+3	; 0x03
    45e0:	fc 01       	movw	r30, r24
    45e2:	20 83       	st	Z, r18
	fstep = step_values[step];
    45e4:	8b 81       	ldd	r24, Y+3	; 0x03
    45e6:	88 2f       	mov	r24, r24
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	88 0f       	add	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	88 0f       	add	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	86 50       	subi	r24, 0x06	; 6
    45f4:	9d 4f       	sbci	r25, 0xFD	; 253
    45f6:	fc 01       	movw	r30, r24
    45f8:	80 81       	ld	r24, Z
    45fa:	91 81       	ldd	r25, Z+1	; 0x01
    45fc:	a2 81       	ldd	r26, Z+2	; 0x02
    45fe:	b3 81       	ldd	r27, Z+3	; 0x03
    4600:	29 81       	ldd	r18, Y+1	; 0x01
    4602:	3a 81       	ldd	r19, Y+2	; 0x02
    4604:	2e 55       	subi	r18, 0x5E	; 94
    4606:	3f 4f       	sbci	r19, 0xFF	; 255
    4608:	f9 01       	movw	r30, r18
    460a:	80 83       	st	Z, r24
    460c:	91 83       	std	Z+1, r25	; 0x01
    460e:	a2 83       	std	Z+2, r26	; 0x02
    4610:	b3 83       	std	Z+3, r27	; 0x03
}
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	df 91       	pop	r29
    461a:	cf 91       	pop	r28
    461c:	08 95       	ret

0000461e <_ZN3vfo13intToString32EmPc>:
	return step;
}



void vfo::intToString32(uint32_t c, char *buf) {
    461e:	ef 92       	push	r14
    4620:	ff 92       	push	r15
    4622:	0f 93       	push	r16
    4624:	1f 93       	push	r17
    4626:	cf 93       	push	r28
    4628:	df 93       	push	r29
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    462e:	ac 97       	sbiw	r28, 0x2c	; 44
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	9e 83       	std	Y+6, r25	; 0x06
    463c:	8d 83       	std	Y+5, r24	; 0x05
    463e:	4f 83       	std	Y+7, r20	; 0x07
    4640:	58 87       	std	Y+8, r21	; 0x08
    4642:	69 87       	std	Y+9, r22	; 0x09
    4644:	7a 87       	std	Y+10, r23	; 0x0a
    4646:	3c 87       	std	Y+12, r19	; 0x0c
    4648:	2b 87       	std	Y+11, r18	; 0x0b

	uint32_t digit;

	digit = c / 100000000;
    464a:	8f 81       	ldd	r24, Y+7	; 0x07
    464c:	98 85       	ldd	r25, Y+8	; 0x08
    464e:	a9 85       	ldd	r26, Y+9	; 0x09
    4650:	ba 85       	ldd	r27, Y+10	; 0x0a
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	31 ee       	ldi	r19, 0xE1	; 225
    4656:	45 ef       	ldi	r20, 0xF5	; 245
    4658:	55 e0       	ldi	r21, 0x05	; 5
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	b0 d2       	rcall	.+1376   	; 0x4bc0 <__udivmodsi4>
    4660:	da 01       	movw	r26, r20
    4662:	c9 01       	movw	r24, r18
    4664:	89 83       	std	Y+1, r24	; 0x01
    4666:	9a 83       	std	Y+2, r25	; 0x02
    4668:	ab 83       	std	Y+3, r26	; 0x03
    466a:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    466c:	8b 85       	ldd	r24, Y+11	; 0x0b
    466e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4670:	9c 01       	movw	r18, r24
    4672:	2f 5f       	subi	r18, 0xFF	; 255
    4674:	3f 4f       	sbci	r19, 0xFF	; 255
    4676:	3c 87       	std	Y+12, r19	; 0x0c
    4678:	2b 87       	std	Y+11, r18	; 0x0b
    467a:	29 81       	ldd	r18, Y+1	; 0x01
    467c:	20 5d       	subi	r18, 0xD0	; 208
    467e:	fc 01       	movw	r30, r24
    4680:	20 83       	st	Z, r18
	c = c - (digit*100000000);
    4682:	89 81       	ldd	r24, Y+1	; 0x01
    4684:	9a 81       	ldd	r25, Y+2	; 0x02
    4686:	ab 81       	ldd	r26, Y+3	; 0x03
    4688:	bc 81       	ldd	r27, Y+4	; 0x04
    468a:	9c 01       	movw	r18, r24
    468c:	ad 01       	movw	r20, r26
    468e:	60 e0       	ldi	r22, 0x00	; 0
    4690:	71 ee       	ldi	r23, 0xE1	; 225
    4692:	85 ef       	ldi	r24, 0xF5	; 245
    4694:	95 e0       	ldi	r25, 0x05	; 5
    4696:	85 d2       	rcall	.+1290   	; 0x4ba2 <__mulsi3>
    4698:	9b 01       	movw	r18, r22
    469a:	ac 01       	movw	r20, r24
    469c:	8f 81       	ldd	r24, Y+7	; 0x07
    469e:	98 85       	ldd	r25, Y+8	; 0x08
    46a0:	a9 85       	ldd	r26, Y+9	; 0x09
    46a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    46a4:	82 1b       	sub	r24, r18
    46a6:	93 0b       	sbc	r25, r19
    46a8:	a4 0b       	sbc	r26, r20
    46aa:	b5 0b       	sbc	r27, r21
    46ac:	8f 83       	std	Y+7, r24	; 0x07
    46ae:	98 87       	std	Y+8, r25	; 0x08
    46b0:	a9 87       	std	Y+9, r26	; 0x09
    46b2:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10000000;
    46b4:	8f 81       	ldd	r24, Y+7	; 0x07
    46b6:	98 85       	ldd	r25, Y+8	; 0x08
    46b8:	a9 85       	ldd	r26, Y+9	; 0x09
    46ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    46bc:	20 e8       	ldi	r18, 0x80	; 128
    46be:	36 e9       	ldi	r19, 0x96	; 150
    46c0:	48 e9       	ldi	r20, 0x98	; 152
    46c2:	50 e0       	ldi	r21, 0x00	; 0
    46c4:	bc 01       	movw	r22, r24
    46c6:	cd 01       	movw	r24, r26
    46c8:	7b d2       	rcall	.+1270   	; 0x4bc0 <__udivmodsi4>
    46ca:	da 01       	movw	r26, r20
    46cc:	c9 01       	movw	r24, r18
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	9a 83       	std	Y+2, r25	; 0x02
    46d2:	ab 83       	std	Y+3, r26	; 0x03
    46d4:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    46d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    46d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    46da:	9c 01       	movw	r18, r24
    46dc:	2f 5f       	subi	r18, 0xFF	; 255
    46de:	3f 4f       	sbci	r19, 0xFF	; 255
    46e0:	3c 87       	std	Y+12, r19	; 0x0c
    46e2:	2b 87       	std	Y+11, r18	; 0x0b
    46e4:	29 81       	ldd	r18, Y+1	; 0x01
    46e6:	20 5d       	subi	r18, 0xD0	; 208
    46e8:	fc 01       	movw	r30, r24
    46ea:	20 83       	st	Z, r18
	c = c - (digit*10000000);
    46ec:	89 81       	ldd	r24, Y+1	; 0x01
    46ee:	9a 81       	ldd	r25, Y+2	; 0x02
    46f0:	ab 81       	ldd	r26, Y+3	; 0x03
    46f2:	bc 81       	ldd	r27, Y+4	; 0x04
    46f4:	9c 01       	movw	r18, r24
    46f6:	ad 01       	movw	r20, r26
    46f8:	60 e8       	ldi	r22, 0x80	; 128
    46fa:	76 e9       	ldi	r23, 0x96	; 150
    46fc:	88 e9       	ldi	r24, 0x98	; 152
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	50 d2       	rcall	.+1184   	; 0x4ba2 <__mulsi3>
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	8f 81       	ldd	r24, Y+7	; 0x07
    4708:	98 85       	ldd	r25, Y+8	; 0x08
    470a:	a9 85       	ldd	r26, Y+9	; 0x09
    470c:	ba 85       	ldd	r27, Y+10	; 0x0a
    470e:	82 1b       	sub	r24, r18
    4710:	93 0b       	sbc	r25, r19
    4712:	a4 0b       	sbc	r26, r20
    4714:	b5 0b       	sbc	r27, r21
    4716:	8f 83       	std	Y+7, r24	; 0x07
    4718:	98 87       	std	Y+8, r25	; 0x08
    471a:	a9 87       	std	Y+9, r26	; 0x09
    471c:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 1000000;
    471e:	8f 81       	ldd	r24, Y+7	; 0x07
    4720:	98 85       	ldd	r25, Y+8	; 0x08
    4722:	a9 85       	ldd	r26, Y+9	; 0x09
    4724:	ba 85       	ldd	r27, Y+10	; 0x0a
    4726:	20 e4       	ldi	r18, 0x40	; 64
    4728:	32 e4       	ldi	r19, 0x42	; 66
    472a:	4f e0       	ldi	r20, 0x0F	; 15
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	46 d2       	rcall	.+1164   	; 0x4bc0 <__udivmodsi4>
    4734:	da 01       	movw	r26, r20
    4736:	c9 01       	movw	r24, r18
    4738:	89 83       	std	Y+1, r24	; 0x01
    473a:	9a 83       	std	Y+2, r25	; 0x02
    473c:	ab 83       	std	Y+3, r26	; 0x03
    473e:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4740:	8b 85       	ldd	r24, Y+11	; 0x0b
    4742:	9c 85       	ldd	r25, Y+12	; 0x0c
    4744:	9c 01       	movw	r18, r24
    4746:	2f 5f       	subi	r18, 0xFF	; 255
    4748:	3f 4f       	sbci	r19, 0xFF	; 255
    474a:	3c 87       	std	Y+12, r19	; 0x0c
    474c:	2b 87       	std	Y+11, r18	; 0x0b
    474e:	29 81       	ldd	r18, Y+1	; 0x01
    4750:	20 5d       	subi	r18, 0xD0	; 208
    4752:	fc 01       	movw	r30, r24
    4754:	20 83       	st	Z, r18
	c = c - (digit*1000000);
    4756:	89 81       	ldd	r24, Y+1	; 0x01
    4758:	9a 81       	ldd	r25, Y+2	; 0x02
    475a:	ab 81       	ldd	r26, Y+3	; 0x03
    475c:	bc 81       	ldd	r27, Y+4	; 0x04
    475e:	9c 01       	movw	r18, r24
    4760:	ad 01       	movw	r20, r26
    4762:	60 e4       	ldi	r22, 0x40	; 64
    4764:	72 e4       	ldi	r23, 0x42	; 66
    4766:	8f e0       	ldi	r24, 0x0F	; 15
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	1b d2       	rcall	.+1078   	; 0x4ba2 <__mulsi3>
    476c:	9b 01       	movw	r18, r22
    476e:	ac 01       	movw	r20, r24
    4770:	8f 81       	ldd	r24, Y+7	; 0x07
    4772:	98 85       	ldd	r25, Y+8	; 0x08
    4774:	a9 85       	ldd	r26, Y+9	; 0x09
    4776:	ba 85       	ldd	r27, Y+10	; 0x0a
    4778:	82 1b       	sub	r24, r18
    477a:	93 0b       	sbc	r25, r19
    477c:	a4 0b       	sbc	r26, r20
    477e:	b5 0b       	sbc	r27, r21
    4780:	8f 83       	std	Y+7, r24	; 0x07
    4782:	98 87       	std	Y+8, r25	; 0x08
    4784:	a9 87       	std	Y+9, r26	; 0x09
    4786:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 100000;
    4788:	8f 81       	ldd	r24, Y+7	; 0x07
    478a:	98 85       	ldd	r25, Y+8	; 0x08
    478c:	a9 85       	ldd	r26, Y+9	; 0x09
    478e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4790:	20 ea       	ldi	r18, 0xA0	; 160
    4792:	36 e8       	ldi	r19, 0x86	; 134
    4794:	41 e0       	ldi	r20, 0x01	; 1
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	bc 01       	movw	r22, r24
    479a:	cd 01       	movw	r24, r26
    479c:	11 d2       	rcall	.+1058   	; 0x4bc0 <__udivmodsi4>
    479e:	da 01       	movw	r26, r20
    47a0:	c9 01       	movw	r24, r18
    47a2:	89 83       	std	Y+1, r24	; 0x01
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	ab 83       	std	Y+3, r26	; 0x03
    47a8:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    47aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    47ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    47ae:	9c 01       	movw	r18, r24
    47b0:	2f 5f       	subi	r18, 0xFF	; 255
    47b2:	3f 4f       	sbci	r19, 0xFF	; 255
    47b4:	3c 87       	std	Y+12, r19	; 0x0c
    47b6:	2b 87       	std	Y+11, r18	; 0x0b
    47b8:	29 81       	ldd	r18, Y+1	; 0x01
    47ba:	20 5d       	subi	r18, 0xD0	; 208
    47bc:	fc 01       	movw	r30, r24
    47be:	20 83       	st	Z, r18
	c = c - (digit*100000);
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	9a 81       	ldd	r25, Y+2	; 0x02
    47c4:	ab 81       	ldd	r26, Y+3	; 0x03
    47c6:	bc 81       	ldd	r27, Y+4	; 0x04
    47c8:	9c 01       	movw	r18, r24
    47ca:	ad 01       	movw	r20, r26
    47cc:	60 ea       	ldi	r22, 0xA0	; 160
    47ce:	76 e8       	ldi	r23, 0x86	; 134
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	e6 d1       	rcall	.+972    	; 0x4ba2 <__mulsi3>
    47d6:	9b 01       	movw	r18, r22
    47d8:	ac 01       	movw	r20, r24
    47da:	8f 81       	ldd	r24, Y+7	; 0x07
    47dc:	98 85       	ldd	r25, Y+8	; 0x08
    47de:	a9 85       	ldd	r26, Y+9	; 0x09
    47e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    47e2:	82 1b       	sub	r24, r18
    47e4:	93 0b       	sbc	r25, r19
    47e6:	a4 0b       	sbc	r26, r20
    47e8:	b5 0b       	sbc	r27, r21
    47ea:	8f 83       	std	Y+7, r24	; 0x07
    47ec:	98 87       	std	Y+8, r25	; 0x08
    47ee:	a9 87       	std	Y+9, r26	; 0x09
    47f0:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10000;
    47f2:	8f 81       	ldd	r24, Y+7	; 0x07
    47f4:	98 85       	ldd	r25, Y+8	; 0x08
    47f6:	a9 85       	ldd	r26, Y+9	; 0x09
    47f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    47fa:	20 e1       	ldi	r18, 0x10	; 16
    47fc:	37 e2       	ldi	r19, 0x27	; 39
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	bc 01       	movw	r22, r24
    4804:	cd 01       	movw	r24, r26
    4806:	dc d1       	rcall	.+952    	; 0x4bc0 <__udivmodsi4>
    4808:	da 01       	movw	r26, r20
    480a:	c9 01       	movw	r24, r18
    480c:	89 83       	std	Y+1, r24	; 0x01
    480e:	9a 83       	std	Y+2, r25	; 0x02
    4810:	ab 83       	std	Y+3, r26	; 0x03
    4812:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4814:	8b 85       	ldd	r24, Y+11	; 0x0b
    4816:	9c 85       	ldd	r25, Y+12	; 0x0c
    4818:	9c 01       	movw	r18, r24
    481a:	2f 5f       	subi	r18, 0xFF	; 255
    481c:	3f 4f       	sbci	r19, 0xFF	; 255
    481e:	3c 87       	std	Y+12, r19	; 0x0c
    4820:	2b 87       	std	Y+11, r18	; 0x0b
    4822:	29 81       	ldd	r18, Y+1	; 0x01
    4824:	20 5d       	subi	r18, 0xD0	; 208
    4826:	fc 01       	movw	r30, r24
    4828:	20 83       	st	Z, r18
	c = c - (digit*10000);
    482a:	29 81       	ldd	r18, Y+1	; 0x01
    482c:	3a 81       	ldd	r19, Y+2	; 0x02
    482e:	4b 81       	ldd	r20, Y+3	; 0x03
    4830:	5c 81       	ldd	r21, Y+4	; 0x04
    4832:	80 e1       	ldi	r24, 0x10	; 16
    4834:	97 e2       	ldi	r25, 0x27	; 39
    4836:	dc 01       	movw	r26, r24
    4838:	e5 d1       	rcall	.+970    	; 0x4c04 <__muluhisi3>
    483a:	9b 01       	movw	r18, r22
    483c:	ac 01       	movw	r20, r24
    483e:	8f 81       	ldd	r24, Y+7	; 0x07
    4840:	98 85       	ldd	r25, Y+8	; 0x08
    4842:	a9 85       	ldd	r26, Y+9	; 0x09
    4844:	ba 85       	ldd	r27, Y+10	; 0x0a
    4846:	82 1b       	sub	r24, r18
    4848:	93 0b       	sbc	r25, r19
    484a:	a4 0b       	sbc	r26, r20
    484c:	b5 0b       	sbc	r27, r21
    484e:	8f 83       	std	Y+7, r24	; 0x07
    4850:	98 87       	std	Y+8, r25	; 0x08
    4852:	a9 87       	std	Y+9, r26	; 0x09
    4854:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 1000;
    4856:	8f 81       	ldd	r24, Y+7	; 0x07
    4858:	98 85       	ldd	r25, Y+8	; 0x08
    485a:	a9 85       	ldd	r26, Y+9	; 0x09
    485c:	ba 85       	ldd	r27, Y+10	; 0x0a
    485e:	28 ee       	ldi	r18, 0xE8	; 232
    4860:	33 e0       	ldi	r19, 0x03	; 3
    4862:	40 e0       	ldi	r20, 0x00	; 0
    4864:	50 e0       	ldi	r21, 0x00	; 0
    4866:	bc 01       	movw	r22, r24
    4868:	cd 01       	movw	r24, r26
    486a:	aa d1       	rcall	.+852    	; 0x4bc0 <__udivmodsi4>
    486c:	da 01       	movw	r26, r20
    486e:	c9 01       	movw	r24, r18
    4870:	89 83       	std	Y+1, r24	; 0x01
    4872:	9a 83       	std	Y+2, r25	; 0x02
    4874:	ab 83       	std	Y+3, r26	; 0x03
    4876:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4878:	8b 85       	ldd	r24, Y+11	; 0x0b
    487a:	9c 85       	ldd	r25, Y+12	; 0x0c
    487c:	9c 01       	movw	r18, r24
    487e:	2f 5f       	subi	r18, 0xFF	; 255
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
    4882:	3c 87       	std	Y+12, r19	; 0x0c
    4884:	2b 87       	std	Y+11, r18	; 0x0b
    4886:	29 81       	ldd	r18, Y+1	; 0x01
    4888:	20 5d       	subi	r18, 0xD0	; 208
    488a:	fc 01       	movw	r30, r24
    488c:	20 83       	st	Z, r18
	c = c - (digit*1000);
    488e:	29 81       	ldd	r18, Y+1	; 0x01
    4890:	3a 81       	ldd	r19, Y+2	; 0x02
    4892:	4b 81       	ldd	r20, Y+3	; 0x03
    4894:	5c 81       	ldd	r21, Y+4	; 0x04
    4896:	88 ee       	ldi	r24, 0xE8	; 232
    4898:	93 e0       	ldi	r25, 0x03	; 3
    489a:	dc 01       	movw	r26, r24
    489c:	b3 d1       	rcall	.+870    	; 0x4c04 <__muluhisi3>
    489e:	9b 01       	movw	r18, r22
    48a0:	ac 01       	movw	r20, r24
    48a2:	8f 81       	ldd	r24, Y+7	; 0x07
    48a4:	98 85       	ldd	r25, Y+8	; 0x08
    48a6:	a9 85       	ldd	r26, Y+9	; 0x09
    48a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    48aa:	82 1b       	sub	r24, r18
    48ac:	93 0b       	sbc	r25, r19
    48ae:	a4 0b       	sbc	r26, r20
    48b0:	b5 0b       	sbc	r27, r21
    48b2:	8f 83       	std	Y+7, r24	; 0x07
    48b4:	98 87       	std	Y+8, r25	; 0x08
    48b6:	a9 87       	std	Y+9, r26	; 0x09
    48b8:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 100;
    48ba:	8f 81       	ldd	r24, Y+7	; 0x07
    48bc:	98 85       	ldd	r25, Y+8	; 0x08
    48be:	a9 85       	ldd	r26, Y+9	; 0x09
    48c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    48c2:	24 e6       	ldi	r18, 0x64	; 100
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e0       	ldi	r20, 0x00	; 0
    48c8:	50 e0       	ldi	r21, 0x00	; 0
    48ca:	bc 01       	movw	r22, r24
    48cc:	cd 01       	movw	r24, r26
    48ce:	78 d1       	rcall	.+752    	; 0x4bc0 <__udivmodsi4>
    48d0:	da 01       	movw	r26, r20
    48d2:	c9 01       	movw	r24, r18
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	9a 83       	std	Y+2, r25	; 0x02
    48d8:	ab 83       	std	Y+3, r26	; 0x03
    48da:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    48dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    48de:	9c 85       	ldd	r25, Y+12	; 0x0c
    48e0:	9c 01       	movw	r18, r24
    48e2:	2f 5f       	subi	r18, 0xFF	; 255
    48e4:	3f 4f       	sbci	r19, 0xFF	; 255
    48e6:	3c 87       	std	Y+12, r19	; 0x0c
    48e8:	2b 87       	std	Y+11, r18	; 0x0b
    48ea:	29 81       	ldd	r18, Y+1	; 0x01
    48ec:	20 5d       	subi	r18, 0xD0	; 208
    48ee:	fc 01       	movw	r30, r24
    48f0:	20 83       	st	Z, r18
	c = c - (digit*100);
    48f2:	29 81       	ldd	r18, Y+1	; 0x01
    48f4:	3a 81       	ldd	r19, Y+2	; 0x02
    48f6:	4b 81       	ldd	r20, Y+3	; 0x03
    48f8:	5c 81       	ldd	r21, Y+4	; 0x04
    48fa:	84 e6       	ldi	r24, 0x64	; 100
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	dc 01       	movw	r26, r24
    4900:	81 d1       	rcall	.+770    	; 0x4c04 <__muluhisi3>
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	8f 81       	ldd	r24, Y+7	; 0x07
    4908:	98 85       	ldd	r25, Y+8	; 0x08
    490a:	a9 85       	ldd	r26, Y+9	; 0x09
    490c:	ba 85       	ldd	r27, Y+10	; 0x0a
    490e:	82 1b       	sub	r24, r18
    4910:	93 0b       	sbc	r25, r19
    4912:	a4 0b       	sbc	r26, r20
    4914:	b5 0b       	sbc	r27, r21
    4916:	8f 83       	std	Y+7, r24	; 0x07
    4918:	98 87       	std	Y+8, r25	; 0x08
    491a:	a9 87       	std	Y+9, r26	; 0x09
    491c:	ba 87       	std	Y+10, r27	; 0x0a

	digit = c / 10;
    491e:	8f 81       	ldd	r24, Y+7	; 0x07
    4920:	98 85       	ldd	r25, Y+8	; 0x08
    4922:	a9 85       	ldd	r26, Y+9	; 0x09
    4924:	ba 85       	ldd	r27, Y+10	; 0x0a
    4926:	2a e0       	ldi	r18, 0x0A	; 10
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e0       	ldi	r20, 0x00	; 0
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	46 d1       	rcall	.+652    	; 0x4bc0 <__udivmodsi4>
    4934:	da 01       	movw	r26, r20
    4936:	c9 01       	movw	r24, r18
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	9a 83       	std	Y+2, r25	; 0x02
    493c:	ab 83       	std	Y+3, r26	; 0x03
    493e:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    4940:	8b 85       	ldd	r24, Y+11	; 0x0b
    4942:	9c 85       	ldd	r25, Y+12	; 0x0c
    4944:	9c 01       	movw	r18, r24
    4946:	2f 5f       	subi	r18, 0xFF	; 255
    4948:	3f 4f       	sbci	r19, 0xFF	; 255
    494a:	3c 87       	std	Y+12, r19	; 0x0c
    494c:	2b 87       	std	Y+11, r18	; 0x0b
    494e:	29 81       	ldd	r18, Y+1	; 0x01
    4950:	20 5d       	subi	r18, 0xD0	; 208
    4952:	fc 01       	movw	r30, r24
    4954:	20 83       	st	Z, r18
	digit = c - (digit*10);
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	9a 81       	ldd	r25, Y+2	; 0x02
    495a:	ab 81       	ldd	r26, Y+3	; 0x03
    495c:	bc 81       	ldd	r27, Y+4	; 0x04
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	aa 1f       	adc	r26, r26
    4964:	bb 1f       	adc	r27, r27
    4966:	9c 01       	movw	r18, r24
    4968:	ad 01       	movw	r20, r26
    496a:	22 0f       	add	r18, r18
    496c:	33 1f       	adc	r19, r19
    496e:	44 1f       	adc	r20, r20
    4970:	55 1f       	adc	r21, r21
    4972:	22 0f       	add	r18, r18
    4974:	33 1f       	adc	r19, r19
    4976:	44 1f       	adc	r20, r20
    4978:	55 1f       	adc	r21, r21
    497a:	82 0f       	add	r24, r18
    497c:	93 1f       	adc	r25, r19
    497e:	a4 1f       	adc	r26, r20
    4980:	b5 1f       	adc	r27, r21
    4982:	2f 81       	ldd	r18, Y+7	; 0x07
    4984:	38 85       	ldd	r19, Y+8	; 0x08
    4986:	49 85       	ldd	r20, Y+9	; 0x09
    4988:	5a 85       	ldd	r21, Y+10	; 0x0a
    498a:	79 01       	movw	r14, r18
    498c:	8a 01       	movw	r16, r20
    498e:	e8 1a       	sub	r14, r24
    4990:	f9 0a       	sbc	r15, r25
    4992:	0a 0b       	sbc	r16, r26
    4994:	1b 0b       	sbc	r17, r27
    4996:	d8 01       	movw	r26, r16
    4998:	c7 01       	movw	r24, r14
    499a:	89 83       	std	Y+1, r24	; 0x01
    499c:	9a 83       	std	Y+2, r25	; 0x02
    499e:	ab 83       	std	Y+3, r26	; 0x03
    49a0:	bc 83       	std	Y+4, r27	; 0x04
	*buf++ = digit + 0x30;
    49a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    49a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    49a6:	9c 01       	movw	r18, r24
    49a8:	2f 5f       	subi	r18, 0xFF	; 255
    49aa:	3f 4f       	sbci	r19, 0xFF	; 255
    49ac:	3c 87       	std	Y+12, r19	; 0x0c
    49ae:	2b 87       	std	Y+11, r18	; 0x0b
    49b0:	29 81       	ldd	r18, Y+1	; 0x01
    49b2:	20 5d       	subi	r18, 0xD0	; 208
    49b4:	fc 01       	movw	r30, r24
    49b6:	20 83       	st	Z, r18
	*buf = '\0';
    49b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    49ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    49bc:	fc 01       	movw	r30, r24
    49be:	10 82       	st	Z, r1
}
    49c0:	ac 96       	adiw	r28, 0x2c	; 44
    49c2:	0f b6       	in	r0, 0x3f	; 63
    49c4:	f8 94       	cli
    49c6:	de bf       	out	0x3e, r29	; 62
    49c8:	0f be       	out	0x3f, r0	; 63
    49ca:	cd bf       	out	0x3d, r28	; 61
    49cc:	df 91       	pop	r29
    49ce:	cf 91       	pop	r28
    49d0:	1f 91       	pop	r17
    49d2:	0f 91       	pop	r16
    49d4:	ff 90       	pop	r15
    49d6:	ef 90       	pop	r14
    49d8:	08 95       	ret

000049da <_ZN3vfo17formatDisplayFreqEPcS0_>:
	intToString32(freq,tbuf);
	formatDisplayFreq(tbuf,buf);
}


void vfo::formatDisplayFreq(char *ibuf, char *obuf) {
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
    49e2:	2c 97       	sbiw	r28, 0x0c	; 12
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	98 87       	std	Y+8, r25	; 0x08
    49f0:	8f 83       	std	Y+7, r24	; 0x07
    49f2:	7a 87       	std	Y+10, r23	; 0x0a
    49f4:	69 87       	std	Y+9, r22	; 0x09
    49f6:	5c 87       	std	Y+12, r21	; 0x0c
    49f8:	4b 87       	std	Y+11, r20	; 0x0b

	char *dstptr = obuf;
    49fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    49fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    49fe:	9a 83       	std	Y+2, r25	; 0x02
    4a00:	89 83       	std	Y+1, r24	; 0x01
	int found = 0;
    4a02:	1c 82       	std	Y+4, r1	; 0x04
    4a04:	1b 82       	std	Y+3, r1	; 0x03

	//
	// strip leading zeros and insert decimal point
	//
	for (int i=0; i< 9; i++) {
    4a06:	1e 82       	std	Y+6, r1	; 0x06
    4a08:	1d 82       	std	Y+5, r1	; 0x05
    4a0a:	55 c0       	rjmp	.+170    	; 0x4ab6 <_ZN3vfo17formatDisplayFreqEPcS0_+0xdc>
		
		if (found) {
    4a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a10:	89 2b       	or	r24, r25
    4a12:	61 f1       	breq	.+88     	; 0x4a6c <_ZN3vfo17formatDisplayFreqEPcS0_+0x92>
			if ( (i == 3) | (i == 6)) {
    4a14:	31 e0       	ldi	r19, 0x01	; 1
    4a16:	8d 81       	ldd	r24, Y+5	; 0x05
    4a18:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1a:	03 97       	sbiw	r24, 0x03	; 3
    4a1c:	09 f0       	breq	.+2      	; 0x4a20 <_ZN3vfo17formatDisplayFreqEPcS0_+0x46>
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	21 e0       	ldi	r18, 0x01	; 1
    4a22:	8d 81       	ldd	r24, Y+5	; 0x05
    4a24:	9e 81       	ldd	r25, Y+6	; 0x06
    4a26:	06 97       	sbiw	r24, 0x06	; 6
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <_ZN3vfo17formatDisplayFreqEPcS0_+0x52>
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	83 2f       	mov	r24, r19
    4a2e:	82 2b       	or	r24, r18
    4a30:	88 23       	and	r24, r24
    4a32:	51 f0       	breq	.+20     	; 0x4a48 <_ZN3vfo17formatDisplayFreqEPcS0_+0x6e>
				*dstptr++ = '.';	
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	9a 81       	ldd	r25, Y+2	; 0x02
    4a38:	9c 01       	movw	r18, r24
    4a3a:	2f 5f       	subi	r18, 0xFF	; 255
    4a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3e:	3a 83       	std	Y+2, r19	; 0x02
    4a40:	29 83       	std	Y+1, r18	; 0x01
    4a42:	2e e2       	ldi	r18, 0x2E	; 46
    4a44:	fc 01       	movw	r30, r24
    4a46:	20 83       	st	Z, r18
			}
			*dstptr++ = ibuf[i];
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4c:	9c 01       	movw	r18, r24
    4a4e:	2f 5f       	subi	r18, 0xFF	; 255
    4a50:	3f 4f       	sbci	r19, 0xFF	; 255
    4a52:	3a 83       	std	Y+2, r19	; 0x02
    4a54:	29 83       	std	Y+1, r18	; 0x01
    4a56:	2d 81       	ldd	r18, Y+5	; 0x05
    4a58:	3e 81       	ldd	r19, Y+6	; 0x06
    4a5a:	49 85       	ldd	r20, Y+9	; 0x09
    4a5c:	5a 85       	ldd	r21, Y+10	; 0x0a
    4a5e:	24 0f       	add	r18, r20
    4a60:	35 1f       	adc	r19, r21
    4a62:	f9 01       	movw	r30, r18
    4a64:	20 81       	ld	r18, Z
    4a66:	fc 01       	movw	r30, r24
    4a68:	20 83       	st	Z, r18
    4a6a:	20 c0       	rjmp	.+64     	; 0x4aac <_ZN3vfo17formatDisplayFreqEPcS0_+0xd2>
		
		} else {
			if ( ibuf[i] == '0') {
    4a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a70:	29 85       	ldd	r18, Y+9	; 0x09
    4a72:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a74:	82 0f       	add	r24, r18
    4a76:	93 1f       	adc	r25, r19
    4a78:	fc 01       	movw	r30, r24
    4a7a:	80 81       	ld	r24, Z
    4a7c:	80 33       	cpi	r24, 0x30	; 48
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <_ZN3vfo17formatDisplayFreqEPcS0_+0xa8>
				continue;
    4a80:	15 c0       	rjmp	.+42     	; 0x4aac <_ZN3vfo17formatDisplayFreqEPcS0_+0xd2>
			} else {
				found = 1;
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9c 83       	std	Y+4, r25	; 0x04
    4a88:	8b 83       	std	Y+3, r24	; 0x03
				*dstptr++ = ibuf[i];
    4a8a:	89 81       	ldd	r24, Y+1	; 0x01
    4a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8e:	9c 01       	movw	r18, r24
    4a90:	2f 5f       	subi	r18, 0xFF	; 255
    4a92:	3f 4f       	sbci	r19, 0xFF	; 255
    4a94:	3a 83       	std	Y+2, r19	; 0x02
    4a96:	29 83       	std	Y+1, r18	; 0x01
    4a98:	2d 81       	ldd	r18, Y+5	; 0x05
    4a9a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a9c:	49 85       	ldd	r20, Y+9	; 0x09
    4a9e:	5a 85       	ldd	r21, Y+10	; 0x0a
    4aa0:	24 0f       	add	r18, r20
    4aa2:	35 1f       	adc	r19, r21
    4aa4:	f9 01       	movw	r30, r18
    4aa6:	20 81       	ld	r18, Z
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	20 83       	st	Z, r18
	int found = 0;

	//
	// strip leading zeros and insert decimal point
	//
	for (int i=0; i< 9; i++) {
    4aac:	8d 81       	ldd	r24, Y+5	; 0x05
    4aae:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab0:	01 96       	adiw	r24, 0x01	; 1
    4ab2:	9e 83       	std	Y+6, r25	; 0x06
    4ab4:	8d 83       	std	Y+5, r24	; 0x05
    4ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aba:	09 97       	sbiw	r24, 0x09	; 9
    4abc:	0c f4       	brge	.+2      	; 0x4ac0 <_ZN3vfo17formatDisplayFreqEPcS0_+0xe6>
    4abe:	a6 cf       	rjmp	.-180    	; 0x4a0c <_ZN3vfo17formatDisplayFreqEPcS0_+0x32>
				found = 1;
				*dstptr++ = ibuf[i];
			}
		}
	}
	*dstptr = '\0';
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	10 82       	st	Z, r1
}
    4ac8:	2c 96       	adiw	r28, 0x0c	; 12
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	df 91       	pop	r29
    4ad6:	cf 91       	pop	r28
    4ad8:	08 95       	ret

00004ada <_ZN3vfo16getTxDisplayFreqEPc5_band>:



void vfo::getTxDisplayFreq(char *buf, band_t band) {
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	cd b7       	in	r28, 0x3d	; 61
    4ae0:	de b7       	in	r29, 0x3e	; 62
    4ae2:	69 97       	sbiw	r28, 0x19	; 25
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	9e 8b       	std	Y+22, r25	; 0x16
    4af0:	8d 8b       	std	Y+21, r24	; 0x15
    4af2:	78 8f       	std	Y+24, r23	; 0x18
    4af4:	6f 8b       	std	Y+23, r22	; 0x17
    4af6:	49 8f       	std	Y+25, r20	; 0x19

uint32_t freq = vfoData[band].txFreq;
    4af8:	89 8d       	ldd	r24, Y+25	; 0x19
    4afa:	88 2f       	mov	r24, r24
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	2d 89       	ldd	r18, Y+21	; 0x15
    4b00:	3e 89       	ldd	r19, Y+22	; 0x16
    4b02:	88 0f       	add	r24, r24
    4b04:	99 1f       	adc	r25, r25
    4b06:	ac 01       	movw	r20, r24
    4b08:	44 0f       	add	r20, r20
    4b0a:	55 1f       	adc	r21, r21
    4b0c:	44 0f       	add	r20, r20
    4b0e:	55 1f       	adc	r21, r21
    4b10:	44 0f       	add	r20, r20
    4b12:	55 1f       	adc	r21, r21
    4b14:	84 0f       	add	r24, r20
    4b16:	95 1f       	adc	r25, r21
    4b18:	82 0f       	add	r24, r18
    4b1a:	93 1f       	adc	r25, r19
    4b1c:	09 96       	adiw	r24, 0x09	; 9
    4b1e:	fc 01       	movw	r30, r24
    4b20:	80 81       	ld	r24, Z
    4b22:	91 81       	ldd	r25, Z+1	; 0x01
    4b24:	a2 81       	ldd	r26, Z+2	; 0x02
    4b26:	b3 81       	ldd	r27, Z+3	; 0x03
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	9a 83       	std	Y+2, r25	; 0x02
    4b2c:	ab 83       	std	Y+3, r26	; 0x03
    4b2e:	bc 83       	std	Y+4, r27	; 0x04
char tbuf[16];

	intToString32(freq,tbuf);
    4b30:	9e 01       	movw	r18, r28
    4b32:	2b 5f       	subi	r18, 0xFB	; 251
    4b34:	3f 4f       	sbci	r19, 0xFF	; 255
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3a:	ab 81       	ldd	r26, Y+3	; 0x03
    4b3c:	bc 81       	ldd	r27, Y+4	; 0x04
    4b3e:	ed 89       	ldd	r30, Y+21	; 0x15
    4b40:	fe 89       	ldd	r31, Y+22	; 0x16
    4b42:	ac 01       	movw	r20, r24
    4b44:	bd 01       	movw	r22, r26
    4b46:	cf 01       	movw	r24, r30
    4b48:	6a dd       	rcall	.-1324   	; 0x461e <_ZN3vfo13intToString32EmPc>
	formatDisplayFreq(tbuf,buf);
    4b4a:	4f 89       	ldd	r20, Y+23	; 0x17
    4b4c:	58 8d       	ldd	r21, Y+24	; 0x18
    4b4e:	9e 01       	movw	r18, r28
    4b50:	2b 5f       	subi	r18, 0xFB	; 251
    4b52:	3f 4f       	sbci	r19, 0xFF	; 255
    4b54:	8d 89       	ldd	r24, Y+21	; 0x15
    4b56:	9e 89       	ldd	r25, Y+22	; 0x16
    4b58:	b9 01       	movw	r22, r18
    4b5a:	3f df       	rcall	.-386    	; 0x49da <_ZN3vfo17formatDisplayFreqEPcS0_>
}
    4b5c:	69 96       	adiw	r28, 0x19	; 25
    4b5e:	0f b6       	in	r0, 0x3f	; 63
    4b60:	f8 94       	cli
    4b62:	de bf       	out	0x3e, r29	; 62
    4b64:	0f be       	out	0x3f, r0	; 63
    4b66:	cd bf       	out	0x3d, r28	; 61
    4b68:	df 91       	pop	r29
    4b6a:	cf 91       	pop	r28
    4b6c:	08 95       	ret

00004b6e <_ZN3vfo7getLineEv>:


uint16_t vfo::getLine(void) {
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	00 d0       	rcall	.+0      	; 0x4b74 <_ZN3vfo7getLineEv+0x6>
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
    4b78:	9a 83       	std	Y+2, r25	; 0x02
    4b7a:	89 83       	std	Y+1, r24	; 0x01
	return line;
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b80:	87 55       	subi	r24, 0x57	; 87
    4b82:	9f 4f       	sbci	r25, 0xFF	; 255
    4b84:	fc 01       	movw	r30, r24
    4b86:	80 81       	ld	r24, Z
    4b88:	91 81       	ldd	r25, Z+1	; 0x01
}
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	df 91       	pop	r29
    4b90:	cf 91       	pop	r28
    4b92:	08 95       	ret

00004b94 <__cxa_pure_virtual>:


int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {};
void __cxa_pure_virtual(void) {};
    4b94:	cf 93       	push	r28
    4b96:	df 93       	push	r29
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	df 91       	pop	r29
    4b9e:	cf 91       	pop	r28
    4ba0:	08 95       	ret

00004ba2 <__mulsi3>:
    4ba2:	db 01       	movw	r26, r22
    4ba4:	8f 93       	push	r24
    4ba6:	9f 93       	push	r25
    4ba8:	2d d0       	rcall	.+90     	; 0x4c04 <__muluhisi3>
    4baa:	bf 91       	pop	r27
    4bac:	af 91       	pop	r26
    4bae:	a2 9f       	mul	r26, r18
    4bb0:	80 0d       	add	r24, r0
    4bb2:	91 1d       	adc	r25, r1
    4bb4:	a3 9f       	mul	r26, r19
    4bb6:	90 0d       	add	r25, r0
    4bb8:	b2 9f       	mul	r27, r18
    4bba:	90 0d       	add	r25, r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	08 95       	ret

00004bc0 <__udivmodsi4>:
    4bc0:	a1 e2       	ldi	r26, 0x21	; 33
    4bc2:	1a 2e       	mov	r1, r26
    4bc4:	aa 1b       	sub	r26, r26
    4bc6:	bb 1b       	sub	r27, r27
    4bc8:	fd 01       	movw	r30, r26
    4bca:	0d c0       	rjmp	.+26     	; 0x4be6 <__udivmodsi4_ep>

00004bcc <__udivmodsi4_loop>:
    4bcc:	aa 1f       	adc	r26, r26
    4bce:	bb 1f       	adc	r27, r27
    4bd0:	ee 1f       	adc	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	a2 17       	cp	r26, r18
    4bd6:	b3 07       	cpc	r27, r19
    4bd8:	e4 07       	cpc	r30, r20
    4bda:	f5 07       	cpc	r31, r21
    4bdc:	20 f0       	brcs	.+8      	; 0x4be6 <__udivmodsi4_ep>
    4bde:	a2 1b       	sub	r26, r18
    4be0:	b3 0b       	sbc	r27, r19
    4be2:	e4 0b       	sbc	r30, r20
    4be4:	f5 0b       	sbc	r31, r21

00004be6 <__udivmodsi4_ep>:
    4be6:	66 1f       	adc	r22, r22
    4be8:	77 1f       	adc	r23, r23
    4bea:	88 1f       	adc	r24, r24
    4bec:	99 1f       	adc	r25, r25
    4bee:	1a 94       	dec	r1
    4bf0:	69 f7       	brne	.-38     	; 0x4bcc <__udivmodsi4_loop>
    4bf2:	60 95       	com	r22
    4bf4:	70 95       	com	r23
    4bf6:	80 95       	com	r24
    4bf8:	90 95       	com	r25
    4bfa:	9b 01       	movw	r18, r22
    4bfc:	ac 01       	movw	r20, r24
    4bfe:	bd 01       	movw	r22, r26
    4c00:	cf 01       	movw	r24, r30
    4c02:	08 95       	ret

00004c04 <__muluhisi3>:
    4c04:	09 d0       	rcall	.+18     	; 0x4c18 <__umulhisi3>
    4c06:	a5 9f       	mul	r26, r21
    4c08:	90 0d       	add	r25, r0
    4c0a:	b4 9f       	mul	r27, r20
    4c0c:	90 0d       	add	r25, r0
    4c0e:	a4 9f       	mul	r26, r20
    4c10:	80 0d       	add	r24, r0
    4c12:	91 1d       	adc	r25, r1
    4c14:	11 24       	eor	r1, r1
    4c16:	08 95       	ret

00004c18 <__umulhisi3>:
    4c18:	a2 9f       	mul	r26, r18
    4c1a:	b0 01       	movw	r22, r0
    4c1c:	b3 9f       	mul	r27, r19
    4c1e:	c0 01       	movw	r24, r0
    4c20:	a3 9f       	mul	r26, r19
    4c22:	70 0d       	add	r23, r0
    4c24:	81 1d       	adc	r24, r1
    4c26:	11 24       	eor	r1, r1
    4c28:	91 1d       	adc	r25, r1
    4c2a:	b2 9f       	mul	r27, r18
    4c2c:	70 0d       	add	r23, r0
    4c2e:	81 1d       	adc	r24, r1
    4c30:	11 24       	eor	r1, r1
    4c32:	91 1d       	adc	r25, r1
    4c34:	08 95       	ret

00004c36 <__fixunssfsi>:
    4c36:	70 d0       	rcall	.+224    	; 0x4d18 <__fp_splitA>
    4c38:	88 f0       	brcs	.+34     	; 0x4c5c <__fixunssfsi+0x26>
    4c3a:	9f 57       	subi	r25, 0x7F	; 127
    4c3c:	90 f0       	brcs	.+36     	; 0x4c62 <__fixunssfsi+0x2c>
    4c3e:	b9 2f       	mov	r27, r25
    4c40:	99 27       	eor	r25, r25
    4c42:	b7 51       	subi	r27, 0x17	; 23
    4c44:	a0 f0       	brcs	.+40     	; 0x4c6e <__fixunssfsi+0x38>
    4c46:	d1 f0       	breq	.+52     	; 0x4c7c <__fixunssfsi+0x46>
    4c48:	66 0f       	add	r22, r22
    4c4a:	77 1f       	adc	r23, r23
    4c4c:	88 1f       	adc	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	1a f0       	brmi	.+6      	; 0x4c58 <__fixunssfsi+0x22>
    4c52:	ba 95       	dec	r27
    4c54:	c9 f7       	brne	.-14     	; 0x4c48 <__fixunssfsi+0x12>
    4c56:	12 c0       	rjmp	.+36     	; 0x4c7c <__fixunssfsi+0x46>
    4c58:	b1 30       	cpi	r27, 0x01	; 1
    4c5a:	81 f0       	breq	.+32     	; 0x4c7c <__fixunssfsi+0x46>
    4c5c:	77 d0       	rcall	.+238    	; 0x4d4c <__fp_zero>
    4c5e:	b1 e0       	ldi	r27, 0x01	; 1
    4c60:	08 95       	ret
    4c62:	74 c0       	rjmp	.+232    	; 0x4d4c <__fp_zero>
    4c64:	67 2f       	mov	r22, r23
    4c66:	78 2f       	mov	r23, r24
    4c68:	88 27       	eor	r24, r24
    4c6a:	b8 5f       	subi	r27, 0xF8	; 248
    4c6c:	39 f0       	breq	.+14     	; 0x4c7c <__fixunssfsi+0x46>
    4c6e:	b9 3f       	cpi	r27, 0xF9	; 249
    4c70:	cc f3       	brlt	.-14     	; 0x4c64 <__fixunssfsi+0x2e>
    4c72:	86 95       	lsr	r24
    4c74:	77 95       	ror	r23
    4c76:	67 95       	ror	r22
    4c78:	b3 95       	inc	r27
    4c7a:	d9 f7       	brne	.-10     	; 0x4c72 <__fixunssfsi+0x3c>
    4c7c:	3e f4       	brtc	.+14     	; 0x4c8c <__fixunssfsi+0x56>
    4c7e:	90 95       	com	r25
    4c80:	80 95       	com	r24
    4c82:	70 95       	com	r23
    4c84:	61 95       	neg	r22
    4c86:	7f 4f       	sbci	r23, 0xFF	; 255
    4c88:	8f 4f       	sbci	r24, 0xFF	; 255
    4c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c8c:	08 95       	ret

00004c8e <__floatunsisf>:
    4c8e:	e8 94       	clt
    4c90:	09 c0       	rjmp	.+18     	; 0x4ca4 <__floatsisf+0x12>

00004c92 <__floatsisf>:
    4c92:	97 fb       	bst	r25, 7
    4c94:	3e f4       	brtc	.+14     	; 0x4ca4 <__floatsisf+0x12>
    4c96:	90 95       	com	r25
    4c98:	80 95       	com	r24
    4c9a:	70 95       	com	r23
    4c9c:	61 95       	neg	r22
    4c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca4:	99 23       	and	r25, r25
    4ca6:	a9 f0       	breq	.+42     	; 0x4cd2 <__floatsisf+0x40>
    4ca8:	f9 2f       	mov	r31, r25
    4caa:	96 e9       	ldi	r25, 0x96	; 150
    4cac:	bb 27       	eor	r27, r27
    4cae:	93 95       	inc	r25
    4cb0:	f6 95       	lsr	r31
    4cb2:	87 95       	ror	r24
    4cb4:	77 95       	ror	r23
    4cb6:	67 95       	ror	r22
    4cb8:	b7 95       	ror	r27
    4cba:	f1 11       	cpse	r31, r1
    4cbc:	f8 cf       	rjmp	.-16     	; 0x4cae <__floatsisf+0x1c>
    4cbe:	fa f4       	brpl	.+62     	; 0x4cfe <__floatsisf+0x6c>
    4cc0:	bb 0f       	add	r27, r27
    4cc2:	11 f4       	brne	.+4      	; 0x4cc8 <__floatsisf+0x36>
    4cc4:	60 ff       	sbrs	r22, 0
    4cc6:	1b c0       	rjmp	.+54     	; 0x4cfe <__floatsisf+0x6c>
    4cc8:	6f 5f       	subi	r22, 0xFF	; 255
    4cca:	7f 4f       	sbci	r23, 0xFF	; 255
    4ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    4cce:	9f 4f       	sbci	r25, 0xFF	; 255
    4cd0:	16 c0       	rjmp	.+44     	; 0x4cfe <__floatsisf+0x6c>
    4cd2:	88 23       	and	r24, r24
    4cd4:	11 f0       	breq	.+4      	; 0x4cda <__floatsisf+0x48>
    4cd6:	96 e9       	ldi	r25, 0x96	; 150
    4cd8:	11 c0       	rjmp	.+34     	; 0x4cfc <__floatsisf+0x6a>
    4cda:	77 23       	and	r23, r23
    4cdc:	21 f0       	breq	.+8      	; 0x4ce6 <__floatsisf+0x54>
    4cde:	9e e8       	ldi	r25, 0x8E	; 142
    4ce0:	87 2f       	mov	r24, r23
    4ce2:	76 2f       	mov	r23, r22
    4ce4:	05 c0       	rjmp	.+10     	; 0x4cf0 <__floatsisf+0x5e>
    4ce6:	66 23       	and	r22, r22
    4ce8:	71 f0       	breq	.+28     	; 0x4d06 <__floatsisf+0x74>
    4cea:	96 e8       	ldi	r25, 0x86	; 134
    4cec:	86 2f       	mov	r24, r22
    4cee:	70 e0       	ldi	r23, 0x00	; 0
    4cf0:	60 e0       	ldi	r22, 0x00	; 0
    4cf2:	2a f0       	brmi	.+10     	; 0x4cfe <__floatsisf+0x6c>
    4cf4:	9a 95       	dec	r25
    4cf6:	66 0f       	add	r22, r22
    4cf8:	77 1f       	adc	r23, r23
    4cfa:	88 1f       	adc	r24, r24
    4cfc:	da f7       	brpl	.-10     	; 0x4cf4 <__floatsisf+0x62>
    4cfe:	88 0f       	add	r24, r24
    4d00:	96 95       	lsr	r25
    4d02:	87 95       	ror	r24
    4d04:	97 f9       	bld	r25, 7
    4d06:	08 95       	ret

00004d08 <__fp_split3>:
    4d08:	57 fd       	sbrc	r21, 7
    4d0a:	90 58       	subi	r25, 0x80	; 128
    4d0c:	44 0f       	add	r20, r20
    4d0e:	55 1f       	adc	r21, r21
    4d10:	59 f0       	breq	.+22     	; 0x4d28 <__fp_splitA+0x10>
    4d12:	5f 3f       	cpi	r21, 0xFF	; 255
    4d14:	71 f0       	breq	.+28     	; 0x4d32 <__fp_splitA+0x1a>
    4d16:	47 95       	ror	r20

00004d18 <__fp_splitA>:
    4d18:	88 0f       	add	r24, r24
    4d1a:	97 fb       	bst	r25, 7
    4d1c:	99 1f       	adc	r25, r25
    4d1e:	61 f0       	breq	.+24     	; 0x4d38 <__fp_splitA+0x20>
    4d20:	9f 3f       	cpi	r25, 0xFF	; 255
    4d22:	79 f0       	breq	.+30     	; 0x4d42 <__fp_splitA+0x2a>
    4d24:	87 95       	ror	r24
    4d26:	08 95       	ret
    4d28:	12 16       	cp	r1, r18
    4d2a:	13 06       	cpc	r1, r19
    4d2c:	14 06       	cpc	r1, r20
    4d2e:	55 1f       	adc	r21, r21
    4d30:	f2 cf       	rjmp	.-28     	; 0x4d16 <__fp_split3+0xe>
    4d32:	46 95       	lsr	r20
    4d34:	f1 df       	rcall	.-30     	; 0x4d18 <__fp_splitA>
    4d36:	08 c0       	rjmp	.+16     	; 0x4d48 <__fp_splitA+0x30>
    4d38:	16 16       	cp	r1, r22
    4d3a:	17 06       	cpc	r1, r23
    4d3c:	18 06       	cpc	r1, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	f1 cf       	rjmp	.-30     	; 0x4d24 <__fp_splitA+0xc>
    4d42:	86 95       	lsr	r24
    4d44:	71 05       	cpc	r23, r1
    4d46:	61 05       	cpc	r22, r1
    4d48:	08 94       	sec
    4d4a:	08 95       	ret

00004d4c <__fp_zero>:
    4d4c:	e8 94       	clt

00004d4e <__fp_szero>:
    4d4e:	bb 27       	eor	r27, r27
    4d50:	66 27       	eor	r22, r22
    4d52:	77 27       	eor	r23, r23
    4d54:	cb 01       	movw	r24, r22
    4d56:	97 f9       	bld	r25, 7
    4d58:	08 95       	ret

00004d5a <__mulsf3>:
    4d5a:	0b d0       	rcall	.+22     	; 0x4d72 <__mulsf3x>
    4d5c:	78 c0       	rjmp	.+240    	; 0x4e4e <__fp_round>
    4d5e:	69 d0       	rcall	.+210    	; 0x4e32 <__fp_pscA>
    4d60:	28 f0       	brcs	.+10     	; 0x4d6c <__mulsf3+0x12>
    4d62:	6e d0       	rcall	.+220    	; 0x4e40 <__fp_pscB>
    4d64:	18 f0       	brcs	.+6      	; 0x4d6c <__mulsf3+0x12>
    4d66:	95 23       	and	r25, r21
    4d68:	09 f0       	breq	.+2      	; 0x4d6c <__mulsf3+0x12>
    4d6a:	5a c0       	rjmp	.+180    	; 0x4e20 <__fp_inf>
    4d6c:	5f c0       	rjmp	.+190    	; 0x4e2c <__fp_nan>
    4d6e:	11 24       	eor	r1, r1
    4d70:	ee cf       	rjmp	.-36     	; 0x4d4e <__fp_szero>

00004d72 <__mulsf3x>:
    4d72:	ca df       	rcall	.-108    	; 0x4d08 <__fp_split3>
    4d74:	a0 f3       	brcs	.-24     	; 0x4d5e <__mulsf3+0x4>

00004d76 <__mulsf3_pse>:
    4d76:	95 9f       	mul	r25, r21
    4d78:	d1 f3       	breq	.-12     	; 0x4d6e <__mulsf3+0x14>
    4d7a:	95 0f       	add	r25, r21
    4d7c:	50 e0       	ldi	r21, 0x00	; 0
    4d7e:	55 1f       	adc	r21, r21
    4d80:	62 9f       	mul	r22, r18
    4d82:	f0 01       	movw	r30, r0
    4d84:	72 9f       	mul	r23, r18
    4d86:	bb 27       	eor	r27, r27
    4d88:	f0 0d       	add	r31, r0
    4d8a:	b1 1d       	adc	r27, r1
    4d8c:	63 9f       	mul	r22, r19
    4d8e:	aa 27       	eor	r26, r26
    4d90:	f0 0d       	add	r31, r0
    4d92:	b1 1d       	adc	r27, r1
    4d94:	aa 1f       	adc	r26, r26
    4d96:	64 9f       	mul	r22, r20
    4d98:	66 27       	eor	r22, r22
    4d9a:	b0 0d       	add	r27, r0
    4d9c:	a1 1d       	adc	r26, r1
    4d9e:	66 1f       	adc	r22, r22
    4da0:	82 9f       	mul	r24, r18
    4da2:	22 27       	eor	r18, r18
    4da4:	b0 0d       	add	r27, r0
    4da6:	a1 1d       	adc	r26, r1
    4da8:	62 1f       	adc	r22, r18
    4daa:	73 9f       	mul	r23, r19
    4dac:	b0 0d       	add	r27, r0
    4dae:	a1 1d       	adc	r26, r1
    4db0:	62 1f       	adc	r22, r18
    4db2:	83 9f       	mul	r24, r19
    4db4:	a0 0d       	add	r26, r0
    4db6:	61 1d       	adc	r22, r1
    4db8:	22 1f       	adc	r18, r18
    4dba:	74 9f       	mul	r23, r20
    4dbc:	33 27       	eor	r19, r19
    4dbe:	a0 0d       	add	r26, r0
    4dc0:	61 1d       	adc	r22, r1
    4dc2:	23 1f       	adc	r18, r19
    4dc4:	84 9f       	mul	r24, r20
    4dc6:	60 0d       	add	r22, r0
    4dc8:	21 1d       	adc	r18, r1
    4dca:	82 2f       	mov	r24, r18
    4dcc:	76 2f       	mov	r23, r22
    4dce:	6a 2f       	mov	r22, r26
    4dd0:	11 24       	eor	r1, r1
    4dd2:	9f 57       	subi	r25, 0x7F	; 127
    4dd4:	50 40       	sbci	r21, 0x00	; 0
    4dd6:	8a f0       	brmi	.+34     	; 0x4dfa <__mulsf3_pse+0x84>
    4dd8:	e1 f0       	breq	.+56     	; 0x4e12 <__mulsf3_pse+0x9c>
    4dda:	88 23       	and	r24, r24
    4ddc:	4a f0       	brmi	.+18     	; 0x4df0 <__mulsf3_pse+0x7a>
    4dde:	ee 0f       	add	r30, r30
    4de0:	ff 1f       	adc	r31, r31
    4de2:	bb 1f       	adc	r27, r27
    4de4:	66 1f       	adc	r22, r22
    4de6:	77 1f       	adc	r23, r23
    4de8:	88 1f       	adc	r24, r24
    4dea:	91 50       	subi	r25, 0x01	; 1
    4dec:	50 40       	sbci	r21, 0x00	; 0
    4dee:	a9 f7       	brne	.-22     	; 0x4dda <__mulsf3_pse+0x64>
    4df0:	9e 3f       	cpi	r25, 0xFE	; 254
    4df2:	51 05       	cpc	r21, r1
    4df4:	70 f0       	brcs	.+28     	; 0x4e12 <__mulsf3_pse+0x9c>
    4df6:	14 c0       	rjmp	.+40     	; 0x4e20 <__fp_inf>
    4df8:	aa cf       	rjmp	.-172    	; 0x4d4e <__fp_szero>
    4dfa:	5f 3f       	cpi	r21, 0xFF	; 255
    4dfc:	ec f3       	brlt	.-6      	; 0x4df8 <__mulsf3_pse+0x82>
    4dfe:	98 3e       	cpi	r25, 0xE8	; 232
    4e00:	dc f3       	brlt	.-10     	; 0x4df8 <__mulsf3_pse+0x82>
    4e02:	86 95       	lsr	r24
    4e04:	77 95       	ror	r23
    4e06:	67 95       	ror	r22
    4e08:	b7 95       	ror	r27
    4e0a:	f7 95       	ror	r31
    4e0c:	e7 95       	ror	r30
    4e0e:	9f 5f       	subi	r25, 0xFF	; 255
    4e10:	c1 f7       	brne	.-16     	; 0x4e02 <__mulsf3_pse+0x8c>
    4e12:	fe 2b       	or	r31, r30
    4e14:	88 0f       	add	r24, r24
    4e16:	91 1d       	adc	r25, r1
    4e18:	96 95       	lsr	r25
    4e1a:	87 95       	ror	r24
    4e1c:	97 f9       	bld	r25, 7
    4e1e:	08 95       	ret

00004e20 <__fp_inf>:
    4e20:	97 f9       	bld	r25, 7
    4e22:	9f 67       	ori	r25, 0x7F	; 127
    4e24:	80 e8       	ldi	r24, 0x80	; 128
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	08 95       	ret

00004e2c <__fp_nan>:
    4e2c:	9f ef       	ldi	r25, 0xFF	; 255
    4e2e:	80 ec       	ldi	r24, 0xC0	; 192
    4e30:	08 95       	ret

00004e32 <__fp_pscA>:
    4e32:	00 24       	eor	r0, r0
    4e34:	0a 94       	dec	r0
    4e36:	16 16       	cp	r1, r22
    4e38:	17 06       	cpc	r1, r23
    4e3a:	18 06       	cpc	r1, r24
    4e3c:	09 06       	cpc	r0, r25
    4e3e:	08 95       	ret

00004e40 <__fp_pscB>:
    4e40:	00 24       	eor	r0, r0
    4e42:	0a 94       	dec	r0
    4e44:	12 16       	cp	r1, r18
    4e46:	13 06       	cpc	r1, r19
    4e48:	14 06       	cpc	r1, r20
    4e4a:	05 06       	cpc	r0, r21
    4e4c:	08 95       	ret

00004e4e <__fp_round>:
    4e4e:	09 2e       	mov	r0, r25
    4e50:	03 94       	inc	r0
    4e52:	00 0c       	add	r0, r0
    4e54:	11 f4       	brne	.+4      	; 0x4e5a <__fp_round+0xc>
    4e56:	88 23       	and	r24, r24
    4e58:	52 f0       	brmi	.+20     	; 0x4e6e <__fp_round+0x20>
    4e5a:	bb 0f       	add	r27, r27
    4e5c:	40 f4       	brcc	.+16     	; 0x4e6e <__fp_round+0x20>
    4e5e:	bf 2b       	or	r27, r31
    4e60:	11 f4       	brne	.+4      	; 0x4e66 <__fp_round+0x18>
    4e62:	60 ff       	sbrs	r22, 0
    4e64:	04 c0       	rjmp	.+8      	; 0x4e6e <__fp_round+0x20>
    4e66:	6f 5f       	subi	r22, 0xFF	; 255
    4e68:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6e:	08 95       	ret

00004e70 <malloc>:
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	82 30       	cpi	r24, 0x02	; 2
    4e76:	91 05       	cpc	r25, r1
    4e78:	10 f4       	brcc	.+4      	; 0x4e7e <malloc+0xe>
    4e7a:	82 e0       	ldi	r24, 0x02	; 2
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <__flp>
    4e82:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <__flp+0x1>
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	c0 e0       	ldi	r28, 0x00	; 0
    4e8c:	d0 e0       	ldi	r29, 0x00	; 0
    4e8e:	30 97       	sbiw	r30, 0x00	; 0
    4e90:	11 f1       	breq	.+68     	; 0x4ed6 <malloc+0x66>
    4e92:	40 81       	ld	r20, Z
    4e94:	51 81       	ldd	r21, Z+1	; 0x01
    4e96:	48 17       	cp	r20, r24
    4e98:	59 07       	cpc	r21, r25
    4e9a:	c0 f0       	brcs	.+48     	; 0x4ecc <malloc+0x5c>
    4e9c:	48 17       	cp	r20, r24
    4e9e:	59 07       	cpc	r21, r25
    4ea0:	61 f4       	brne	.+24     	; 0x4eba <malloc+0x4a>
    4ea2:	82 81       	ldd	r24, Z+2	; 0x02
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	20 97       	sbiw	r28, 0x00	; 0
    4ea8:	19 f0       	breq	.+6      	; 0x4eb0 <malloc+0x40>
    4eaa:	9b 83       	std	Y+3, r25	; 0x03
    4eac:	8a 83       	std	Y+2, r24	; 0x02
    4eae:	2b c0       	rjmp	.+86     	; 0x4f06 <malloc+0x96>
    4eb0:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__flp+0x1>
    4eb4:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__flp>
    4eb8:	26 c0       	rjmp	.+76     	; 0x4f06 <malloc+0x96>
    4eba:	21 15       	cp	r18, r1
    4ebc:	31 05       	cpc	r19, r1
    4ebe:	19 f0       	breq	.+6      	; 0x4ec6 <malloc+0x56>
    4ec0:	42 17       	cp	r20, r18
    4ec2:	53 07       	cpc	r21, r19
    4ec4:	18 f4       	brcc	.+6      	; 0x4ecc <malloc+0x5c>
    4ec6:	9a 01       	movw	r18, r20
    4ec8:	be 01       	movw	r22, r28
    4eca:	df 01       	movw	r26, r30
    4ecc:	ef 01       	movw	r28, r30
    4ece:	02 80       	ldd	r0, Z+2	; 0x02
    4ed0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ed2:	e0 2d       	mov	r30, r0
    4ed4:	dc cf       	rjmp	.-72     	; 0x4e8e <malloc+0x1e>
    4ed6:	21 15       	cp	r18, r1
    4ed8:	31 05       	cpc	r19, r1
    4eda:	09 f1       	breq	.+66     	; 0x4f1e <malloc+0xae>
    4edc:	28 1b       	sub	r18, r24
    4ede:	39 0b       	sbc	r19, r25
    4ee0:	24 30       	cpi	r18, 0x04	; 4
    4ee2:	31 05       	cpc	r19, r1
    4ee4:	90 f4       	brcc	.+36     	; 0x4f0a <malloc+0x9a>
    4ee6:	12 96       	adiw	r26, 0x02	; 2
    4ee8:	8d 91       	ld	r24, X+
    4eea:	9c 91       	ld	r25, X
    4eec:	13 97       	sbiw	r26, 0x03	; 3
    4eee:	61 15       	cp	r22, r1
    4ef0:	71 05       	cpc	r23, r1
    4ef2:	21 f0       	breq	.+8      	; 0x4efc <malloc+0x8c>
    4ef4:	fb 01       	movw	r30, r22
    4ef6:	93 83       	std	Z+3, r25	; 0x03
    4ef8:	82 83       	std	Z+2, r24	; 0x02
    4efa:	04 c0       	rjmp	.+8      	; 0x4f04 <malloc+0x94>
    4efc:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__flp+0x1>
    4f00:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__flp>
    4f04:	fd 01       	movw	r30, r26
    4f06:	32 96       	adiw	r30, 0x02	; 2
    4f08:	44 c0       	rjmp	.+136    	; 0x4f92 <malloc+0x122>
    4f0a:	fd 01       	movw	r30, r26
    4f0c:	e2 0f       	add	r30, r18
    4f0e:	f3 1f       	adc	r31, r19
    4f10:	81 93       	st	Z+, r24
    4f12:	91 93       	st	Z+, r25
    4f14:	22 50       	subi	r18, 0x02	; 2
    4f16:	31 09       	sbc	r19, r1
    4f18:	2d 93       	st	X+, r18
    4f1a:	3c 93       	st	X, r19
    4f1c:	3a c0       	rjmp	.+116    	; 0x4f92 <malloc+0x122>
    4f1e:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
    4f22:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
    4f26:	23 2b       	or	r18, r19
    4f28:	41 f4       	brne	.+16     	; 0x4f3a <malloc+0xca>
    4f2a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4f2e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f32:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <__brkval+0x1>
    4f36:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <__brkval>
    4f3a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4f3e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4f42:	21 15       	cp	r18, r1
    4f44:	31 05       	cpc	r19, r1
    4f46:	41 f4       	brne	.+16     	; 0x4f58 <malloc+0xe8>
    4f48:	2d b7       	in	r18, 0x3d	; 61
    4f4a:	3e b7       	in	r19, 0x3e	; 62
    4f4c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4f50:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4f54:	24 1b       	sub	r18, r20
    4f56:	35 0b       	sbc	r19, r21
    4f58:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <__brkval>
    4f5c:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <__brkval+0x1>
    4f60:	e2 17       	cp	r30, r18
    4f62:	f3 07       	cpc	r31, r19
    4f64:	a0 f4       	brcc	.+40     	; 0x4f8e <malloc+0x11e>
    4f66:	2e 1b       	sub	r18, r30
    4f68:	3f 0b       	sbc	r19, r31
    4f6a:	28 17       	cp	r18, r24
    4f6c:	39 07       	cpc	r19, r25
    4f6e:	78 f0       	brcs	.+30     	; 0x4f8e <malloc+0x11e>
    4f70:	ac 01       	movw	r20, r24
    4f72:	4e 5f       	subi	r20, 0xFE	; 254
    4f74:	5f 4f       	sbci	r21, 0xFF	; 255
    4f76:	24 17       	cp	r18, r20
    4f78:	35 07       	cpc	r19, r21
    4f7a:	48 f0       	brcs	.+18     	; 0x4f8e <malloc+0x11e>
    4f7c:	4e 0f       	add	r20, r30
    4f7e:	5f 1f       	adc	r21, r31
    4f80:	50 93 5f 03 	sts	0x035F, r21	; 0x80035f <__brkval+0x1>
    4f84:	40 93 5e 03 	sts	0x035E, r20	; 0x80035e <__brkval>
    4f88:	81 93       	st	Z+, r24
    4f8a:	91 93       	st	Z+, r25
    4f8c:	02 c0       	rjmp	.+4      	; 0x4f92 <malloc+0x122>
    4f8e:	e0 e0       	ldi	r30, 0x00	; 0
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	cf 01       	movw	r24, r30
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <free>:
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	00 97       	sbiw	r24, 0x00	; 0
    4fa4:	09 f4       	brne	.+2      	; 0x4fa8 <free+0xe>
    4fa6:	8c c0       	rjmp	.+280    	; 0x50c0 <free+0x126>
    4fa8:	fc 01       	movw	r30, r24
    4faa:	32 97       	sbiw	r30, 0x02	; 2
    4fac:	13 82       	std	Z+3, r1	; 0x03
    4fae:	12 82       	std	Z+2, r1	; 0x02
    4fb0:	00 91 60 03 	lds	r16, 0x0360	; 0x800360 <__flp>
    4fb4:	10 91 61 03 	lds	r17, 0x0361	; 0x800361 <__flp+0x1>
    4fb8:	01 15       	cp	r16, r1
    4fba:	11 05       	cpc	r17, r1
    4fbc:	81 f4       	brne	.+32     	; 0x4fde <free+0x44>
    4fbe:	20 81       	ld	r18, Z
    4fc0:	31 81       	ldd	r19, Z+1	; 0x01
    4fc2:	82 0f       	add	r24, r18
    4fc4:	93 1f       	adc	r25, r19
    4fc6:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
    4fca:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
    4fce:	28 17       	cp	r18, r24
    4fd0:	39 07       	cpc	r19, r25
    4fd2:	79 f5       	brne	.+94     	; 0x5032 <free+0x98>
    4fd4:	f0 93 5f 03 	sts	0x035F, r31	; 0x80035f <__brkval+0x1>
    4fd8:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <__brkval>
    4fdc:	71 c0       	rjmp	.+226    	; 0x50c0 <free+0x126>
    4fde:	d8 01       	movw	r26, r16
    4fe0:	40 e0       	ldi	r20, 0x00	; 0
    4fe2:	50 e0       	ldi	r21, 0x00	; 0
    4fe4:	ae 17       	cp	r26, r30
    4fe6:	bf 07       	cpc	r27, r31
    4fe8:	50 f4       	brcc	.+20     	; 0x4ffe <free+0x64>
    4fea:	12 96       	adiw	r26, 0x02	; 2
    4fec:	2d 91       	ld	r18, X+
    4fee:	3c 91       	ld	r19, X
    4ff0:	13 97       	sbiw	r26, 0x03	; 3
    4ff2:	ad 01       	movw	r20, r26
    4ff4:	21 15       	cp	r18, r1
    4ff6:	31 05       	cpc	r19, r1
    4ff8:	09 f1       	breq	.+66     	; 0x503c <free+0xa2>
    4ffa:	d9 01       	movw	r26, r18
    4ffc:	f3 cf       	rjmp	.-26     	; 0x4fe4 <free+0x4a>
    4ffe:	9d 01       	movw	r18, r26
    5000:	da 01       	movw	r26, r20
    5002:	33 83       	std	Z+3, r19	; 0x03
    5004:	22 83       	std	Z+2, r18	; 0x02
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	86 0f       	add	r24, r22
    500c:	97 1f       	adc	r25, r23
    500e:	82 17       	cp	r24, r18
    5010:	93 07       	cpc	r25, r19
    5012:	69 f4       	brne	.+26     	; 0x502e <free+0x94>
    5014:	ec 01       	movw	r28, r24
    5016:	28 81       	ld	r18, Y
    5018:	39 81       	ldd	r19, Y+1	; 0x01
    501a:	26 0f       	add	r18, r22
    501c:	37 1f       	adc	r19, r23
    501e:	2e 5f       	subi	r18, 0xFE	; 254
    5020:	3f 4f       	sbci	r19, 0xFF	; 255
    5022:	31 83       	std	Z+1, r19	; 0x01
    5024:	20 83       	st	Z, r18
    5026:	8a 81       	ldd	r24, Y+2	; 0x02
    5028:	9b 81       	ldd	r25, Y+3	; 0x03
    502a:	93 83       	std	Z+3, r25	; 0x03
    502c:	82 83       	std	Z+2, r24	; 0x02
    502e:	45 2b       	or	r20, r21
    5030:	29 f4       	brne	.+10     	; 0x503c <free+0xa2>
    5032:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__flp+0x1>
    5036:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__flp>
    503a:	42 c0       	rjmp	.+132    	; 0x50c0 <free+0x126>
    503c:	13 96       	adiw	r26, 0x03	; 3
    503e:	fc 93       	st	X, r31
    5040:	ee 93       	st	-X, r30
    5042:	12 97       	sbiw	r26, 0x02	; 2
    5044:	ed 01       	movw	r28, r26
    5046:	49 91       	ld	r20, Y+
    5048:	59 91       	ld	r21, Y+
    504a:	9e 01       	movw	r18, r28
    504c:	24 0f       	add	r18, r20
    504e:	35 1f       	adc	r19, r21
    5050:	e2 17       	cp	r30, r18
    5052:	f3 07       	cpc	r31, r19
    5054:	71 f4       	brne	.+28     	; 0x5072 <free+0xd8>
    5056:	80 81       	ld	r24, Z
    5058:	91 81       	ldd	r25, Z+1	; 0x01
    505a:	84 0f       	add	r24, r20
    505c:	95 1f       	adc	r25, r21
    505e:	02 96       	adiw	r24, 0x02	; 2
    5060:	11 96       	adiw	r26, 0x01	; 1
    5062:	9c 93       	st	X, r25
    5064:	8e 93       	st	-X, r24
    5066:	82 81       	ldd	r24, Z+2	; 0x02
    5068:	93 81       	ldd	r25, Z+3	; 0x03
    506a:	13 96       	adiw	r26, 0x03	; 3
    506c:	9c 93       	st	X, r25
    506e:	8e 93       	st	-X, r24
    5070:	12 97       	sbiw	r26, 0x02	; 2
    5072:	e0 e0       	ldi	r30, 0x00	; 0
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	d8 01       	movw	r26, r16
    5078:	12 96       	adiw	r26, 0x02	; 2
    507a:	8d 91       	ld	r24, X+
    507c:	9c 91       	ld	r25, X
    507e:	13 97       	sbiw	r26, 0x03	; 3
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	19 f0       	breq	.+6      	; 0x508a <free+0xf0>
    5084:	f8 01       	movw	r30, r16
    5086:	8c 01       	movw	r16, r24
    5088:	f6 cf       	rjmp	.-20     	; 0x5076 <free+0xdc>
    508a:	8d 91       	ld	r24, X+
    508c:	9c 91       	ld	r25, X
    508e:	98 01       	movw	r18, r16
    5090:	2e 5f       	subi	r18, 0xFE	; 254
    5092:	3f 4f       	sbci	r19, 0xFF	; 255
    5094:	82 0f       	add	r24, r18
    5096:	93 1f       	adc	r25, r19
    5098:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
    509c:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
    50a0:	28 17       	cp	r18, r24
    50a2:	39 07       	cpc	r19, r25
    50a4:	69 f4       	brne	.+26     	; 0x50c0 <free+0x126>
    50a6:	30 97       	sbiw	r30, 0x00	; 0
    50a8:	29 f4       	brne	.+10     	; 0x50b4 <free+0x11a>
    50aa:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <__flp+0x1>
    50ae:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__flp>
    50b2:	02 c0       	rjmp	.+4      	; 0x50b8 <free+0x11e>
    50b4:	13 82       	std	Z+3, r1	; 0x03
    50b6:	12 82       	std	Z+2, r1	; 0x02
    50b8:	10 93 5f 03 	sts	0x035F, r17	; 0x80035f <__brkval+0x1>
    50bc:	00 93 5e 03 	sts	0x035E, r16	; 0x80035e <__brkval>
    50c0:	df 91       	pop	r29
    50c2:	cf 91       	pop	r28
    50c4:	1f 91       	pop	r17
    50c6:	0f 91       	pop	r16
    50c8:	08 95       	ret

000050ca <strlen>:
    50ca:	fc 01       	movw	r30, r24
    50cc:	01 90       	ld	r0, Z+
    50ce:	00 20       	and	r0, r0
    50d0:	e9 f7       	brne	.-6      	; 0x50cc <strlen+0x2>
    50d2:	80 95       	com	r24
    50d4:	90 95       	com	r25
    50d6:	8e 0f       	add	r24, r30
    50d8:	9f 1f       	adc	r25, r31
    50da:	08 95       	ret

000050dc <fwrite>:
    50dc:	a0 e0       	ldi	r26, 0x00	; 0
    50de:	b0 e0       	ldi	r27, 0x00	; 0
    50e0:	e3 e7       	ldi	r30, 0x73	; 115
    50e2:	f8 e2       	ldi	r31, 0x28	; 40
    50e4:	f2 c2       	rjmp	.+1508   	; 0x56ca <__prologue_saves__+0xc>
    50e6:	5b 01       	movw	r10, r22
    50e8:	4a 01       	movw	r8, r20
    50ea:	79 01       	movw	r14, r18
    50ec:	d9 01       	movw	r26, r18
    50ee:	13 96       	adiw	r26, 0x03	; 3
    50f0:	2c 91       	ld	r18, X
    50f2:	21 ff       	sbrs	r18, 1
    50f4:	1d c0       	rjmp	.+58     	; 0x5130 <fwrite+0x54>
    50f6:	c0 e0       	ldi	r28, 0x00	; 0
    50f8:	d0 e0       	ldi	r29, 0x00	; 0
    50fa:	c8 15       	cp	r28, r8
    50fc:	d9 05       	cpc	r29, r9
    50fe:	d9 f0       	breq	.+54     	; 0x5136 <fwrite+0x5a>
    5100:	8c 01       	movw	r16, r24
    5102:	6c 01       	movw	r12, r24
    5104:	ca 0c       	add	r12, r10
    5106:	db 1c       	adc	r13, r11
    5108:	c8 01       	movw	r24, r16
    510a:	0c 15       	cp	r16, r12
    510c:	1d 05       	cpc	r17, r13
    510e:	71 f0       	breq	.+28     	; 0x512c <fwrite+0x50>
    5110:	0f 5f       	subi	r16, 0xFF	; 255
    5112:	1f 4f       	sbci	r17, 0xFF	; 255
    5114:	d7 01       	movw	r26, r14
    5116:	18 96       	adiw	r26, 0x08	; 8
    5118:	ed 91       	ld	r30, X+
    511a:	fc 91       	ld	r31, X
    511c:	19 97       	sbiw	r26, 0x09	; 9
    511e:	b7 01       	movw	r22, r14
    5120:	dc 01       	movw	r26, r24
    5122:	8c 91       	ld	r24, X
    5124:	09 95       	icall
    5126:	89 2b       	or	r24, r25
    5128:	79 f3       	breq	.-34     	; 0x5108 <fwrite+0x2c>
    512a:	05 c0       	rjmp	.+10     	; 0x5136 <fwrite+0x5a>
    512c:	21 96       	adiw	r28, 0x01	; 1
    512e:	e5 cf       	rjmp	.-54     	; 0x50fa <fwrite+0x1e>
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	01 c0       	rjmp	.+2      	; 0x5138 <fwrite+0x5c>
    5136:	ce 01       	movw	r24, r28
    5138:	cd b7       	in	r28, 0x3d	; 61
    513a:	de b7       	in	r29, 0x3e	; 62
    513c:	ec e0       	ldi	r30, 0x0C	; 12
    513e:	e1 c2       	rjmp	.+1474   	; 0x5702 <__epilogue_restores__+0xc>

00005140 <puts>:
    5140:	0f 93       	push	r16
    5142:	1f 93       	push	r17
    5144:	cf 93       	push	r28
    5146:	df 93       	push	r29
    5148:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <__iob+0x2>
    514c:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <__iob+0x3>
    5150:	23 81       	ldd	r18, Z+3	; 0x03
    5152:	21 ff       	sbrs	r18, 1
    5154:	1b c0       	rjmp	.+54     	; 0x518c <puts+0x4c>
    5156:	8c 01       	movw	r16, r24
    5158:	d0 e0       	ldi	r29, 0x00	; 0
    515a:	c0 e0       	ldi	r28, 0x00	; 0
    515c:	f8 01       	movw	r30, r16
    515e:	81 91       	ld	r24, Z+
    5160:	8f 01       	movw	r16, r30
    5162:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <__iob+0x2>
    5166:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <__iob+0x3>
    516a:	db 01       	movw	r26, r22
    516c:	18 96       	adiw	r26, 0x08	; 8
    516e:	ed 91       	ld	r30, X+
    5170:	fc 91       	ld	r31, X
    5172:	19 97       	sbiw	r26, 0x09	; 9
    5174:	88 23       	and	r24, r24
    5176:	31 f0       	breq	.+12     	; 0x5184 <puts+0x44>
    5178:	09 95       	icall
    517a:	89 2b       	or	r24, r25
    517c:	79 f3       	breq	.-34     	; 0x515c <puts+0x1c>
    517e:	df ef       	ldi	r29, 0xFF	; 255
    5180:	cf ef       	ldi	r28, 0xFF	; 255
    5182:	ec cf       	rjmp	.-40     	; 0x515c <puts+0x1c>
    5184:	8a e0       	ldi	r24, 0x0A	; 10
    5186:	09 95       	icall
    5188:	89 2b       	or	r24, r25
    518a:	19 f0       	breq	.+6      	; 0x5192 <puts+0x52>
    518c:	8f ef       	ldi	r24, 0xFF	; 255
    518e:	9f ef       	ldi	r25, 0xFF	; 255
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <puts+0x56>
    5192:	8d 2f       	mov	r24, r29
    5194:	9c 2f       	mov	r25, r28
    5196:	df 91       	pop	r29
    5198:	cf 91       	pop	r28
    519a:	1f 91       	pop	r17
    519c:	0f 91       	pop	r16
    519e:	08 95       	ret

000051a0 <sprintf>:
    51a0:	ae e0       	ldi	r26, 0x0E	; 14
    51a2:	b0 e0       	ldi	r27, 0x00	; 0
    51a4:	e5 ed       	ldi	r30, 0xD5	; 213
    51a6:	f8 e2       	ldi	r31, 0x28	; 40
    51a8:	98 c2       	rjmp	.+1328   	; 0x56da <__prologue_saves__+0x1c>
    51aa:	0d 89       	ldd	r16, Y+21	; 0x15
    51ac:	1e 89       	ldd	r17, Y+22	; 0x16
    51ae:	86 e0       	ldi	r24, 0x06	; 6
    51b0:	8c 83       	std	Y+4, r24	; 0x04
    51b2:	1a 83       	std	Y+2, r17	; 0x02
    51b4:	09 83       	std	Y+1, r16	; 0x01
    51b6:	8f ef       	ldi	r24, 0xFF	; 255
    51b8:	9f e7       	ldi	r25, 0x7F	; 127
    51ba:	9e 83       	std	Y+6, r25	; 0x06
    51bc:	8d 83       	std	Y+5, r24	; 0x05
    51be:	ae 01       	movw	r20, r28
    51c0:	47 5e       	subi	r20, 0xE7	; 231
    51c2:	5f 4f       	sbci	r21, 0xFF	; 255
    51c4:	6f 89       	ldd	r22, Y+23	; 0x17
    51c6:	78 8d       	ldd	r23, Y+24	; 0x18
    51c8:	ce 01       	movw	r24, r28
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	09 d0       	rcall	.+18     	; 0x51e0 <vfprintf>
    51ce:	2f 81       	ldd	r18, Y+7	; 0x07
    51d0:	38 85       	ldd	r19, Y+8	; 0x08
    51d2:	f8 01       	movw	r30, r16
    51d4:	e2 0f       	add	r30, r18
    51d6:	f3 1f       	adc	r31, r19
    51d8:	10 82       	st	Z, r1
    51da:	2e 96       	adiw	r28, 0x0e	; 14
    51dc:	e4 e0       	ldi	r30, 0x04	; 4
    51de:	99 c2       	rjmp	.+1330   	; 0x5712 <__epilogue_restores__+0x1c>

000051e0 <vfprintf>:
    51e0:	ac e0       	ldi	r26, 0x0C	; 12
    51e2:	b0 e0       	ldi	r27, 0x00	; 0
    51e4:	e5 ef       	ldi	r30, 0xF5	; 245
    51e6:	f8 e2       	ldi	r31, 0x28	; 40
    51e8:	6a c2       	rjmp	.+1236   	; 0x56be <__prologue_saves__>
    51ea:	7c 01       	movw	r14, r24
    51ec:	6b 01       	movw	r12, r22
    51ee:	8a 01       	movw	r16, r20
    51f0:	fc 01       	movw	r30, r24
    51f2:	17 82       	std	Z+7, r1	; 0x07
    51f4:	16 82       	std	Z+6, r1	; 0x06
    51f6:	83 81       	ldd	r24, Z+3	; 0x03
    51f8:	81 ff       	sbrs	r24, 1
    51fa:	b0 c1       	rjmp	.+864    	; 0x555c <vfprintf+0x37c>
    51fc:	ce 01       	movw	r24, r28
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	4c 01       	movw	r8, r24
    5202:	f7 01       	movw	r30, r14
    5204:	93 81       	ldd	r25, Z+3	; 0x03
    5206:	f6 01       	movw	r30, r12
    5208:	93 fd       	sbrc	r25, 3
    520a:	85 91       	lpm	r24, Z+
    520c:	93 ff       	sbrs	r25, 3
    520e:	81 91       	ld	r24, Z+
    5210:	6f 01       	movw	r12, r30
    5212:	88 23       	and	r24, r24
    5214:	09 f4       	brne	.+2      	; 0x5218 <vfprintf+0x38>
    5216:	9e c1       	rjmp	.+828    	; 0x5554 <vfprintf+0x374>
    5218:	85 32       	cpi	r24, 0x25	; 37
    521a:	39 f4       	brne	.+14     	; 0x522a <vfprintf+0x4a>
    521c:	93 fd       	sbrc	r25, 3
    521e:	85 91       	lpm	r24, Z+
    5220:	93 ff       	sbrs	r25, 3
    5222:	81 91       	ld	r24, Z+
    5224:	6f 01       	movw	r12, r30
    5226:	85 32       	cpi	r24, 0x25	; 37
    5228:	21 f4       	brne	.+8      	; 0x5232 <vfprintf+0x52>
    522a:	b7 01       	movw	r22, r14
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	b1 d1       	rcall	.+866    	; 0x5592 <fputc>
    5230:	e8 cf       	rjmp	.-48     	; 0x5202 <vfprintf+0x22>
    5232:	51 2c       	mov	r5, r1
    5234:	31 2c       	mov	r3, r1
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	20 32       	cpi	r18, 0x20	; 32
    523a:	a0 f4       	brcc	.+40     	; 0x5264 <vfprintf+0x84>
    523c:	8b 32       	cpi	r24, 0x2B	; 43
    523e:	69 f0       	breq	.+26     	; 0x525a <vfprintf+0x7a>
    5240:	30 f4       	brcc	.+12     	; 0x524e <vfprintf+0x6e>
    5242:	80 32       	cpi	r24, 0x20	; 32
    5244:	59 f0       	breq	.+22     	; 0x525c <vfprintf+0x7c>
    5246:	83 32       	cpi	r24, 0x23	; 35
    5248:	69 f4       	brne	.+26     	; 0x5264 <vfprintf+0x84>
    524a:	20 61       	ori	r18, 0x10	; 16
    524c:	2c c0       	rjmp	.+88     	; 0x52a6 <vfprintf+0xc6>
    524e:	8d 32       	cpi	r24, 0x2D	; 45
    5250:	39 f0       	breq	.+14     	; 0x5260 <vfprintf+0x80>
    5252:	80 33       	cpi	r24, 0x30	; 48
    5254:	39 f4       	brne	.+14     	; 0x5264 <vfprintf+0x84>
    5256:	21 60       	ori	r18, 0x01	; 1
    5258:	26 c0       	rjmp	.+76     	; 0x52a6 <vfprintf+0xc6>
    525a:	22 60       	ori	r18, 0x02	; 2
    525c:	24 60       	ori	r18, 0x04	; 4
    525e:	23 c0       	rjmp	.+70     	; 0x52a6 <vfprintf+0xc6>
    5260:	28 60       	ori	r18, 0x08	; 8
    5262:	21 c0       	rjmp	.+66     	; 0x52a6 <vfprintf+0xc6>
    5264:	27 fd       	sbrc	r18, 7
    5266:	27 c0       	rjmp	.+78     	; 0x52b6 <vfprintf+0xd6>
    5268:	30 ed       	ldi	r19, 0xD0	; 208
    526a:	38 0f       	add	r19, r24
    526c:	3a 30       	cpi	r19, 0x0A	; 10
    526e:	78 f4       	brcc	.+30     	; 0x528e <vfprintf+0xae>
    5270:	26 ff       	sbrs	r18, 6
    5272:	06 c0       	rjmp	.+12     	; 0x5280 <vfprintf+0xa0>
    5274:	fa e0       	ldi	r31, 0x0A	; 10
    5276:	5f 9e       	mul	r5, r31
    5278:	30 0d       	add	r19, r0
    527a:	11 24       	eor	r1, r1
    527c:	53 2e       	mov	r5, r19
    527e:	13 c0       	rjmp	.+38     	; 0x52a6 <vfprintf+0xc6>
    5280:	8a e0       	ldi	r24, 0x0A	; 10
    5282:	38 9e       	mul	r3, r24
    5284:	30 0d       	add	r19, r0
    5286:	11 24       	eor	r1, r1
    5288:	33 2e       	mov	r3, r19
    528a:	20 62       	ori	r18, 0x20	; 32
    528c:	0c c0       	rjmp	.+24     	; 0x52a6 <vfprintf+0xc6>
    528e:	8e 32       	cpi	r24, 0x2E	; 46
    5290:	21 f4       	brne	.+8      	; 0x529a <vfprintf+0xba>
    5292:	26 fd       	sbrc	r18, 6
    5294:	5f c1       	rjmp	.+702    	; 0x5554 <vfprintf+0x374>
    5296:	20 64       	ori	r18, 0x40	; 64
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <vfprintf+0xc6>
    529a:	8c 36       	cpi	r24, 0x6C	; 108
    529c:	11 f4       	brne	.+4      	; 0x52a2 <vfprintf+0xc2>
    529e:	20 68       	ori	r18, 0x80	; 128
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <vfprintf+0xc6>
    52a2:	88 36       	cpi	r24, 0x68	; 104
    52a4:	41 f4       	brne	.+16     	; 0x52b6 <vfprintf+0xd6>
    52a6:	f6 01       	movw	r30, r12
    52a8:	93 fd       	sbrc	r25, 3
    52aa:	85 91       	lpm	r24, Z+
    52ac:	93 ff       	sbrs	r25, 3
    52ae:	81 91       	ld	r24, Z+
    52b0:	6f 01       	movw	r12, r30
    52b2:	81 11       	cpse	r24, r1
    52b4:	c1 cf       	rjmp	.-126    	; 0x5238 <vfprintf+0x58>
    52b6:	98 2f       	mov	r25, r24
    52b8:	9f 7d       	andi	r25, 0xDF	; 223
    52ba:	95 54       	subi	r25, 0x45	; 69
    52bc:	93 30       	cpi	r25, 0x03	; 3
    52be:	28 f4       	brcc	.+10     	; 0x52ca <vfprintf+0xea>
    52c0:	0c 5f       	subi	r16, 0xFC	; 252
    52c2:	1f 4f       	sbci	r17, 0xFF	; 255
    52c4:	ff e3       	ldi	r31, 0x3F	; 63
    52c6:	f9 83       	std	Y+1, r31	; 0x01
    52c8:	0d c0       	rjmp	.+26     	; 0x52e4 <vfprintf+0x104>
    52ca:	83 36       	cpi	r24, 0x63	; 99
    52cc:	31 f0       	breq	.+12     	; 0x52da <vfprintf+0xfa>
    52ce:	83 37       	cpi	r24, 0x73	; 115
    52d0:	71 f0       	breq	.+28     	; 0x52ee <vfprintf+0x10e>
    52d2:	83 35       	cpi	r24, 0x53	; 83
    52d4:	09 f0       	breq	.+2      	; 0x52d8 <vfprintf+0xf8>
    52d6:	57 c0       	rjmp	.+174    	; 0x5386 <vfprintf+0x1a6>
    52d8:	21 c0       	rjmp	.+66     	; 0x531c <vfprintf+0x13c>
    52da:	f8 01       	movw	r30, r16
    52dc:	80 81       	ld	r24, Z
    52de:	89 83       	std	Y+1, r24	; 0x01
    52e0:	0e 5f       	subi	r16, 0xFE	; 254
    52e2:	1f 4f       	sbci	r17, 0xFF	; 255
    52e4:	44 24       	eor	r4, r4
    52e6:	43 94       	inc	r4
    52e8:	51 2c       	mov	r5, r1
    52ea:	54 01       	movw	r10, r8
    52ec:	14 c0       	rjmp	.+40     	; 0x5316 <vfprintf+0x136>
    52ee:	38 01       	movw	r6, r16
    52f0:	f2 e0       	ldi	r31, 0x02	; 2
    52f2:	6f 0e       	add	r6, r31
    52f4:	71 1c       	adc	r7, r1
    52f6:	f8 01       	movw	r30, r16
    52f8:	a0 80       	ld	r10, Z
    52fa:	b1 80       	ldd	r11, Z+1	; 0x01
    52fc:	26 ff       	sbrs	r18, 6
    52fe:	03 c0       	rjmp	.+6      	; 0x5306 <vfprintf+0x126>
    5300:	65 2d       	mov	r22, r5
    5302:	70 e0       	ldi	r23, 0x00	; 0
    5304:	02 c0       	rjmp	.+4      	; 0x530a <vfprintf+0x12a>
    5306:	6f ef       	ldi	r22, 0xFF	; 255
    5308:	7f ef       	ldi	r23, 0xFF	; 255
    530a:	c5 01       	movw	r24, r10
    530c:	2c 87       	std	Y+12, r18	; 0x0c
    530e:	36 d1       	rcall	.+620    	; 0x557c <strnlen>
    5310:	2c 01       	movw	r4, r24
    5312:	83 01       	movw	r16, r6
    5314:	2c 85       	ldd	r18, Y+12	; 0x0c
    5316:	2f 77       	andi	r18, 0x7F	; 127
    5318:	22 2e       	mov	r2, r18
    531a:	16 c0       	rjmp	.+44     	; 0x5348 <vfprintf+0x168>
    531c:	38 01       	movw	r6, r16
    531e:	f2 e0       	ldi	r31, 0x02	; 2
    5320:	6f 0e       	add	r6, r31
    5322:	71 1c       	adc	r7, r1
    5324:	f8 01       	movw	r30, r16
    5326:	a0 80       	ld	r10, Z
    5328:	b1 80       	ldd	r11, Z+1	; 0x01
    532a:	26 ff       	sbrs	r18, 6
    532c:	03 c0       	rjmp	.+6      	; 0x5334 <vfprintf+0x154>
    532e:	65 2d       	mov	r22, r5
    5330:	70 e0       	ldi	r23, 0x00	; 0
    5332:	02 c0       	rjmp	.+4      	; 0x5338 <vfprintf+0x158>
    5334:	6f ef       	ldi	r22, 0xFF	; 255
    5336:	7f ef       	ldi	r23, 0xFF	; 255
    5338:	c5 01       	movw	r24, r10
    533a:	2c 87       	std	Y+12, r18	; 0x0c
    533c:	14 d1       	rcall	.+552    	; 0x5566 <strnlen_P>
    533e:	2c 01       	movw	r4, r24
    5340:	2c 85       	ldd	r18, Y+12	; 0x0c
    5342:	20 68       	ori	r18, 0x80	; 128
    5344:	22 2e       	mov	r2, r18
    5346:	83 01       	movw	r16, r6
    5348:	23 fc       	sbrc	r2, 3
    534a:	19 c0       	rjmp	.+50     	; 0x537e <vfprintf+0x19e>
    534c:	83 2d       	mov	r24, r3
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	48 16       	cp	r4, r24
    5352:	59 06       	cpc	r5, r25
    5354:	a0 f4       	brcc	.+40     	; 0x537e <vfprintf+0x19e>
    5356:	b7 01       	movw	r22, r14
    5358:	80 e2       	ldi	r24, 0x20	; 32
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	1a d1       	rcall	.+564    	; 0x5592 <fputc>
    535e:	3a 94       	dec	r3
    5360:	f5 cf       	rjmp	.-22     	; 0x534c <vfprintf+0x16c>
    5362:	f5 01       	movw	r30, r10
    5364:	27 fc       	sbrc	r2, 7
    5366:	85 91       	lpm	r24, Z+
    5368:	27 fe       	sbrs	r2, 7
    536a:	81 91       	ld	r24, Z+
    536c:	5f 01       	movw	r10, r30
    536e:	b7 01       	movw	r22, r14
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	0f d1       	rcall	.+542    	; 0x5592 <fputc>
    5374:	31 10       	cpse	r3, r1
    5376:	3a 94       	dec	r3
    5378:	f1 e0       	ldi	r31, 0x01	; 1
    537a:	4f 1a       	sub	r4, r31
    537c:	51 08       	sbc	r5, r1
    537e:	41 14       	cp	r4, r1
    5380:	51 04       	cpc	r5, r1
    5382:	79 f7       	brne	.-34     	; 0x5362 <vfprintf+0x182>
    5384:	de c0       	rjmp	.+444    	; 0x5542 <vfprintf+0x362>
    5386:	84 36       	cpi	r24, 0x64	; 100
    5388:	11 f0       	breq	.+4      	; 0x538e <vfprintf+0x1ae>
    538a:	89 36       	cpi	r24, 0x69	; 105
    538c:	31 f5       	brne	.+76     	; 0x53da <vfprintf+0x1fa>
    538e:	f8 01       	movw	r30, r16
    5390:	27 ff       	sbrs	r18, 7
    5392:	07 c0       	rjmp	.+14     	; 0x53a2 <vfprintf+0x1c2>
    5394:	60 81       	ld	r22, Z
    5396:	71 81       	ldd	r23, Z+1	; 0x01
    5398:	82 81       	ldd	r24, Z+2	; 0x02
    539a:	93 81       	ldd	r25, Z+3	; 0x03
    539c:	0c 5f       	subi	r16, 0xFC	; 252
    539e:	1f 4f       	sbci	r17, 0xFF	; 255
    53a0:	08 c0       	rjmp	.+16     	; 0x53b2 <vfprintf+0x1d2>
    53a2:	60 81       	ld	r22, Z
    53a4:	71 81       	ldd	r23, Z+1	; 0x01
    53a6:	07 2e       	mov	r0, r23
    53a8:	00 0c       	add	r0, r0
    53aa:	88 0b       	sbc	r24, r24
    53ac:	99 0b       	sbc	r25, r25
    53ae:	0e 5f       	subi	r16, 0xFE	; 254
    53b0:	1f 4f       	sbci	r17, 0xFF	; 255
    53b2:	2f 76       	andi	r18, 0x6F	; 111
    53b4:	72 2e       	mov	r7, r18
    53b6:	97 ff       	sbrs	r25, 7
    53b8:	09 c0       	rjmp	.+18     	; 0x53cc <vfprintf+0x1ec>
    53ba:	90 95       	com	r25
    53bc:	80 95       	com	r24
    53be:	70 95       	com	r23
    53c0:	61 95       	neg	r22
    53c2:	7f 4f       	sbci	r23, 0xFF	; 255
    53c4:	8f 4f       	sbci	r24, 0xFF	; 255
    53c6:	9f 4f       	sbci	r25, 0xFF	; 255
    53c8:	20 68       	ori	r18, 0x80	; 128
    53ca:	72 2e       	mov	r7, r18
    53cc:	2a e0       	ldi	r18, 0x0A	; 10
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	a4 01       	movw	r20, r8
    53d2:	17 d1       	rcall	.+558    	; 0x5602 <__ultoa_invert>
    53d4:	a8 2e       	mov	r10, r24
    53d6:	a8 18       	sub	r10, r8
    53d8:	43 c0       	rjmp	.+134    	; 0x5460 <vfprintf+0x280>
    53da:	85 37       	cpi	r24, 0x75	; 117
    53dc:	29 f4       	brne	.+10     	; 0x53e8 <vfprintf+0x208>
    53de:	2f 7e       	andi	r18, 0xEF	; 239
    53e0:	b2 2e       	mov	r11, r18
    53e2:	2a e0       	ldi	r18, 0x0A	; 10
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	25 c0       	rjmp	.+74     	; 0x5432 <vfprintf+0x252>
    53e8:	f2 2f       	mov	r31, r18
    53ea:	f9 7f       	andi	r31, 0xF9	; 249
    53ec:	bf 2e       	mov	r11, r31
    53ee:	8f 36       	cpi	r24, 0x6F	; 111
    53f0:	c1 f0       	breq	.+48     	; 0x5422 <vfprintf+0x242>
    53f2:	18 f4       	brcc	.+6      	; 0x53fa <vfprintf+0x21a>
    53f4:	88 35       	cpi	r24, 0x58	; 88
    53f6:	79 f0       	breq	.+30     	; 0x5416 <vfprintf+0x236>
    53f8:	ad c0       	rjmp	.+346    	; 0x5554 <vfprintf+0x374>
    53fa:	80 37       	cpi	r24, 0x70	; 112
    53fc:	19 f0       	breq	.+6      	; 0x5404 <vfprintf+0x224>
    53fe:	88 37       	cpi	r24, 0x78	; 120
    5400:	21 f0       	breq	.+8      	; 0x540a <vfprintf+0x22a>
    5402:	a8 c0       	rjmp	.+336    	; 0x5554 <vfprintf+0x374>
    5404:	2f 2f       	mov	r18, r31
    5406:	20 61       	ori	r18, 0x10	; 16
    5408:	b2 2e       	mov	r11, r18
    540a:	b4 fe       	sbrs	r11, 4
    540c:	0d c0       	rjmp	.+26     	; 0x5428 <vfprintf+0x248>
    540e:	8b 2d       	mov	r24, r11
    5410:	84 60       	ori	r24, 0x04	; 4
    5412:	b8 2e       	mov	r11, r24
    5414:	09 c0       	rjmp	.+18     	; 0x5428 <vfprintf+0x248>
    5416:	24 ff       	sbrs	r18, 4
    5418:	0a c0       	rjmp	.+20     	; 0x542e <vfprintf+0x24e>
    541a:	9f 2f       	mov	r25, r31
    541c:	96 60       	ori	r25, 0x06	; 6
    541e:	b9 2e       	mov	r11, r25
    5420:	06 c0       	rjmp	.+12     	; 0x542e <vfprintf+0x24e>
    5422:	28 e0       	ldi	r18, 0x08	; 8
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	05 c0       	rjmp	.+10     	; 0x5432 <vfprintf+0x252>
    5428:	20 e1       	ldi	r18, 0x10	; 16
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	02 c0       	rjmp	.+4      	; 0x5432 <vfprintf+0x252>
    542e:	20 e1       	ldi	r18, 0x10	; 16
    5430:	32 e0       	ldi	r19, 0x02	; 2
    5432:	f8 01       	movw	r30, r16
    5434:	b7 fe       	sbrs	r11, 7
    5436:	07 c0       	rjmp	.+14     	; 0x5446 <vfprintf+0x266>
    5438:	60 81       	ld	r22, Z
    543a:	71 81       	ldd	r23, Z+1	; 0x01
    543c:	82 81       	ldd	r24, Z+2	; 0x02
    543e:	93 81       	ldd	r25, Z+3	; 0x03
    5440:	0c 5f       	subi	r16, 0xFC	; 252
    5442:	1f 4f       	sbci	r17, 0xFF	; 255
    5444:	06 c0       	rjmp	.+12     	; 0x5452 <vfprintf+0x272>
    5446:	60 81       	ld	r22, Z
    5448:	71 81       	ldd	r23, Z+1	; 0x01
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	0e 5f       	subi	r16, 0xFE	; 254
    5450:	1f 4f       	sbci	r17, 0xFF	; 255
    5452:	a4 01       	movw	r20, r8
    5454:	d6 d0       	rcall	.+428    	; 0x5602 <__ultoa_invert>
    5456:	a8 2e       	mov	r10, r24
    5458:	a8 18       	sub	r10, r8
    545a:	fb 2d       	mov	r31, r11
    545c:	ff 77       	andi	r31, 0x7F	; 127
    545e:	7f 2e       	mov	r7, r31
    5460:	76 fe       	sbrs	r7, 6
    5462:	0b c0       	rjmp	.+22     	; 0x547a <vfprintf+0x29a>
    5464:	37 2d       	mov	r19, r7
    5466:	3e 7f       	andi	r19, 0xFE	; 254
    5468:	a5 14       	cp	r10, r5
    546a:	50 f4       	brcc	.+20     	; 0x5480 <vfprintf+0x2a0>
    546c:	74 fe       	sbrs	r7, 4
    546e:	0a c0       	rjmp	.+20     	; 0x5484 <vfprintf+0x2a4>
    5470:	72 fc       	sbrc	r7, 2
    5472:	08 c0       	rjmp	.+16     	; 0x5484 <vfprintf+0x2a4>
    5474:	37 2d       	mov	r19, r7
    5476:	3e 7e       	andi	r19, 0xEE	; 238
    5478:	05 c0       	rjmp	.+10     	; 0x5484 <vfprintf+0x2a4>
    547a:	ba 2c       	mov	r11, r10
    547c:	37 2d       	mov	r19, r7
    547e:	03 c0       	rjmp	.+6      	; 0x5486 <vfprintf+0x2a6>
    5480:	ba 2c       	mov	r11, r10
    5482:	01 c0       	rjmp	.+2      	; 0x5486 <vfprintf+0x2a6>
    5484:	b5 2c       	mov	r11, r5
    5486:	34 ff       	sbrs	r19, 4
    5488:	0d c0       	rjmp	.+26     	; 0x54a4 <vfprintf+0x2c4>
    548a:	fe 01       	movw	r30, r28
    548c:	ea 0d       	add	r30, r10
    548e:	f1 1d       	adc	r31, r1
    5490:	80 81       	ld	r24, Z
    5492:	80 33       	cpi	r24, 0x30	; 48
    5494:	11 f4       	brne	.+4      	; 0x549a <vfprintf+0x2ba>
    5496:	39 7e       	andi	r19, 0xE9	; 233
    5498:	09 c0       	rjmp	.+18     	; 0x54ac <vfprintf+0x2cc>
    549a:	32 ff       	sbrs	r19, 2
    549c:	06 c0       	rjmp	.+12     	; 0x54aa <vfprintf+0x2ca>
    549e:	b3 94       	inc	r11
    54a0:	b3 94       	inc	r11
    54a2:	04 c0       	rjmp	.+8      	; 0x54ac <vfprintf+0x2cc>
    54a4:	83 2f       	mov	r24, r19
    54a6:	86 78       	andi	r24, 0x86	; 134
    54a8:	09 f0       	breq	.+2      	; 0x54ac <vfprintf+0x2cc>
    54aa:	b3 94       	inc	r11
    54ac:	33 fd       	sbrc	r19, 3
    54ae:	12 c0       	rjmp	.+36     	; 0x54d4 <vfprintf+0x2f4>
    54b0:	30 ff       	sbrs	r19, 0
    54b2:	06 c0       	rjmp	.+12     	; 0x54c0 <vfprintf+0x2e0>
    54b4:	5a 2c       	mov	r5, r10
    54b6:	b3 14       	cp	r11, r3
    54b8:	18 f4       	brcc	.+6      	; 0x54c0 <vfprintf+0x2e0>
    54ba:	53 0c       	add	r5, r3
    54bc:	5b 18       	sub	r5, r11
    54be:	b3 2c       	mov	r11, r3
    54c0:	b3 14       	cp	r11, r3
    54c2:	60 f4       	brcc	.+24     	; 0x54dc <vfprintf+0x2fc>
    54c4:	b7 01       	movw	r22, r14
    54c6:	80 e2       	ldi	r24, 0x20	; 32
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	3c 87       	std	Y+12, r19	; 0x0c
    54cc:	62 d0       	rcall	.+196    	; 0x5592 <fputc>
    54ce:	b3 94       	inc	r11
    54d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    54d2:	f6 cf       	rjmp	.-20     	; 0x54c0 <vfprintf+0x2e0>
    54d4:	b3 14       	cp	r11, r3
    54d6:	10 f4       	brcc	.+4      	; 0x54dc <vfprintf+0x2fc>
    54d8:	3b 18       	sub	r3, r11
    54da:	01 c0       	rjmp	.+2      	; 0x54de <vfprintf+0x2fe>
    54dc:	31 2c       	mov	r3, r1
    54de:	34 ff       	sbrs	r19, 4
    54e0:	11 c0       	rjmp	.+34     	; 0x5504 <vfprintf+0x324>
    54e2:	b7 01       	movw	r22, r14
    54e4:	80 e3       	ldi	r24, 0x30	; 48
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	3c 87       	std	Y+12, r19	; 0x0c
    54ea:	53 d0       	rcall	.+166    	; 0x5592 <fputc>
    54ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    54ee:	32 ff       	sbrs	r19, 2
    54f0:	16 c0       	rjmp	.+44     	; 0x551e <vfprintf+0x33e>
    54f2:	31 fd       	sbrc	r19, 1
    54f4:	03 c0       	rjmp	.+6      	; 0x54fc <vfprintf+0x31c>
    54f6:	88 e7       	ldi	r24, 0x78	; 120
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	02 c0       	rjmp	.+4      	; 0x5500 <vfprintf+0x320>
    54fc:	88 e5       	ldi	r24, 0x58	; 88
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	b7 01       	movw	r22, r14
    5502:	0c c0       	rjmp	.+24     	; 0x551c <vfprintf+0x33c>
    5504:	83 2f       	mov	r24, r19
    5506:	86 78       	andi	r24, 0x86	; 134
    5508:	51 f0       	breq	.+20     	; 0x551e <vfprintf+0x33e>
    550a:	31 ff       	sbrs	r19, 1
    550c:	02 c0       	rjmp	.+4      	; 0x5512 <vfprintf+0x332>
    550e:	8b e2       	ldi	r24, 0x2B	; 43
    5510:	01 c0       	rjmp	.+2      	; 0x5514 <vfprintf+0x334>
    5512:	80 e2       	ldi	r24, 0x20	; 32
    5514:	37 fd       	sbrc	r19, 7
    5516:	8d e2       	ldi	r24, 0x2D	; 45
    5518:	b7 01       	movw	r22, r14
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	3a d0       	rcall	.+116    	; 0x5592 <fputc>
    551e:	a5 14       	cp	r10, r5
    5520:	30 f4       	brcc	.+12     	; 0x552e <vfprintf+0x34e>
    5522:	b7 01       	movw	r22, r14
    5524:	80 e3       	ldi	r24, 0x30	; 48
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	34 d0       	rcall	.+104    	; 0x5592 <fputc>
    552a:	5a 94       	dec	r5
    552c:	f8 cf       	rjmp	.-16     	; 0x551e <vfprintf+0x33e>
    552e:	aa 94       	dec	r10
    5530:	f4 01       	movw	r30, r8
    5532:	ea 0d       	add	r30, r10
    5534:	f1 1d       	adc	r31, r1
    5536:	80 81       	ld	r24, Z
    5538:	b7 01       	movw	r22, r14
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	2a d0       	rcall	.+84     	; 0x5592 <fputc>
    553e:	a1 10       	cpse	r10, r1
    5540:	f6 cf       	rjmp	.-20     	; 0x552e <vfprintf+0x34e>
    5542:	33 20       	and	r3, r3
    5544:	09 f4       	brne	.+2      	; 0x5548 <vfprintf+0x368>
    5546:	5d ce       	rjmp	.-838    	; 0x5202 <vfprintf+0x22>
    5548:	b7 01       	movw	r22, r14
    554a:	80 e2       	ldi	r24, 0x20	; 32
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	21 d0       	rcall	.+66     	; 0x5592 <fputc>
    5550:	3a 94       	dec	r3
    5552:	f7 cf       	rjmp	.-18     	; 0x5542 <vfprintf+0x362>
    5554:	f7 01       	movw	r30, r14
    5556:	86 81       	ldd	r24, Z+6	; 0x06
    5558:	97 81       	ldd	r25, Z+7	; 0x07
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <vfprintf+0x380>
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	9f ef       	ldi	r25, 0xFF	; 255
    5560:	2c 96       	adiw	r28, 0x0c	; 12
    5562:	e2 e1       	ldi	r30, 0x12	; 18
    5564:	c8 c0       	rjmp	.+400    	; 0x56f6 <__epilogue_restores__>

00005566 <strnlen_P>:
    5566:	fc 01       	movw	r30, r24
    5568:	05 90       	lpm	r0, Z+
    556a:	61 50       	subi	r22, 0x01	; 1
    556c:	70 40       	sbci	r23, 0x00	; 0
    556e:	01 10       	cpse	r0, r1
    5570:	d8 f7       	brcc	.-10     	; 0x5568 <strnlen_P+0x2>
    5572:	80 95       	com	r24
    5574:	90 95       	com	r25
    5576:	8e 0f       	add	r24, r30
    5578:	9f 1f       	adc	r25, r31
    557a:	08 95       	ret

0000557c <strnlen>:
    557c:	fc 01       	movw	r30, r24
    557e:	61 50       	subi	r22, 0x01	; 1
    5580:	70 40       	sbci	r23, 0x00	; 0
    5582:	01 90       	ld	r0, Z+
    5584:	01 10       	cpse	r0, r1
    5586:	d8 f7       	brcc	.-10     	; 0x557e <strnlen+0x2>
    5588:	80 95       	com	r24
    558a:	90 95       	com	r25
    558c:	8e 0f       	add	r24, r30
    558e:	9f 1f       	adc	r25, r31
    5590:	08 95       	ret

00005592 <fputc>:
    5592:	0f 93       	push	r16
    5594:	1f 93       	push	r17
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	fb 01       	movw	r30, r22
    559c:	23 81       	ldd	r18, Z+3	; 0x03
    559e:	21 fd       	sbrc	r18, 1
    55a0:	03 c0       	rjmp	.+6      	; 0x55a8 <fputc+0x16>
    55a2:	8f ef       	ldi	r24, 0xFF	; 255
    55a4:	9f ef       	ldi	r25, 0xFF	; 255
    55a6:	28 c0       	rjmp	.+80     	; 0x55f8 <fputc+0x66>
    55a8:	22 ff       	sbrs	r18, 2
    55aa:	16 c0       	rjmp	.+44     	; 0x55d8 <fputc+0x46>
    55ac:	46 81       	ldd	r20, Z+6	; 0x06
    55ae:	57 81       	ldd	r21, Z+7	; 0x07
    55b0:	24 81       	ldd	r18, Z+4	; 0x04
    55b2:	35 81       	ldd	r19, Z+5	; 0x05
    55b4:	42 17       	cp	r20, r18
    55b6:	53 07       	cpc	r21, r19
    55b8:	44 f4       	brge	.+16     	; 0x55ca <fputc+0x38>
    55ba:	a0 81       	ld	r26, Z
    55bc:	b1 81       	ldd	r27, Z+1	; 0x01
    55be:	9d 01       	movw	r18, r26
    55c0:	2f 5f       	subi	r18, 0xFF	; 255
    55c2:	3f 4f       	sbci	r19, 0xFF	; 255
    55c4:	31 83       	std	Z+1, r19	; 0x01
    55c6:	20 83       	st	Z, r18
    55c8:	8c 93       	st	X, r24
    55ca:	26 81       	ldd	r18, Z+6	; 0x06
    55cc:	37 81       	ldd	r19, Z+7	; 0x07
    55ce:	2f 5f       	subi	r18, 0xFF	; 255
    55d0:	3f 4f       	sbci	r19, 0xFF	; 255
    55d2:	37 83       	std	Z+7, r19	; 0x07
    55d4:	26 83       	std	Z+6, r18	; 0x06
    55d6:	10 c0       	rjmp	.+32     	; 0x55f8 <fputc+0x66>
    55d8:	eb 01       	movw	r28, r22
    55da:	09 2f       	mov	r16, r25
    55dc:	18 2f       	mov	r17, r24
    55de:	00 84       	ldd	r0, Z+8	; 0x08
    55e0:	f1 85       	ldd	r31, Z+9	; 0x09
    55e2:	e0 2d       	mov	r30, r0
    55e4:	09 95       	icall
    55e6:	89 2b       	or	r24, r25
    55e8:	e1 f6       	brne	.-72     	; 0x55a2 <fputc+0x10>
    55ea:	8e 81       	ldd	r24, Y+6	; 0x06
    55ec:	9f 81       	ldd	r25, Y+7	; 0x07
    55ee:	01 96       	adiw	r24, 0x01	; 1
    55f0:	9f 83       	std	Y+7, r25	; 0x07
    55f2:	8e 83       	std	Y+6, r24	; 0x06
    55f4:	81 2f       	mov	r24, r17
    55f6:	90 2f       	mov	r25, r16
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	1f 91       	pop	r17
    55fe:	0f 91       	pop	r16
    5600:	08 95       	ret

00005602 <__ultoa_invert>:
    5602:	fa 01       	movw	r30, r20
    5604:	aa 27       	eor	r26, r26
    5606:	28 30       	cpi	r18, 0x08	; 8
    5608:	51 f1       	breq	.+84     	; 0x565e <__ultoa_invert+0x5c>
    560a:	20 31       	cpi	r18, 0x10	; 16
    560c:	81 f1       	breq	.+96     	; 0x566e <__ultoa_invert+0x6c>
    560e:	e8 94       	clt
    5610:	6f 93       	push	r22
    5612:	6e 7f       	andi	r22, 0xFE	; 254
    5614:	6e 5f       	subi	r22, 0xFE	; 254
    5616:	7f 4f       	sbci	r23, 0xFF	; 255
    5618:	8f 4f       	sbci	r24, 0xFF	; 255
    561a:	9f 4f       	sbci	r25, 0xFF	; 255
    561c:	af 4f       	sbci	r26, 0xFF	; 255
    561e:	b1 e0       	ldi	r27, 0x01	; 1
    5620:	3e d0       	rcall	.+124    	; 0x569e <__ultoa_invert+0x9c>
    5622:	b4 e0       	ldi	r27, 0x04	; 4
    5624:	3c d0       	rcall	.+120    	; 0x569e <__ultoa_invert+0x9c>
    5626:	67 0f       	add	r22, r23
    5628:	78 1f       	adc	r23, r24
    562a:	89 1f       	adc	r24, r25
    562c:	9a 1f       	adc	r25, r26
    562e:	a1 1d       	adc	r26, r1
    5630:	68 0f       	add	r22, r24
    5632:	79 1f       	adc	r23, r25
    5634:	8a 1f       	adc	r24, r26
    5636:	91 1d       	adc	r25, r1
    5638:	a1 1d       	adc	r26, r1
    563a:	6a 0f       	add	r22, r26
    563c:	71 1d       	adc	r23, r1
    563e:	81 1d       	adc	r24, r1
    5640:	91 1d       	adc	r25, r1
    5642:	a1 1d       	adc	r26, r1
    5644:	20 d0       	rcall	.+64     	; 0x5686 <__ultoa_invert+0x84>
    5646:	09 f4       	brne	.+2      	; 0x564a <__ultoa_invert+0x48>
    5648:	68 94       	set
    564a:	3f 91       	pop	r19
    564c:	2a e0       	ldi	r18, 0x0A	; 10
    564e:	26 9f       	mul	r18, r22
    5650:	11 24       	eor	r1, r1
    5652:	30 19       	sub	r19, r0
    5654:	30 5d       	subi	r19, 0xD0	; 208
    5656:	31 93       	st	Z+, r19
    5658:	de f6       	brtc	.-74     	; 0x5610 <__ultoa_invert+0xe>
    565a:	cf 01       	movw	r24, r30
    565c:	08 95       	ret
    565e:	46 2f       	mov	r20, r22
    5660:	47 70       	andi	r20, 0x07	; 7
    5662:	40 5d       	subi	r20, 0xD0	; 208
    5664:	41 93       	st	Z+, r20
    5666:	b3 e0       	ldi	r27, 0x03	; 3
    5668:	0f d0       	rcall	.+30     	; 0x5688 <__ultoa_invert+0x86>
    566a:	c9 f7       	brne	.-14     	; 0x565e <__ultoa_invert+0x5c>
    566c:	f6 cf       	rjmp	.-20     	; 0x565a <__ultoa_invert+0x58>
    566e:	46 2f       	mov	r20, r22
    5670:	4f 70       	andi	r20, 0x0F	; 15
    5672:	40 5d       	subi	r20, 0xD0	; 208
    5674:	4a 33       	cpi	r20, 0x3A	; 58
    5676:	18 f0       	brcs	.+6      	; 0x567e <__ultoa_invert+0x7c>
    5678:	49 5d       	subi	r20, 0xD9	; 217
    567a:	31 fd       	sbrc	r19, 1
    567c:	40 52       	subi	r20, 0x20	; 32
    567e:	41 93       	st	Z+, r20
    5680:	02 d0       	rcall	.+4      	; 0x5686 <__ultoa_invert+0x84>
    5682:	a9 f7       	brne	.-22     	; 0x566e <__ultoa_invert+0x6c>
    5684:	ea cf       	rjmp	.-44     	; 0x565a <__ultoa_invert+0x58>
    5686:	b4 e0       	ldi	r27, 0x04	; 4
    5688:	a6 95       	lsr	r26
    568a:	97 95       	ror	r25
    568c:	87 95       	ror	r24
    568e:	77 95       	ror	r23
    5690:	67 95       	ror	r22
    5692:	ba 95       	dec	r27
    5694:	c9 f7       	brne	.-14     	; 0x5688 <__ultoa_invert+0x86>
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	61 05       	cpc	r22, r1
    569a:	71 05       	cpc	r23, r1
    569c:	08 95       	ret
    569e:	9b 01       	movw	r18, r22
    56a0:	ac 01       	movw	r20, r24
    56a2:	0a 2e       	mov	r0, r26
    56a4:	06 94       	lsr	r0
    56a6:	57 95       	ror	r21
    56a8:	47 95       	ror	r20
    56aa:	37 95       	ror	r19
    56ac:	27 95       	ror	r18
    56ae:	ba 95       	dec	r27
    56b0:	c9 f7       	brne	.-14     	; 0x56a4 <__ultoa_invert+0xa2>
    56b2:	62 0f       	add	r22, r18
    56b4:	73 1f       	adc	r23, r19
    56b6:	84 1f       	adc	r24, r20
    56b8:	95 1f       	adc	r25, r21
    56ba:	a0 1d       	adc	r26, r0
    56bc:	08 95       	ret

000056be <__prologue_saves__>:
    56be:	2f 92       	push	r2
    56c0:	3f 92       	push	r3
    56c2:	4f 92       	push	r4
    56c4:	5f 92       	push	r5
    56c6:	6f 92       	push	r6
    56c8:	7f 92       	push	r7
    56ca:	8f 92       	push	r8
    56cc:	9f 92       	push	r9
    56ce:	af 92       	push	r10
    56d0:	bf 92       	push	r11
    56d2:	cf 92       	push	r12
    56d4:	df 92       	push	r13
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	cd b7       	in	r28, 0x3d	; 61
    56e4:	de b7       	in	r29, 0x3e	; 62
    56e6:	ca 1b       	sub	r28, r26
    56e8:	db 0b       	sbc	r29, r27
    56ea:	0f b6       	in	r0, 0x3f	; 63
    56ec:	f8 94       	cli
    56ee:	de bf       	out	0x3e, r29	; 62
    56f0:	0f be       	out	0x3f, r0	; 63
    56f2:	cd bf       	out	0x3d, r28	; 61
    56f4:	09 94       	ijmp

000056f6 <__epilogue_restores__>:
    56f6:	2a 88       	ldd	r2, Y+18	; 0x12
    56f8:	39 88       	ldd	r3, Y+17	; 0x11
    56fa:	48 88       	ldd	r4, Y+16	; 0x10
    56fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    56fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    5700:	7d 84       	ldd	r7, Y+13	; 0x0d
    5702:	8c 84       	ldd	r8, Y+12	; 0x0c
    5704:	9b 84       	ldd	r9, Y+11	; 0x0b
    5706:	aa 84       	ldd	r10, Y+10	; 0x0a
    5708:	b9 84       	ldd	r11, Y+9	; 0x09
    570a:	c8 84       	ldd	r12, Y+8	; 0x08
    570c:	df 80       	ldd	r13, Y+7	; 0x07
    570e:	ee 80       	ldd	r14, Y+6	; 0x06
    5710:	fd 80       	ldd	r15, Y+5	; 0x05
    5712:	0c 81       	ldd	r16, Y+4	; 0x04
    5714:	1b 81       	ldd	r17, Y+3	; 0x03
    5716:	aa 81       	ldd	r26, Y+2	; 0x02
    5718:	b9 81       	ldd	r27, Y+1	; 0x01
    571a:	ce 0f       	add	r28, r30
    571c:	d1 1d       	adc	r29, r1
    571e:	0f b6       	in	r0, 0x3f	; 63
    5720:	f8 94       	cli
    5722:	de bf       	out	0x3e, r29	; 62
    5724:	0f be       	out	0x3f, r0	; 63
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	ed 01       	movw	r28, r26
    572a:	08 95       	ret

0000572c <_exit>:
    572c:	f8 94       	cli

0000572e <__stop_program>:
    572e:	ff cf       	rjmp	.-2      	; 0x572e <__stop_program>
